==============================================
Select an uncovered user-permission tuple:
<u,p>=<aud2,(read,proj21sched)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (read,proj21sched) is uncovered and that have the same candidate constraint as aud2
[code21, des21, plan2, aud2]
==============================================
Removed Sets for UAE projects supseteqln {{proj22 proj21} {proj21}}
[[proj22, proj21]]
==============================================
Result of computeUAE:
[projects supseteqln {{proj21}}, uid in {code21 des21 plan2 aud2}]
==============================================
Result of computePAE:
[project in {proj21}, department in {dept2}, type in {schedule}]
==============================================
Generalized Rule: 
rule(uid in {code21 des21 plan2 aud2}; department in {dept2}, type in {schedule}; {read }; projects ] project)
==============================================
Remove UP Set: [(aud2,read,proj21sched), (des21,read,proj21sched), (code21,read,proj21sched), (aud2,read,proj22sched), (plan2,read,proj22sched), (plan2,read,proj21sched)]
==============================================
Remaining Uncovered UP Size: 183
==============================================
The set of perms which aud2 is uncovered and that have the same candidate constraint as (read,proj21sched)
[read]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{auditor}}]
==============================================
Result of computePAE:
[project in {proj21}, department in {dept2}, type in {schedule}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{auditor}}; department in {dept2}, type in {schedule}; {read }; projects ] project)
==============================================
Remaining Uncovered UP Size: 183
==============================================
Select an uncovered user-permission tuple:
<u,p>=<des11,(request,proj11task1prop)>
==============================================
Candidate constraint:
[expertise > expertise, projects ] project]
==============================================
The set of users which (request,proj11task1prop) is uncovered and that have the same candidate constraint as des11
[des11]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11}}, expertise supseteqln {{design}}, tasks supseteqln {{proj11task1a proj11task1propa}}, isEmployee in {True}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task1prop}]
==============================================
Generalized Rule: 
rule(tasks supseteqln {{proj11task1a proj11task1propa}}, isEmployee in {True}; department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task1prop}; {request }; expertise > expertise, projects ] project)
==============================================
Remove UP Set: [(des11,request,proj11task1prop)]
==============================================
Remaining Uncovered UP Size: 182
==============================================
The set of perms which des11 is uncovered and that have the same candidate constraint as (request,proj11task1prop)
[request, read]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11}}, expertise supseteqln {{design}}, tasks supseteqln {{proj11task1a proj11task1propa}}, isEmployee in {True}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task1prop}]
==============================================
Generalized Rule: 
rule(tasks supseteqln {{proj11task1a proj11task1propa}}, isEmployee in {True}; department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task1prop}; {request read }; expertise > expertise, projects ] project)
==============================================
Remaining Uncovered UP Size: 181
==============================================
Select an uncovered user-permission tuple:
<u,p>=<code11,(read,proj11task2prop)>
==============================================
Candidate constraint:
[expertise > expertise, projects ] project]
==============================================
The set of users which (read,proj11task2prop) is uncovered and that have the same candidate constraint as code11
[code11]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11}}, expertise supseteqln {{coding}}, tasks supseteqln {{proj11task2a proj11task2propa}}, isEmployee in {True}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task2prop}]
==============================================
Generalized Rule: 
rule(tasks supseteqln {{proj11task2a proj11task2propa}}, isEmployee in {True}; department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task2prop}; {read }; expertise > expertise, projects ] project)
==============================================
Remove UP Set: [(code11,read,proj11task2prop)]
==============================================
Remaining Uncovered UP Size: 180
==============================================
The set of perms which code11 is uncovered and that have the same candidate constraint as (read,proj11task2prop)
[request, read]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11}}, expertise supseteqln {{coding}}, tasks supseteqln {{proj11task2a proj11task2propa}}, isEmployee in {True}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task2prop}]
==============================================
Generalized Rule: 
rule(tasks supseteqln {{proj11task2a proj11task2propa}}, isEmployee in {True}; department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task2prop}; {request read }; expertise > expertise, projects ] project)
==============================================
Remaining Uncovered UP Size: 179
==============================================
Select an uncovered user-permission tuple:
<u,p>=<plan2,(setSchedule,proj21task2propa)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setSchedule,proj21task2propa) is uncovered and that have the same candidate constraint as plan2
[plan2]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task2propa}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{coding}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task2propa}; {setSchedule }; projects ] project)
==============================================
Remove UP Set: [(plan2,setSchedule,proj21task2propa)]
==============================================
Remaining Uncovered UP Size: 178
==============================================
The set of perms which plan2 is uncovered and that have the same candidate constraint as (setSchedule,proj21task2propa)
[setSchedule]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task2propa}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{coding}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task2propa}; {setSchedule }; projects ] project)
==============================================
Remaining Uncovered UP Size: 178
==============================================
Select an uncovered user-permission tuple:
<u,p>=<code22,(read,proj22task2)>
==============================================
Candidate constraint:
[expertise > expertise, projects ] project]
==============================================
The set of users which (read,proj22task2) is uncovered and that have the same candidate constraint as code22
[code22]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22}}, expertise supseteqln {{coding}}, tasks supseteqln {{proj22task2a proj22task2propa}}, isEmployee in {False}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task2}]
==============================================
Generalized Rule: 
rule(tasks supseteqln {{proj22task2a proj22task2propa}}, isEmployee in {False}; department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task2}; {read }; expertise > expertise, projects ] project)
==============================================
Remove UP Set: [(code22,read,proj22task2)]
==============================================
Remaining Uncovered UP Size: 177
==============================================
The set of perms which code22 is uncovered and that have the same candidate constraint as (read,proj22task2)
[request, read]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22}}, expertise supseteqln {{coding}}, tasks supseteqln {{proj22task2a proj22task2propa}}, isEmployee in {False}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task2}]
==============================================
Generalized Rule: 
rule(tasks supseteqln {{proj22task2a proj22task2propa}}, isEmployee in {False}; department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task2}; {request read }; expertise > expertise, projects ] project)
==============================================
Remaining Uncovered UP Size: 176
==============================================
Select an uncovered user-permission tuple:
<u,p>=<plan2,(setSchedule,proj22task2a)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setSchedule,proj22task2a) is uncovered and that have the same candidate constraint as plan2
[plan2]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task2a}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task2a}; {setSchedule }; projects ] project)
==============================================
Remove UP Set: [(plan2,setSchedule,proj22task2a)]
==============================================
Remaining Uncovered UP Size: 175
==============================================
The set of perms which plan2 is uncovered and that have the same candidate constraint as (setSchedule,proj22task2a)
[setSchedule]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task2a}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task2a}; {setSchedule }; projects ] project)
==============================================
Remaining Uncovered UP Size: 175
==============================================
Select an uncovered user-permission tuple:
<u,p>=<des12,(request,proj12task1a)>
==============================================
Candidate constraint:
[expertise > expertise, projects ] project, tasks ] rid]
==============================================
The set of users which (request,proj12task1a) is uncovered and that have the same candidate constraint as des12
[des12]
==============================================
Result of computeUAE:
[projects supseteqln {{proj12}}, expertise supseteqln {{design}}, tasks supseteqln {{proj12task1a proj12task1propa}}, isEmployee in {False}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task1a}]
==============================================
Generalized Rule: 
rule(isEmployee in {False}; department in {dept1}, proprietary in {false}, type in {task}; {request }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Remove UP Set: [(code12,request,proj12task2a), (des12,request,proj12task1a)]
==============================================
Remaining Uncovered UP Size: 173
==============================================
The set of perms which des12 is uncovered and that have the same candidate constraint as (request,proj12task1a)
[request, read, setStatus]
==============================================
Result of computeUAE:
[projects supseteqln {{proj12}}, expertise supseteqln {{design}}, tasks supseteqln {{proj12task1a proj12task1propa}}, isEmployee in {False}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task1a}]
==============================================
Generalized Rule: 
rule(isEmployee in {False}; department in {dept1}, proprietary in {false}, type in {task}; {request read setStatus }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Remaining Uncovered UP Size: 169
==============================================
Select an uncovered user-permission tuple:
<u,p>=<code21,(setStatus,proj21task2propa)>
==============================================
Candidate constraint:
[expertise > expertise, projects ] project, tasks ] rid]
==============================================
The set of users which (setStatus,proj21task2propa) is uncovered and that have the same candidate constraint as code21
[code21]
==============================================
Result of computeUAE:
[projects supseteqln {{proj21}}, expertise supseteqln {{coding}}, tasks supseteqln {{proj21task2a proj21task2propa}}, isEmployee in {True}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task2propa}]
==============================================
Generalized Rule: 
rule(isEmployee in {True}; department in {dept2}, proprietary in {true}, type in {task}; {setStatus }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Remove UP Set: [(des21,setStatus,proj21task1propa), (code21,setStatus,proj21task2propa)]
==============================================
Remaining Uncovered UP Size: 167
==============================================
The set of perms which code21 is uncovered and that have the same candidate constraint as (setStatus,proj21task2propa)
[request, read, setStatus]
==============================================
Result of computeUAE:
[projects supseteqln {{proj21}}, expertise supseteqln {{coding}}, tasks supseteqln {{proj21task2a proj21task2propa}}, isEmployee in {True}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task2propa}]
==============================================
Generalized Rule: 
rule(isEmployee in {True}; department in {dept2}, proprietary in {true}, type in {task}; {request read setStatus }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Remaining Uncovered UP Size: 163
==============================================
Select an uncovered user-permission tuple:
<u,p>=<des21,(read,proj21task1prop)>
==============================================
Candidate constraint:
[expertise > expertise, projects ] project]
==============================================
The set of users which (read,proj21task1prop) is uncovered and that have the same candidate constraint as des21
[des21]
==============================================
Result of computeUAE:
[projects supseteqln {{proj21}}, expertise supseteqln {{design}}, tasks supseteqln {{proj21task1a proj21task1propa}}, isEmployee in {True}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task1prop}]
==============================================
Generalized Rule: 
rule(tasks supseteqln {{proj21task1a proj21task1propa}}, isEmployee in {True}; department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task1prop}; {read }; expertise > expertise, projects ] project)
==============================================
Remove UP Set: [(des21,read,proj21task1prop)]
==============================================
Remaining Uncovered UP Size: 162
==============================================
The set of perms which des21 is uncovered and that have the same candidate constraint as (read,proj21task1prop)
[request, read]
==============================================
Result of computeUAE:
[projects supseteqln {{proj21}}, expertise supseteqln {{design}}, tasks supseteqln {{proj21task1a proj21task1propa}}, isEmployee in {True}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task1prop}]
==============================================
Generalized Rule: 
rule(tasks supseteqln {{proj21task1a proj21task1propa}}, isEmployee in {True}; department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task1prop}; {request read }; expertise > expertise, projects ] project)
==============================================
Remaining Uncovered UP Size: 161
==============================================
Select an uncovered user-permission tuple:
<u,p>=<des21,(request,proj21task1)>
==============================================
Candidate constraint:
[expertise > expertise, projects ] project]
==============================================
The set of users which (request,proj21task1) is uncovered and that have the same candidate constraint as des21
[des21]
==============================================
Result of computeUAE:
[projects supseteqln {{proj21}}, expertise supseteqln {{design}}, tasks supseteqln {{proj21task1a proj21task1propa}}, isEmployee in {True}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task1}]
==============================================
Generalized Rule: 
rule(tasks supseteqln {{proj21task1a proj21task1propa}}, isEmployee in {True}; department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task1}; {request }; expertise > expertise, projects ] project)
==============================================
Remove UP Set: [(des21,request,proj21task1)]
==============================================
Remaining Uncovered UP Size: 160
==============================================
The set of perms which des21 is uncovered and that have the same candidate constraint as (request,proj21task1)
[request, read]
==============================================
Result of computeUAE:
[projects supseteqln {{proj21}}, expertise supseteqln {{design}}, tasks supseteqln {{proj21task1a proj21task1propa}}, isEmployee in {True}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task1}]
==============================================
Generalized Rule: 
rule(tasks supseteqln {{proj21task1a proj21task1propa}}, isEmployee in {True}; department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task1}; {request read }; expertise > expertise, projects ] project)
==============================================
Remaining Uncovered UP Size: 159
==============================================
Select an uncovered user-permission tuple:
<u,p>=<des11,(setStatus,proj11task1propa)>
==============================================
Candidate constraint:
[expertise > expertise, projects ] project, tasks ] rid]
==============================================
The set of users which (setStatus,proj11task1propa) is uncovered and that have the same candidate constraint as des11
[des11]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11}}, expertise supseteqln {{design}}, tasks supseteqln {{proj11task1a proj11task1propa}}, isEmployee in {True}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task1propa}]
==============================================
Generalized Rule: 
rule(isEmployee in {True}; department in {dept1}, proprietary in {true}, type in {task}; {setStatus }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Remove UP Set: [(des11,setStatus,proj11task1propa), (code11,setStatus,proj11task2propa)]
==============================================
Remaining Uncovered UP Size: 157
==============================================
The set of perms which des11 is uncovered and that have the same candidate constraint as (setStatus,proj11task1propa)
[request, read, setStatus]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11}}, expertise supseteqln {{design}}, tasks supseteqln {{proj11task1a proj11task1propa}}, isEmployee in {True}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task1propa}]
==============================================
Generalized Rule: 
rule(isEmployee in {True}; department in {dept1}, proprietary in {true}, type in {task}; {request read setStatus }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Remaining Uncovered UP Size: 153
==============================================
Select an uncovered user-permission tuple:
<u,p>=<acc2,(setCost,proj21task2propa)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setCost,proj21task2propa) is uncovered and that have the same candidate constraint as acc2
[acc2]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task2propa}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{coding}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task2propa}; {setCost }; projects ] project)
==============================================
Remove UP Set: [(acc2,setCost,proj21task2propa)]
==============================================
Remaining Uncovered UP Size: 152
==============================================
The set of perms which acc2 is uncovered and that have the same candidate constraint as (setCost,proj21task2propa)
[setCost]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task2propa}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{coding}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task2propa}; {setCost }; projects ] project)
==============================================
Remaining Uncovered UP Size: 152
==============================================
Select an uncovered user-permission tuple:
<u,p>=<acc2,(write,proj21budget)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (write,proj21budget) is uncovered and that have the same candidate constraint as acc2
[acc2]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj21}, department in {dept2}, type in {budget}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, type in {budget}; {write }; projects ] project)
==============================================
Remove UP Set: [(acc2,write,proj21budget), (acc2,write,proj22budget)]
==============================================
Remaining Uncovered UP Size: 150
==============================================
The set of perms which acc2 is uncovered and that have the same candidate constraint as (write,proj21budget)
[write, read]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj21}, department in {dept2}, type in {budget}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, type in {budget}; {write read }; projects ] project)
==============================================
Remaining Uncovered UP Size: 148
==============================================
Select an uncovered user-permission tuple:
<u,p>=<ldr2,(read,proj21sched)>
==============================================
Candidate constraint:
[department=department, projects ] project, projectsLed ] project]
==============================================
The set of users which (read,proj21sched) is uncovered and that have the same candidate constraint as ldr2
[ldr2]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, department in {dept2}, projectsLed supseteqln {{proj22 proj21}}]
==============================================
Result of computePAE:
[project in {proj21}, department in {dept2}, type in {schedule}]
==============================================
Generalized Rule: 
rule(; type in {schedule}; {read }; department=department, projects ] project, projectsLed ] project)
==============================================
Remove UP Set: [(ldr12,read,proj12sched), (ldr11,read,proj11sched), (ldr2,read,proj21sched), (ldr2,read,proj22sched)]
==============================================
Remaining Uncovered UP Size: 144
==============================================
The set of perms which ldr2 is uncovered and that have the same candidate constraint as (read,proj21sched)
[write, read]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, department in {dept2}, projectsLed supseteqln {{proj22 proj21}}]
==============================================
Result of computePAE:
[project in {proj21}, department in {dept2}, type in {schedule}]
==============================================
Generalized Rule: 
rule(; type in {schedule}; {write read }; department=department, projects ] project, projectsLed ] project)
==============================================
Remaining Uncovered UP Size: 140
==============================================
Select an uncovered user-permission tuple:
<u,p>=<acc1,(read,proj12sched)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (read,proj12sched) is uncovered and that have the same candidate constraint as acc1
[code12, acc1, des12, plan1, aud1]
==============================================
Removed Sets for UAE projects supseteqln {{proj11 proj12} {proj12}}
[[proj11, proj12]]
==============================================
Result of computeUAE:
[projects supseteqln {{proj12}}, uid in {code12 acc1 des12 plan1 aud1}]
==============================================
Result of computePAE:
[project in {proj12}, department in {dept1}, type in {schedule}]
==============================================
Generalized Rule: 
rule(uid in {acc1 code12 plan1 des12 aud1}; department in {dept1}, type in {schedule}; {read }; projects ] project)
==============================================
Remove UP Set: [(aud1,read,proj12sched), (plan1,read,proj12sched), (acc1,read,proj12sched), (aud1,read,proj11sched), (code12,read,proj12sched), (des12,read,proj12sched), (plan1,read,proj11sched), (acc1,read,proj11sched)]
==============================================
Remaining Uncovered UP Size: 132
==============================================
The set of perms which acc1 is uncovered and that have the same candidate constraint as (read,proj12sched)
[read]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj12}, department in {dept1}, type in {schedule}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, type in {schedule}; {read }; projects ] project)
==============================================
Remaining Uncovered UP Size: 132
==============================================
Select an uncovered user-permission tuple:
<u,p>=<code21,(setStatus,proj21task2a)>
==============================================
Candidate constraint:
[expertise > expertise, projects ] project, tasks ] rid]
==============================================
The set of users which (setStatus,proj21task2a) is uncovered and that have the same candidate constraint as code21
[code21]
==============================================
Result of computeUAE:
[projects supseteqln {{proj21}}, expertise supseteqln {{coding}}, tasks supseteqln {{proj21task2a proj21task2propa}}, isEmployee in {True}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task2a}]
==============================================
Generalized Rule: 
rule(isEmployee in {True}; department in {dept2}, proprietary in {false}, type in {task}; {setStatus }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Remove UP Set: [(des21,setStatus,proj21task1a), (code21,setStatus,proj21task2a)]
==============================================
Remaining Uncovered UP Size: 130
==============================================
The set of perms which code21 is uncovered and that have the same candidate constraint as (setStatus,proj21task2a)
[request, read, setStatus]
==============================================
Result of computeUAE:
[projects supseteqln {{proj21}}, expertise supseteqln {{coding}}, tasks supseteqln {{proj21task2a proj21task2propa}}, isEmployee in {True}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task2a}]
==============================================
Generalized Rule: 
rule(isEmployee in {True}; department in {dept2}, proprietary in {false}, type in {task}; {request read setStatus }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Remaining Uncovered UP Size: 126
==============================================
Select an uncovered user-permission tuple:
<u,p>=<code22,(read,proj22sched)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (read,proj22sched) is uncovered and that have the same candidate constraint as code22
[acc2, des22, code22, plan2, aud2]
==============================================
Removed Sets for UAE projects supseteqln {{proj22} {proj22 proj21}}
[[proj22, proj21]]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22}}, uid in {acc2 des22 code22 plan2 aud2}]
==============================================
Result of computePAE:
[project in {proj22}, department in {dept2}, type in {schedule}]
==============================================
Generalized Rule: 
rule(uid in {code22 des22 acc2 plan2 aud2}; department in {dept2}, type in {schedule}; {read }; projects ] project)
==============================================
Remove UP Set: [(des22,read,proj22sched), (aud2,read,proj21sched), (acc2,read,proj21sched), (acc2,read,proj22sched), (aud2,read,proj22sched), (plan2,read,proj22sched), (code22,read,proj22sched), (plan2,read,proj21sched)]
==============================================
Remaining Uncovered UP Size: 122
==============================================
The set of perms which code22 is uncovered and that have the same candidate constraint as (read,proj22sched)
[read]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22}}, expertise supseteqln {{coding}}, tasks supseteqln {{proj22task2a proj22task2propa}}, isEmployee in {False}]
==============================================
Result of computePAE:
[project in {proj22}, department in {dept2}, type in {schedule}]
==============================================
Generalized Rule: 
rule(expertise supseteqln {{coding}}, tasks supseteqln {{proj22task2a proj22task2propa}}, isEmployee in {False}; department in {dept2}, type in {schedule}; {read }; projects ] project)
==============================================
Remaining Uncovered UP Size: 122
==============================================
Select an uncovered user-permission tuple:
<u,p>=<ldr2,(read,proj22budget)>
==============================================
Candidate constraint:
[department=department, projects ] project, projectsLed ] project]
==============================================
The set of users which (read,proj22budget) is uncovered and that have the same candidate constraint as ldr2
[ldr2]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, department in {dept2}, projectsLed supseteqln {{proj22 proj21}}]
==============================================
Result of computePAE:
[project in {proj22}, department in {dept2}, type in {budget}]
==============================================
Generalized Rule: 
rule(; type in {budget}; {read }; department=department, projects ] project, projectsLed ] project)
==============================================
Remove UP Set: [(ldr11,read,proj11budget), (ldr2,read,proj21budget), (ldr12,read,proj12budget), (ldr2,read,proj22budget)]
==============================================
Remaining Uncovered UP Size: 118
==============================================
The set of perms which ldr2 is uncovered and that have the same candidate constraint as (read,proj22budget)
[write, read]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, department in {dept2}, projectsLed supseteqln {{proj22 proj21}}]
==============================================
Result of computePAE:
[project in {proj22}, department in {dept2}, type in {budget}]
==============================================
Generalized Rule: 
rule(; type in {budget}; {write read }; department=department, projects ] project, projectsLed ] project)
==============================================
Remaining Uncovered UP Size: 114
==============================================
Select an uncovered user-permission tuple:
<u,p>=<des12,(request,proj12task1)>
==============================================
Candidate constraint:
[expertise > expertise, projects ] project]
==============================================
The set of users which (request,proj12task1) is uncovered and that have the same candidate constraint as des12
[des12]
==============================================
Result of computeUAE:
[projects supseteqln {{proj12}}, expertise supseteqln {{design}}, tasks supseteqln {{proj12task1a proj12task1propa}}, isEmployee in {False}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task1}]
==============================================
Generalized Rule: 
rule(tasks supseteqln {{proj12task1a proj12task1propa}}, isEmployee in {False}; department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task1}; {request }; expertise > expertise, projects ] project)
==============================================
Remove UP Set: [(des12,request,proj12task1)]
==============================================
Remaining Uncovered UP Size: 113
==============================================
The set of perms which des12 is uncovered and that have the same candidate constraint as (request,proj12task1)
[request, read]
==============================================
Result of computeUAE:
[projects supseteqln {{proj12}}, expertise supseteqln {{design}}, tasks supseteqln {{proj12task1a proj12task1propa}}, isEmployee in {False}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task1}]
==============================================
Generalized Rule: 
rule(tasks supseteqln {{proj12task1a proj12task1propa}}, isEmployee in {False}; department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task1}; {request read }; expertise > expertise, projects ] project)
==============================================
Remaining Uncovered UP Size: 112
==============================================
Select an uncovered user-permission tuple:
<u,p>=<acc2,(setCost,proj21task2prop)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setCost,proj21task2prop) is uncovered and that have the same candidate constraint as acc2
[acc2]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task2prop}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{coding}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task2prop}; {setCost }; projects ] project)
==============================================
Remove UP Set: [(acc2,setCost,proj21task2prop)]
==============================================
Remaining Uncovered UP Size: 111
==============================================
The set of perms which acc2 is uncovered and that have the same candidate constraint as (setCost,proj21task2prop)
[setCost]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task2prop}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{coding}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task2prop}; {setCost }; projects ] project)
==============================================
Remaining Uncovered UP Size: 111
==============================================
Select an uncovered user-permission tuple:
<u,p>=<acc2,(setCost,proj22task2)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setCost,proj22task2) is uncovered and that have the same candidate constraint as acc2
[acc2]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task2}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task2}; {setCost }; projects ] project)
==============================================
Remove UP Set: [(acc2,setCost,proj22task2)]
==============================================
Remaining Uncovered UP Size: 110
==============================================
The set of perms which acc2 is uncovered and that have the same candidate constraint as (setCost,proj22task2)
[setCost]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task2}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task2}; {setCost }; projects ] project)
==============================================
Remaining Uncovered UP Size: 110
==============================================
Select an uncovered user-permission tuple:
<u,p>=<plan1,(setSchedule,proj11task2propa)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setSchedule,proj11task2propa) is uncovered and that have the same candidate constraint as plan1
[plan1]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task2propa}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{coding}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task2propa}; {setSchedule }; projects ] project)
==============================================
Remove UP Set: [(plan1,setSchedule,proj11task2propa)]
==============================================
Remaining Uncovered UP Size: 109
==============================================
The set of perms which plan1 is uncovered and that have the same candidate constraint as (setSchedule,proj11task2propa)
[setSchedule]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task2propa}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{coding}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task2propa}; {setSchedule }; projects ] project)
==============================================
Remaining Uncovered UP Size: 109
==============================================
Select an uncovered user-permission tuple:
<u,p>=<acc2,(setCost,proj22task1)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setCost,proj22task1) is uncovered and that have the same candidate constraint as acc2
[acc2]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task1}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{design}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task1}; {setCost }; projects ] project)
==============================================
Remove UP Set: [(acc2,setCost,proj22task1)]
==============================================
Remaining Uncovered UP Size: 108
==============================================
The set of perms which acc2 is uncovered and that have the same candidate constraint as (setCost,proj22task1)
[setCost]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task1}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{design}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task1}; {setCost }; projects ] project)
==============================================
Remaining Uncovered UP Size: 108
==============================================
Select an uncovered user-permission tuple:
<u,p>=<acc2,(setCost,proj21task1)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setCost,proj21task1) is uncovered and that have the same candidate constraint as acc2
[acc2]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task1}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{design}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task1}; {setCost }; projects ] project)
==============================================
Remove UP Set: [(acc2,setCost,proj21task1)]
==============================================
Remaining Uncovered UP Size: 107
==============================================
The set of perms which acc2 is uncovered and that have the same candidate constraint as (setCost,proj21task1)
[setCost]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task1}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{design}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task1}; {setCost }; projects ] project)
==============================================
Remaining Uncovered UP Size: 107
==============================================
Select an uncovered user-permission tuple:
<u,p>=<plan1,(setSchedule,proj12task2)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setSchedule,proj12task2) is uncovered and that have the same candidate constraint as plan1
[plan1]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task2}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{coding}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task2}; {setSchedule }; projects ] project)
==============================================
Remove UP Set: [(plan1,setSchedule,proj12task2)]
==============================================
Remaining Uncovered UP Size: 106
==============================================
The set of perms which plan1 is uncovered and that have the same candidate constraint as (setSchedule,proj12task2)
[setSchedule]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task2}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{coding}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task2}; {setSchedule }; projects ] project)
==============================================
Remaining Uncovered UP Size: 106
==============================================
Select an uncovered user-permission tuple:
<u,p>=<acc2,(setCost,proj21task2)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setCost,proj21task2) is uncovered and that have the same candidate constraint as acc2
[acc2]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task2}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task2}; {setCost }; projects ] project)
==============================================
Remove UP Set: [(acc2,setCost,proj21task2)]
==============================================
Remaining Uncovered UP Size: 105
==============================================
The set of perms which acc2 is uncovered and that have the same candidate constraint as (setCost,proj21task2)
[setCost]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task2}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task2}; {setCost }; projects ] project)
==============================================
Remaining Uncovered UP Size: 105
==============================================
Select an uncovered user-permission tuple:
<u,p>=<plan2,(setSchedule,proj21task1prop)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setSchedule,proj21task1prop) is uncovered and that have the same candidate constraint as plan2
[plan2]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task1prop}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{design}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task1prop}; {setSchedule }; projects ] project)
==============================================
Remove UP Set: [(plan2,setSchedule,proj21task1prop)]
==============================================
Remaining Uncovered UP Size: 104
==============================================
The set of perms which plan2 is uncovered and that have the same candidate constraint as (setSchedule,proj21task1prop)
[setSchedule]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task1prop}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{design}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task1prop}; {setSchedule }; projects ] project)
==============================================
Remaining Uncovered UP Size: 104
==============================================
Select an uncovered user-permission tuple:
<u,p>=<plan2,(setSchedule,proj22task1a)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setSchedule,proj22task1a) is uncovered and that have the same candidate constraint as plan2
[plan2]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task1a}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{design}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task1a}; {setSchedule }; projects ] project)
==============================================
Remove UP Set: [(plan2,setSchedule,proj22task1a)]
==============================================
Remaining Uncovered UP Size: 103
==============================================
The set of perms which plan2 is uncovered and that have the same candidate constraint as (setSchedule,proj22task1a)
[setSchedule]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task1a}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{design}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task1a}; {setSchedule }; projects ] project)
==============================================
Remaining Uncovered UP Size: 103
==============================================
Select an uncovered user-permission tuple:
<u,p>=<acc2,(setCost,proj21task1propa)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setCost,proj21task1propa) is uncovered and that have the same candidate constraint as acc2
[acc2]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task1propa}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{design}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task1propa}; {setCost }; projects ] project)
==============================================
Remove UP Set: [(acc2,setCost,proj21task1propa)]
==============================================
Remaining Uncovered UP Size: 102
==============================================
The set of perms which acc2 is uncovered and that have the same candidate constraint as (setCost,proj21task1propa)
[setCost]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task1propa}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{design}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task1propa}; {setCost }; projects ] project)
==============================================
Remaining Uncovered UP Size: 102
==============================================
Select an uncovered user-permission tuple:
<u,p>=<acc2,(setCost,proj22task2prop)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setCost,proj22task2prop) is uncovered and that have the same candidate constraint as acc2
[acc2]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj22task2prop}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{coding}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj22task2prop}; {setCost }; projects ] project)
==============================================
Remove UP Set: [(acc2,setCost,proj22task2prop)]
==============================================
Remaining Uncovered UP Size: 101
==============================================
The set of perms which acc2 is uncovered and that have the same candidate constraint as (setCost,proj22task2prop)
[setCost]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj22task2prop}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{coding}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj22task2prop}; {setCost }; projects ] project)
==============================================
Remaining Uncovered UP Size: 101
==============================================
Select an uncovered user-permission tuple:
<u,p>=<code22,(read,proj22task2a)>
==============================================
Candidate constraint:
[expertise > expertise, projects ] project, tasks ] rid]
==============================================
The set of users which (read,proj22task2a) is uncovered and that have the same candidate constraint as code22
[code22]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22}}, expertise supseteqln {{coding}}, tasks supseteqln {{proj22task2a proj22task2propa}}, isEmployee in {False}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task2a}]
==============================================
Generalized Rule: 
rule(isEmployee in {False}; department in {dept2}, proprietary in {false}, type in {task}; {read }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Remove UP Set: [(des22,read,proj22task1a), (code22,read,proj22task2a)]
==============================================
Remaining Uncovered UP Size: 99
==============================================
The set of perms which code22 is uncovered and that have the same candidate constraint as (read,proj22task2a)
[request, read, setStatus]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22}}, expertise supseteqln {{coding}}, tasks supseteqln {{proj22task2a proj22task2propa}}, isEmployee in {False}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task2a}]
==============================================
Generalized Rule: 
rule(isEmployee in {False}; department in {dept2}, proprietary in {false}, type in {task}; {request read setStatus }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Remaining Uncovered UP Size: 95
==============================================
Select an uncovered user-permission tuple:
<u,p>=<des22,(setStatus,proj22task1propa)>
==============================================
Candidate constraint:
[expertise > expertise, projects ] project, tasks ] rid]
==============================================
The set of users which (setStatus,proj22task1propa) is uncovered and that have the same candidate constraint as des22
[des22]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22}}, expertise supseteqln {{design}}, tasks supseteqln {{proj22task1a proj22task1propa}}, isEmployee in {False}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj22task1propa}]
==============================================
Generalized Rule: 
rule(isEmployee in {False}; department in {dept2}, proprietary in {true}, type in {task}; {setStatus }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Remove UP Set: [(code22,setStatus,proj22task2propa), (des22,setStatus,proj22task1propa)]
==============================================
Remaining Uncovered UP Size: 93
==============================================
The set of perms which des22 is uncovered and that have the same candidate constraint as (setStatus,proj22task1propa)
[setStatus]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22}}, expertise supseteqln {{design}}, tasks supseteqln {{proj22task1a proj22task1propa}}, isEmployee in {False}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj22task1propa}]
==============================================
Generalized Rule: 
rule(isEmployee in {False}; department in {dept2}, proprietary in {true}, type in {task}; {setStatus }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Remaining Uncovered UP Size: 93
==============================================
Select an uncovered user-permission tuple:
<u,p>=<plan2,(setSchedule,proj21task1)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setSchedule,proj21task1) is uncovered and that have the same candidate constraint as plan2
[plan2]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task1}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{design}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task1}; {setSchedule }; projects ] project)
==============================================
Remove UP Set: [(plan2,setSchedule,proj21task1)]
==============================================
Remaining Uncovered UP Size: 92
==============================================
The set of perms which plan2 is uncovered and that have the same candidate constraint as (setSchedule,proj21task1)
[setSchedule]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task1}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{design}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task1}; {setSchedule }; projects ] project)
==============================================
Remaining Uncovered UP Size: 92
==============================================
Select an uncovered user-permission tuple:
<u,p>=<plan2,(setSchedule,proj21task2)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setSchedule,proj21task2) is uncovered and that have the same candidate constraint as plan2
[plan2]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task2}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task2}; {setSchedule }; projects ] project)
==============================================
Remove UP Set: [(plan2,setSchedule,proj21task2)]
==============================================
Remaining Uncovered UP Size: 91
==============================================
The set of perms which plan2 is uncovered and that have the same candidate constraint as (setSchedule,proj21task2)
[setSchedule]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task2}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task2}; {setSchedule }; projects ] project)
==============================================
Remaining Uncovered UP Size: 91
==============================================
Select an uncovered user-permission tuple:
<u,p>=<acc1,(read,proj11budget)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (read,proj11budget) is uncovered and that have the same candidate constraint as acc1
[acc1, aud1]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{auditor} {accountant}}]
==============================================
Result of computePAE:
[project in {proj11}, department in {dept1}, type in {budget}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{auditor} {accountant}}; department in {dept1}, type in {budget}; {read }; projects ] project)
==============================================
Remove UP Set: [(acc1,read,proj12budget), (aud1,read,proj12budget), (aud1,read,proj11budget), (acc1,read,proj11budget)]
==============================================
Remaining Uncovered UP Size: 87
==============================================
The set of perms which acc1 is uncovered and that have the same candidate constraint as (read,proj11budget)
[write, read]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj11}, department in {dept1}, type in {budget}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, type in {budget}; {write read }; projects ] project)
==============================================
Remaining Uncovered UP Size: 85
==============================================
Select an uncovered user-permission tuple:
<u,p>=<plan2,(setSchedule,proj21task2prop)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setSchedule,proj21task2prop) is uncovered and that have the same candidate constraint as plan2
[plan2]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task2prop}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{coding}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task2prop}; {setSchedule }; projects ] project)
==============================================
Remove UP Set: [(plan2,setSchedule,proj21task2prop)]
==============================================
Remaining Uncovered UP Size: 84
==============================================
The set of perms which plan2 is uncovered and that have the same candidate constraint as (setSchedule,proj21task2prop)
[setSchedule]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task2prop}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{coding}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task2prop}; {setSchedule }; projects ] project)
==============================================
Remaining Uncovered UP Size: 84
==============================================
Select an uncovered user-permission tuple:
<u,p>=<mgr1,(read,proj12budget)>
==============================================
Candidate constraint:
[department=department]
==============================================
The set of users which (read,proj12budget) is uncovered and that have the same candidate constraint as mgr1
[mgr1]
==============================================
Result of computeUAE:
[adminRoles supseteqln {{manager}}, department in {dept1}]
==============================================
Result of computePAE:
[project in {proj12}, department in {dept1}, type in {budget}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{manager}}; project in {proj12}, type in {budget}; {read }; department=department)
==============================================
Remove UP Set: [(mgr1,read,proj12budget)]
==============================================
Remaining Uncovered UP Size: 83
==============================================
The set of perms which mgr1 is uncovered and that have the same candidate constraint as (read,proj12budget)
[approve, read]
==============================================
Result of computeUAE:
[adminRoles supseteqln {{manager}}, department in {dept1}]
==============================================
Result of computePAE:
[project in {proj12}, department in {dept1}, type in {budget}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{manager}}; project in {proj12}, type in {budget}; {approve read }; department=department)
==============================================
Remaining Uncovered UP Size: 82
==============================================
Select an uncovered user-permission tuple:
<u,p>=<plan1,(setSchedule,proj12task1)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setSchedule,proj12task1) is uncovered and that have the same candidate constraint as plan1
[plan1]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task1}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{design}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task1}; {setSchedule }; projects ] project)
==============================================
Remove UP Set: [(plan1,setSchedule,proj12task1)]
==============================================
Remaining Uncovered UP Size: 81
==============================================
The set of perms which plan1 is uncovered and that have the same candidate constraint as (setSchedule,proj12task1)
[setSchedule]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task1}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{design}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task1}; {setSchedule }; projects ] project)
==============================================
Remaining Uncovered UP Size: 81
==============================================
Select an uncovered user-permission tuple:
<u,p>=<plan1,(setSchedule,proj12task2prop)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setSchedule,proj12task2prop) is uncovered and that have the same candidate constraint as plan1
[plan1]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj12task2prop}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{coding}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj12task2prop}; {setSchedule }; projects ] project)
==============================================
Remove UP Set: [(plan1,setSchedule,proj12task2prop)]
==============================================
Remaining Uncovered UP Size: 80
==============================================
The set of perms which plan1 is uncovered and that have the same candidate constraint as (setSchedule,proj12task2prop)
[setSchedule]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj12task2prop}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{coding}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj12task2prop}; {setSchedule }; projects ] project)
==============================================
Remaining Uncovered UP Size: 80
==============================================
Select an uncovered user-permission tuple:
<u,p>=<mgr1,(approve,proj11budget)>
==============================================
Candidate constraint:
[department=department]
==============================================
The set of users which (approve,proj11budget) is uncovered and that have the same candidate constraint as mgr1
[mgr1]
==============================================
Result of computeUAE:
[adminRoles supseteqln {{manager}}, department in {dept1}]
==============================================
Result of computePAE:
[project in {proj11}, department in {dept1}, type in {budget}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{manager}}; project in {proj11}, type in {budget}; {approve }; department=department)
==============================================
Remove UP Set: [(mgr1,approve,proj11budget)]
==============================================
Remaining Uncovered UP Size: 79
==============================================
The set of perms which mgr1 is uncovered and that have the same candidate constraint as (approve,proj11budget)
[approve, read]
==============================================
Result of computeUAE:
[adminRoles supseteqln {{manager}}, department in {dept1}]
==============================================
Result of computePAE:
[project in {proj11}, department in {dept1}, type in {budget}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{manager}}; project in {proj11}, type in {budget}; {approve read }; department=department)
==============================================
Remaining Uncovered UP Size: 78
==============================================
Select an uncovered user-permission tuple:
<u,p>=<acc1,(setCost,proj11task2propa)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setCost,proj11task2propa) is uncovered and that have the same candidate constraint as acc1
[acc1]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task2propa}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{coding}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task2propa}; {setCost }; projects ] project)
==============================================
Remove UP Set: [(acc1,setCost,proj11task2propa)]
==============================================
Remaining Uncovered UP Size: 77
==============================================
The set of perms which acc1 is uncovered and that have the same candidate constraint as (setCost,proj11task2propa)
[setCost]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task2propa}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{coding}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task2propa}; {setCost }; projects ] project)
==============================================
Remaining Uncovered UP Size: 77
==============================================
Select an uncovered user-permission tuple:
<u,p>=<mgr2,(approve,proj22budget)>
==============================================
Candidate constraint:
[department=department]
==============================================
The set of users which (approve,proj22budget) is uncovered and that have the same candidate constraint as mgr2
[mgr2]
==============================================
Result of computeUAE:
[adminRoles supseteqln {{manager}}, department in {dept2}]
==============================================
Result of computePAE:
[project in {proj22}, department in {dept2}, type in {budget}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{manager}}; project in {proj22}, type in {budget}; {approve }; department=department)
==============================================
Remove UP Set: [(mgr2,approve,proj22budget)]
==============================================
Remaining Uncovered UP Size: 76
==============================================
The set of perms which mgr2 is uncovered and that have the same candidate constraint as (approve,proj22budget)
[approve, read]
==============================================
Result of computeUAE:
[adminRoles supseteqln {{manager}}, department in {dept2}]
==============================================
Result of computePAE:
[project in {proj22}, department in {dept2}, type in {budget}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{manager}}; project in {proj22}, type in {budget}; {approve read }; department=department)
==============================================
Remaining Uncovered UP Size: 75
==============================================
Select an uncovered user-permission tuple:
<u,p>=<aud2,(read,proj22budget)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (read,proj22budget) is uncovered and that have the same candidate constraint as aud2
[aud2]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{auditor}}]
==============================================
Result of computePAE:
[project in {proj22}, department in {dept2}, type in {budget}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{auditor}}; department in {dept2}, type in {budget}; {read }; projects ] project)
==============================================
Remove UP Set: [(aud2,read,proj22budget), (aud2,read,proj21budget)]
==============================================
Remaining Uncovered UP Size: 73
==============================================
The set of perms which aud2 is uncovered and that have the same candidate constraint as (read,proj22budget)
[read]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{auditor}}]
==============================================
Result of computePAE:
[project in {proj22}, department in {dept2}, type in {budget}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{auditor}}; department in {dept2}, type in {budget}; {read }; projects ] project)
==============================================
Remaining Uncovered UP Size: 73
==============================================
Select an uncovered user-permission tuple:
<u,p>=<acc2,(setCost,proj22task1prop)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setCost,proj22task1prop) is uncovered and that have the same candidate constraint as acc2
[acc2]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj22task1prop}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{design}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj22task1prop}; {setCost }; projects ] project)
==============================================
Remove UP Set: [(acc2,setCost,proj22task1prop)]
==============================================
Remaining Uncovered UP Size: 72
==============================================
The set of perms which acc2 is uncovered and that have the same candidate constraint as (setCost,proj22task1prop)
[setCost]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj22task1prop}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{design}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj22task1prop}; {setCost }; projects ] project)
==============================================
Remaining Uncovered UP Size: 72
==============================================
Select an uncovered user-permission tuple:
<u,p>=<des11,(read,proj11task1)>
==============================================
Candidate constraint:
[expertise > expertise, projects ] project]
==============================================
The set of users which (read,proj11task1) is uncovered and that have the same candidate constraint as des11
[des11]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11}}, expertise supseteqln {{design}}, tasks supseteqln {{proj11task1a proj11task1propa}}, isEmployee in {True}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task1}]
==============================================
Generalized Rule: 
rule(tasks supseteqln {{proj11task1a proj11task1propa}}, isEmployee in {True}; department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task1}; {read }; expertise > expertise, projects ] project)
==============================================
Remove UP Set: [(des11,read,proj11task1)]
==============================================
Remaining Uncovered UP Size: 71
==============================================
The set of perms which des11 is uncovered and that have the same candidate constraint as (read,proj11task1)
[request, read]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11}}, expertise supseteqln {{design}}, tasks supseteqln {{proj11task1a proj11task1propa}}, isEmployee in {True}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task1}]
==============================================
Generalized Rule: 
rule(tasks supseteqln {{proj11task1a proj11task1propa}}, isEmployee in {True}; department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task1}; {request read }; expertise > expertise, projects ] project)
==============================================
Remaining Uncovered UP Size: 70
==============================================
Select an uncovered user-permission tuple:
<u,p>=<code11,(read,proj11task2)>
==============================================
Candidate constraint:
[expertise > expertise, projects ] project]
==============================================
The set of users which (read,proj11task2) is uncovered and that have the same candidate constraint as code11
[code11]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11}}, expertise supseteqln {{coding}}, tasks supseteqln {{proj11task2a proj11task2propa}}, isEmployee in {True}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task2}]
==============================================
Generalized Rule: 
rule(tasks supseteqln {{proj11task2a proj11task2propa}}, isEmployee in {True}; department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task2}; {read }; expertise > expertise, projects ] project)
==============================================
Remove UP Set: [(code11,read,proj11task2)]
==============================================
Remaining Uncovered UP Size: 69
==============================================
The set of perms which code11 is uncovered and that have the same candidate constraint as (read,proj11task2)
[request, read]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11}}, expertise supseteqln {{coding}}, tasks supseteqln {{proj11task2a proj11task2propa}}, isEmployee in {True}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task2}]
==============================================
Generalized Rule: 
rule(tasks supseteqln {{proj11task2a proj11task2propa}}, isEmployee in {True}; department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task2}; {request read }; expertise > expertise, projects ] project)
==============================================
Remaining Uncovered UP Size: 68
==============================================
Select an uncovered user-permission tuple:
<u,p>=<acc2,(setCost,proj21task2a)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setCost,proj21task2a) is uncovered and that have the same candidate constraint as acc2
[acc2]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task2a}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task2a}; {setCost }; projects ] project)
==============================================
Remove UP Set: [(acc2,setCost,proj21task2a)]
==============================================
Remaining Uncovered UP Size: 67
==============================================
The set of perms which acc2 is uncovered and that have the same candidate constraint as (setCost,proj21task2a)
[setCost]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task2a}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task2a}; {setCost }; projects ] project)
==============================================
Remaining Uncovered UP Size: 67
==============================================
Select an uncovered user-permission tuple:
<u,p>=<mgr2,(read,proj21budget)>
==============================================
Candidate constraint:
[department=department]
==============================================
The set of users which (read,proj21budget) is uncovered and that have the same candidate constraint as mgr2
[mgr2]
==============================================
Result of computeUAE:
[adminRoles supseteqln {{manager}}, department in {dept2}]
==============================================
Result of computePAE:
[project in {proj21}, department in {dept2}, type in {budget}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{manager}}; project in {proj21}, type in {budget}; {read }; department=department)
==============================================
Remove UP Set: [(mgr2,read,proj21budget)]
==============================================
Remaining Uncovered UP Size: 66
==============================================
The set of perms which mgr2 is uncovered and that have the same candidate constraint as (read,proj21budget)
[approve, read]
==============================================
Result of computeUAE:
[adminRoles supseteqln {{manager}}, department in {dept2}]
==============================================
Result of computePAE:
[project in {proj21}, department in {dept2}, type in {budget}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{manager}}; project in {proj21}, type in {budget}; {approve read }; department=department)
==============================================
Remaining Uncovered UP Size: 65
==============================================
Select an uncovered user-permission tuple:
<u,p>=<code12,(read,proj12task2)>
==============================================
Candidate constraint:
[expertise > expertise, projects ] project]
==============================================
The set of users which (read,proj12task2) is uncovered and that have the same candidate constraint as code12
[code12]
==============================================
Result of computeUAE:
[projects supseteqln {{proj12}}, expertise supseteqln {{coding}}, tasks supseteqln {{proj12task2propa proj12task2a}}, isEmployee in {False}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task2}]
==============================================
Generalized Rule: 
rule(tasks supseteqln {{proj12task2propa proj12task2a}}, isEmployee in {False}; department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task2}; {read }; expertise > expertise, projects ] project)
==============================================
Remove UP Set: [(code12,read,proj12task2)]
==============================================
Remaining Uncovered UP Size: 64
==============================================
The set of perms which code12 is uncovered and that have the same candidate constraint as (read,proj12task2)
[request, read]
==============================================
Result of computeUAE:
[projects supseteqln {{proj12}}, expertise supseteqln {{coding}}, tasks supseteqln {{proj12task2propa proj12task2a}}, isEmployee in {False}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task2}]
==============================================
Generalized Rule: 
rule(tasks supseteqln {{proj12task2propa proj12task2a}}, isEmployee in {False}; department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task2}; {request read }; expertise > expertise, projects ] project)
==============================================
Remaining Uncovered UP Size: 63
==============================================
Select an uncovered user-permission tuple:
<u,p>=<plan1,(setSchedule,proj12task2a)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setSchedule,proj12task2a) is uncovered and that have the same candidate constraint as plan1
[plan1]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task2a}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{coding}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task2a}; {setSchedule }; projects ] project)
==============================================
Remove UP Set: [(plan1,setSchedule,proj12task2a)]
==============================================
Remaining Uncovered UP Size: 62
==============================================
The set of perms which plan1 is uncovered and that have the same candidate constraint as (setSchedule,proj12task2a)
[setSchedule]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task2a}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{coding}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task2a}; {setSchedule }; projects ] project)
==============================================
Remaining Uncovered UP Size: 62
==============================================
Select an uncovered user-permission tuple:
<u,p>=<plan2,(setSchedule,proj21task2a)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setSchedule,proj21task2a) is uncovered and that have the same candidate constraint as plan2
[plan2]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task2a}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task2a}; {setSchedule }; projects ] project)
==============================================
Remove UP Set: [(plan2,setSchedule,proj21task2a)]
==============================================
Remaining Uncovered UP Size: 61
==============================================
The set of perms which plan2 is uncovered and that have the same candidate constraint as (setSchedule,proj21task2a)
[setSchedule]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task2a}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task2a}; {setSchedule }; projects ] project)
==============================================
Remaining Uncovered UP Size: 61
==============================================
Select an uncovered user-permission tuple:
<u,p>=<des22,(read,proj22task1)>
==============================================
Candidate constraint:
[expertise > expertise, projects ] project]
==============================================
The set of users which (read,proj22task1) is uncovered and that have the same candidate constraint as des22
[des22]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22}}, expertise supseteqln {{design}}, tasks supseteqln {{proj22task1a proj22task1propa}}, isEmployee in {False}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task1}]
==============================================
Generalized Rule: 
rule(tasks supseteqln {{proj22task1a proj22task1propa}}, isEmployee in {False}; department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task1}; {read }; expertise > expertise, projects ] project)
==============================================
Remove UP Set: [(des22,read,proj22task1)]
==============================================
Remaining Uncovered UP Size: 60
==============================================
The set of perms which des22 is uncovered and that have the same candidate constraint as (read,proj22task1)
[request, read]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22}}, expertise supseteqln {{design}}, tasks supseteqln {{proj22task1a proj22task1propa}}, isEmployee in {False}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task1}]
==============================================
Generalized Rule: 
rule(tasks supseteqln {{proj22task1a proj22task1propa}}, isEmployee in {False}; department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task1}; {request read }; expertise > expertise, projects ] project)
==============================================
Remaining Uncovered UP Size: 59
==============================================
Select an uncovered user-permission tuple:
<u,p>=<plan1,(setSchedule,proj12task1a)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setSchedule,proj12task1a) is uncovered and that have the same candidate constraint as plan1
[plan1]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task1a}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{design}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task1a}; {setSchedule }; projects ] project)
==============================================
Remove UP Set: [(plan1,setSchedule,proj12task1a)]
==============================================
Remaining Uncovered UP Size: 58
==============================================
The set of perms which plan1 is uncovered and that have the same candidate constraint as (setSchedule,proj12task1a)
[setSchedule]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task1a}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{design}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task1a}; {setSchedule }; projects ] project)
==============================================
Remaining Uncovered UP Size: 58
==============================================
Select an uncovered user-permission tuple:
<u,p>=<code21,(read,proj21task2)>
==============================================
Candidate constraint:
[expertise > expertise, projects ] project]
==============================================
The set of users which (read,proj21task2) is uncovered and that have the same candidate constraint as code21
[code21]
==============================================
Result of computeUAE:
[projects supseteqln {{proj21}}, expertise supseteqln {{coding}}, tasks supseteqln {{proj21task2a proj21task2propa}}, isEmployee in {True}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task2}]
==============================================
Generalized Rule: 
rule(tasks supseteqln {{proj21task2a proj21task2propa}}, isEmployee in {True}; department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task2}; {read }; expertise > expertise, projects ] project)
==============================================
Remove UP Set: [(code21,read,proj21task2)]
==============================================
Remaining Uncovered UP Size: 57
==============================================
The set of perms which code21 is uncovered and that have the same candidate constraint as (read,proj21task2)
[request, read]
==============================================
Result of computeUAE:
[projects supseteqln {{proj21}}, expertise supseteqln {{coding}}, tasks supseteqln {{proj21task2a proj21task2propa}}, isEmployee in {True}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task2}]
==============================================
Generalized Rule: 
rule(tasks supseteqln {{proj21task2a proj21task2propa}}, isEmployee in {True}; department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task2}; {request read }; expertise > expertise, projects ] project)
==============================================
Remaining Uncovered UP Size: 56
==============================================
Select an uncovered user-permission tuple:
<u,p>=<plan2,(setSchedule,proj21task1a)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setSchedule,proj21task1a) is uncovered and that have the same candidate constraint as plan2
[plan2]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task1a}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{design}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task1a}; {setSchedule }; projects ] project)
==============================================
Remove UP Set: [(plan2,setSchedule,proj21task1a)]
==============================================
Remaining Uncovered UP Size: 55
==============================================
The set of perms which plan2 is uncovered and that have the same candidate constraint as (setSchedule,proj21task1a)
[setSchedule]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task1a}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{design}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task1a}; {setSchedule }; projects ] project)
==============================================
Remaining Uncovered UP Size: 55
==============================================
Select an uncovered user-permission tuple:
<u,p>=<acc1,(setCost,proj12task1)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setCost,proj12task1) is uncovered and that have the same candidate constraint as acc1
[acc1]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task1}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{design}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task1}; {setCost }; projects ] project)
==============================================
Remove UP Set: [(acc1,setCost,proj12task1)]
==============================================
Remaining Uncovered UP Size: 54
==============================================
The set of perms which acc1 is uncovered and that have the same candidate constraint as (setCost,proj12task1)
[setCost]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task1}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{design}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task1}; {setCost }; projects ] project)
==============================================
Remaining Uncovered UP Size: 54
==============================================
Select an uncovered user-permission tuple:
<u,p>=<des11,(read,proj11sched)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (read,proj11sched) is uncovered and that have the same candidate constraint as des11
[acc1, code11, des11, plan1, aud1]
==============================================
Removed Sets for UAE projects supseteqln {{proj11 proj12} {proj11}}
[[proj11, proj12]]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11}}, uid in {acc1 code11 des11 plan1 aud1}]
==============================================
Result of computePAE:
[project in {proj11}, department in {dept1}, type in {schedule}]
==============================================
Generalized Rule: 
rule(uid in {acc1 code11 des11 plan1 aud1}; department in {dept1}, type in {schedule}; {read }; projects ] project)
==============================================
Remove UP Set: [(aud1,read,proj12sched), (plan1,read,proj12sched), (acc1,read,proj12sched), (aud1,read,proj11sched), (plan1,read,proj11sched), (code11,read,proj11sched), (acc1,read,proj11sched), (des11,read,proj11sched)]
==============================================
Remaining Uncovered UP Size: 52
==============================================
The set of perms which des11 is uncovered and that have the same candidate constraint as (read,proj11sched)
[read]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11}}, expertise supseteqln {{design}}, tasks supseteqln {{proj11task1a proj11task1propa}}, isEmployee in {True}]
==============================================
Result of computePAE:
[project in {proj11}, department in {dept1}, type in {schedule}]
==============================================
Generalized Rule: 
rule(expertise supseteqln {{design}}, tasks supseteqln {{proj11task1a proj11task1propa}}, isEmployee in {True}; department in {dept1}, type in {schedule}; {read }; projects ] project)
==============================================
Remaining Uncovered UP Size: 52
==============================================
Select an uncovered user-permission tuple:
<u,p>=<acc1,(setCost,proj12task2)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setCost,proj12task2) is uncovered and that have the same candidate constraint as acc1
[acc1]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task2}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{coding}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task2}; {setCost }; projects ] project)
==============================================
Remove UP Set: [(acc1,setCost,proj12task2)]
==============================================
Remaining Uncovered UP Size: 51
==============================================
The set of perms which acc1 is uncovered and that have the same candidate constraint as (setCost,proj12task2)
[setCost]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task2}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{coding}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task2}; {setCost }; projects ] project)
==============================================
Remaining Uncovered UP Size: 51
==============================================
Select an uncovered user-permission tuple:
<u,p>=<plan2,(write,proj22sched)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (write,proj22sched) is uncovered and that have the same candidate constraint as plan2
[plan2]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj22}, department in {dept2}, type in {schedule}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; department in {dept2}, type in {schedule}; {write }; projects ] project)
==============================================
Remove UP Set: [(plan2,write,proj22sched), (plan2,write,proj21sched)]
==============================================
Remaining Uncovered UP Size: 49
==============================================
The set of perms which plan2 is uncovered and that have the same candidate constraint as (write,proj22sched)
[write, read]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj22}, department in {dept2}, type in {schedule}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; department in {dept2}, type in {schedule}; {write read }; projects ] project)
==============================================
Remaining Uncovered UP Size: 49
==============================================
Select an uncovered user-permission tuple:
<u,p>=<plan2,(setSchedule,proj22task1)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setSchedule,proj22task1) is uncovered and that have the same candidate constraint as plan2
[plan2]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task1}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{design}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task1}; {setSchedule }; projects ] project)
==============================================
Remove UP Set: [(plan2,setSchedule,proj22task1)]
==============================================
Remaining Uncovered UP Size: 48
==============================================
The set of perms which plan2 is uncovered and that have the same candidate constraint as (setSchedule,proj22task1)
[setSchedule]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task1}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{design}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task1}; {setSchedule }; projects ] project)
==============================================
Remaining Uncovered UP Size: 48
==============================================
Select an uncovered user-permission tuple:
<u,p>=<code11,(read,proj11task2a)>
==============================================
Candidate constraint:
[expertise > expertise, projects ] project, tasks ] rid]
==============================================
The set of users which (read,proj11task2a) is uncovered and that have the same candidate constraint as code11
[code11]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11}}, expertise supseteqln {{coding}}, tasks supseteqln {{proj11task2a proj11task2propa}}, isEmployee in {True}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task2a}]
==============================================
Generalized Rule: 
rule(isEmployee in {True}; department in {dept1}, proprietary in {false}, type in {task}; {read }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Remove UP Set: [(code11,read,proj11task2a), (des11,read,proj11task1a)]
==============================================
Remaining Uncovered UP Size: 46
==============================================
The set of perms which code11 is uncovered and that have the same candidate constraint as (read,proj11task2a)
[request, read, setStatus]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11}}, expertise supseteqln {{coding}}, tasks supseteqln {{proj11task2a proj11task2propa}}, isEmployee in {True}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task2a}]
==============================================
Generalized Rule: 
rule(isEmployee in {True}; department in {dept1}, proprietary in {false}, type in {task}; {request read setStatus }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Remaining Uncovered UP Size: 42
==============================================
Select an uncovered user-permission tuple:
<u,p>=<plan1,(write,proj11sched)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (write,proj11sched) is uncovered and that have the same candidate constraint as plan1
[plan1]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj11}, department in {dept1}, type in {schedule}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; department in {dept1}, type in {schedule}; {write }; projects ] project)
==============================================
Remove UP Set: [(plan1,write,proj11sched), (plan1,write,proj12sched)]
==============================================
Remaining Uncovered UP Size: 40
==============================================
The set of perms which plan1 is uncovered and that have the same candidate constraint as (write,proj11sched)
[write, read]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj11}, department in {dept1}, type in {schedule}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; department in {dept1}, type in {schedule}; {write read }; projects ] project)
==============================================
Remaining Uncovered UP Size: 40
==============================================
Select an uncovered user-permission tuple:
<u,p>=<plan2,(setSchedule,proj22task2prop)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setSchedule,proj22task2prop) is uncovered and that have the same candidate constraint as plan2
[plan2]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj22task2prop}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{coding}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj22task2prop}; {setSchedule }; projects ] project)
==============================================
Remove UP Set: [(plan2,setSchedule,proj22task2prop)]
==============================================
Remaining Uncovered UP Size: 39
==============================================
The set of perms which plan2 is uncovered and that have the same candidate constraint as (setSchedule,proj22task2prop)
[setSchedule]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj22task2prop}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{coding}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj22task2prop}; {setSchedule }; projects ] project)
==============================================
Remaining Uncovered UP Size: 39
==============================================
Select an uncovered user-permission tuple:
<u,p>=<acc1,(setCost,proj11task2prop)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setCost,proj11task2prop) is uncovered and that have the same candidate constraint as acc1
[acc1]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task2prop}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{coding}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task2prop}; {setCost }; projects ] project)
==============================================
Remove UP Set: [(acc1,setCost,proj11task2prop)]
==============================================
Remaining Uncovered UP Size: 38
==============================================
The set of perms which acc1 is uncovered and that have the same candidate constraint as (setCost,proj11task2prop)
[setCost]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task2prop}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{coding}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task2prop}; {setCost }; projects ] project)
==============================================
Remaining Uncovered UP Size: 38
==============================================
Select an uncovered user-permission tuple:
<u,p>=<acc1,(setCost,proj11task1a)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setCost,proj11task1a) is uncovered and that have the same candidate constraint as acc1
[acc1]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task1a}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{design}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task1a}; {setCost }; projects ] project)
==============================================
Remove UP Set: [(acc1,setCost,proj11task1a)]
==============================================
Remaining Uncovered UP Size: 37
==============================================
The set of perms which acc1 is uncovered and that have the same candidate constraint as (setCost,proj11task1a)
[setCost]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task1a}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{design}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task1a}; {setCost }; projects ] project)
==============================================
Remaining Uncovered UP Size: 37
==============================================
Select an uncovered user-permission tuple:
<u,p>=<plan2,(setSchedule,proj21task1propa)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setSchedule,proj21task1propa) is uncovered and that have the same candidate constraint as plan2
[plan2]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task1propa}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{design}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task1propa}; {setSchedule }; projects ] project)
==============================================
Remove UP Set: [(plan2,setSchedule,proj21task1propa)]
==============================================
Remaining Uncovered UP Size: 36
==============================================
The set of perms which plan2 is uncovered and that have the same candidate constraint as (setSchedule,proj21task1propa)
[setSchedule]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task1propa}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{design}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task1propa}; {setSchedule }; projects ] project)
==============================================
Remaining Uncovered UP Size: 36
==============================================
Select an uncovered user-permission tuple:
<u,p>=<acc1,(setCost,proj12task1propa)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setCost,proj12task1propa) is uncovered and that have the same candidate constraint as acc1
[acc1]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj12task1propa}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{design}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj12task1propa}; {setCost }; projects ] project)
==============================================
Remove UP Set: [(acc1,setCost,proj12task1propa)]
==============================================
Remaining Uncovered UP Size: 35
==============================================
The set of perms which acc1 is uncovered and that have the same candidate constraint as (setCost,proj12task1propa)
[setCost]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj12task1propa}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{design}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj12task1propa}; {setCost }; projects ] project)
==============================================
Remaining Uncovered UP Size: 35
==============================================
Select an uncovered user-permission tuple:
<u,p>=<plan2,(setSchedule,proj22task2)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setSchedule,proj22task2) is uncovered and that have the same candidate constraint as plan2
[plan2]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task2}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task2}; {setSchedule }; projects ] project)
==============================================
Remove UP Set: [(plan2,setSchedule,proj22task2)]
==============================================
Remaining Uncovered UP Size: 34
==============================================
The set of perms which plan2 is uncovered and that have the same candidate constraint as (setSchedule,proj22task2)
[setSchedule]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task2}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task2}; {setSchedule }; projects ] project)
==============================================
Remaining Uncovered UP Size: 34
==============================================
Select an uncovered user-permission tuple:
<u,p>=<plan1,(setSchedule,proj12task2propa)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setSchedule,proj12task2propa) is uncovered and that have the same candidate constraint as plan1
[plan1]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj12task2propa}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{coding}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj12task2propa}; {setSchedule }; projects ] project)
==============================================
Remove UP Set: [(plan1,setSchedule,proj12task2propa)]
==============================================
Remaining Uncovered UP Size: 33
==============================================
The set of perms which plan1 is uncovered and that have the same candidate constraint as (setSchedule,proj12task2propa)
[setSchedule]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj12task2propa}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{coding}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj12task2propa}; {setSchedule }; projects ] project)
==============================================
Remaining Uncovered UP Size: 33
==============================================
Select an uncovered user-permission tuple:
<u,p>=<acc2,(setCost,proj22task1propa)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setCost,proj22task1propa) is uncovered and that have the same candidate constraint as acc2
[acc2]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj22task1propa}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{design}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj22task1propa}; {setCost }; projects ] project)
==============================================
Remove UP Set: [(acc2,setCost,proj22task1propa)]
==============================================
Remaining Uncovered UP Size: 32
==============================================
The set of perms which acc2 is uncovered and that have the same candidate constraint as (setCost,proj22task1propa)
[setCost]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj22task1propa}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{design}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj22task1propa}; {setCost }; projects ] project)
==============================================
Remaining Uncovered UP Size: 32
==============================================
Select an uncovered user-permission tuple:
<u,p>=<acc1,(setCost,proj11task1prop)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setCost,proj11task1prop) is uncovered and that have the same candidate constraint as acc1
[acc1]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task1prop}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{design}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task1prop}; {setCost }; projects ] project)
==============================================
Remove UP Set: [(acc1,setCost,proj11task1prop)]
==============================================
Remaining Uncovered UP Size: 31
==============================================
The set of perms which acc1 is uncovered and that have the same candidate constraint as (setCost,proj11task1prop)
[setCost]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task1prop}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{design}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task1prop}; {setCost }; projects ] project)
==============================================
Remaining Uncovered UP Size: 31
==============================================
Select an uncovered user-permission tuple:
<u,p>=<des12,(setStatus,proj12task1propa)>
==============================================
Candidate constraint:
[expertise > expertise, projects ] project, tasks ] rid]
==============================================
The set of users which (setStatus,proj12task1propa) is uncovered and that have the same candidate constraint as des12
[des12]
==============================================
Result of computeUAE:
[projects supseteqln {{proj12}}, expertise supseteqln {{design}}, tasks supseteqln {{proj12task1a proj12task1propa}}, isEmployee in {False}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj12task1propa}]
==============================================
Generalized Rule: 
rule(isEmployee in {False}; department in {dept1}, proprietary in {true}, type in {task}; {setStatus }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Remove UP Set: [(des12,setStatus,proj12task1propa), (code12,setStatus,proj12task2propa)]
==============================================
Remaining Uncovered UP Size: 29
==============================================
The set of perms which des12 is uncovered and that have the same candidate constraint as (setStatus,proj12task1propa)
[setStatus]
==============================================
Result of computeUAE:
[projects supseteqln {{proj12}}, expertise supseteqln {{design}}, tasks supseteqln {{proj12task1a proj12task1propa}}, isEmployee in {False}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj12task1propa}]
==============================================
Generalized Rule: 
rule(isEmployee in {False}; department in {dept1}, proprietary in {true}, type in {task}; {setStatus }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Remaining Uncovered UP Size: 29
==============================================
Select an uncovered user-permission tuple:
<u,p>=<acc2,(setCost,proj21task1prop)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setCost,proj21task1prop) is uncovered and that have the same candidate constraint as acc2
[acc2]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task1prop}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{design}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task1prop}; {setCost }; projects ] project)
==============================================
Remove UP Set: [(acc2,setCost,proj21task1prop)]
==============================================
Remaining Uncovered UP Size: 28
==============================================
The set of perms which acc2 is uncovered and that have the same candidate constraint as (setCost,proj21task1prop)
[setCost]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task1prop}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{design}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task1prop}; {setCost }; projects ] project)
==============================================
Remaining Uncovered UP Size: 28
==============================================
Select an uncovered user-permission tuple:
<u,p>=<plan1,(setSchedule,proj12task1propa)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setSchedule,proj12task1propa) is uncovered and that have the same candidate constraint as plan1
[plan1]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj12task1propa}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{design}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj12task1propa}; {setSchedule }; projects ] project)
==============================================
Remove UP Set: [(plan1,setSchedule,proj12task1propa)]
==============================================
Remaining Uncovered UP Size: 27
==============================================
The set of perms which plan1 is uncovered and that have the same candidate constraint as (setSchedule,proj12task1propa)
[setSchedule]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj12task1propa}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{design}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj12task1propa}; {setSchedule }; projects ] project)
==============================================
Remaining Uncovered UP Size: 27
==============================================
Select an uncovered user-permission tuple:
<u,p>=<acc1,(setCost,proj11task1propa)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setCost,proj11task1propa) is uncovered and that have the same candidate constraint as acc1
[acc1]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task1propa}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{design}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task1propa}; {setCost }; projects ] project)
==============================================
Remove UP Set: [(acc1,setCost,proj11task1propa)]
==============================================
Remaining Uncovered UP Size: 26
==============================================
The set of perms which acc1 is uncovered and that have the same candidate constraint as (setCost,proj11task1propa)
[setCost]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task1propa}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{design}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task1propa}; {setCost }; projects ] project)
==============================================
Remaining Uncovered UP Size: 26
==============================================
Select an uncovered user-permission tuple:
<u,p>=<plan1,(setSchedule,proj11task2)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setSchedule,proj11task2) is uncovered and that have the same candidate constraint as plan1
[plan1]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task2}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{coding}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task2}; {setSchedule }; projects ] project)
==============================================
Remove UP Set: [(plan1,setSchedule,proj11task2)]
==============================================
Remaining Uncovered UP Size: 25
==============================================
The set of perms which plan1 is uncovered and that have the same candidate constraint as (setSchedule,proj11task2)
[setSchedule]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task2}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{coding}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task2}; {setSchedule }; projects ] project)
==============================================
Remaining Uncovered UP Size: 25
==============================================
Select an uncovered user-permission tuple:
<u,p>=<plan1,(setSchedule,proj11task1)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setSchedule,proj11task1) is uncovered and that have the same candidate constraint as plan1
[plan1]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task1}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{design}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task1}; {setSchedule }; projects ] project)
==============================================
Remove UP Set: [(plan1,setSchedule,proj11task1)]
==============================================
Remaining Uncovered UP Size: 24
==============================================
The set of perms which plan1 is uncovered and that have the same candidate constraint as (setSchedule,proj11task1)
[setSchedule]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task1}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{design}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task1}; {setSchedule }; projects ] project)
==============================================
Remaining Uncovered UP Size: 24
==============================================
Select an uncovered user-permission tuple:
<u,p>=<acc1,(setCost,proj11task2a)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setCost,proj11task2a) is uncovered and that have the same candidate constraint as acc1
[acc1]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task2a}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{coding}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task2a}; {setCost }; projects ] project)
==============================================
Remove UP Set: [(acc1,setCost,proj11task2a)]
==============================================
Remaining Uncovered UP Size: 23
==============================================
The set of perms which acc1 is uncovered and that have the same candidate constraint as (setCost,proj11task2a)
[setCost]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task2a}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{coding}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task2a}; {setCost }; projects ] project)
==============================================
Remaining Uncovered UP Size: 23
==============================================
Select an uncovered user-permission tuple:
<u,p>=<acc1,(setCost,proj12task2prop)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setCost,proj12task2prop) is uncovered and that have the same candidate constraint as acc1
[acc1]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj12task2prop}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{coding}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj12task2prop}; {setCost }; projects ] project)
==============================================
Remove UP Set: [(acc1,setCost,proj12task2prop)]
==============================================
Remaining Uncovered UP Size: 22
==============================================
The set of perms which acc1 is uncovered and that have the same candidate constraint as (setCost,proj12task2prop)
[setCost]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj12task2prop}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{coding}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj12task2prop}; {setCost }; projects ] project)
==============================================
Remaining Uncovered UP Size: 22
==============================================
Select an uncovered user-permission tuple:
<u,p>=<acc1,(setCost,proj12task1prop)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setCost,proj12task1prop) is uncovered and that have the same candidate constraint as acc1
[acc1]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj12task1prop}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{design}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj12task1prop}; {setCost }; projects ] project)
==============================================
Remove UP Set: [(acc1,setCost,proj12task1prop)]
==============================================
Remaining Uncovered UP Size: 21
==============================================
The set of perms which acc1 is uncovered and that have the same candidate constraint as (setCost,proj12task1prop)
[setCost]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj12task1prop}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{design}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj12task1prop}; {setCost }; projects ] project)
==============================================
Remaining Uncovered UP Size: 21
==============================================
Select an uncovered user-permission tuple:
<u,p>=<plan2,(setSchedule,proj22task1prop)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setSchedule,proj22task1prop) is uncovered and that have the same candidate constraint as plan2
[plan2]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj22task1prop}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{design}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj22task1prop}; {setSchedule }; projects ] project)
==============================================
Remove UP Set: [(plan2,setSchedule,proj22task1prop)]
==============================================
Remaining Uncovered UP Size: 20
==============================================
The set of perms which plan2 is uncovered and that have the same candidate constraint as (setSchedule,proj22task1prop)
[setSchedule]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj22task1prop}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{design}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj22task1prop}; {setSchedule }; projects ] project)
==============================================
Remaining Uncovered UP Size: 20
==============================================
Select an uncovered user-permission tuple:
<u,p>=<acc2,(setCost,proj21task1a)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setCost,proj21task1a) is uncovered and that have the same candidate constraint as acc2
[acc2]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task1a}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{design}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task1a}; {setCost }; projects ] project)
==============================================
Remove UP Set: [(acc2,setCost,proj21task1a)]
==============================================
Remaining Uncovered UP Size: 19
==============================================
The set of perms which acc2 is uncovered and that have the same candidate constraint as (setCost,proj21task1a)
[setCost]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task1a}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{design}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj21task1a}; {setCost }; projects ] project)
==============================================
Remaining Uncovered UP Size: 19
==============================================
Select an uncovered user-permission tuple:
<u,p>=<code21,(read,proj21task2prop)>
==============================================
Candidate constraint:
[expertise > expertise, projects ] project]
==============================================
The set of users which (read,proj21task2prop) is uncovered and that have the same candidate constraint as code21
[code21]
==============================================
Result of computeUAE:
[projects supseteqln {{proj21}}, expertise supseteqln {{coding}}, tasks supseteqln {{proj21task2a proj21task2propa}}, isEmployee in {True}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task2prop}]
==============================================
Generalized Rule: 
rule(tasks supseteqln {{proj21task2a proj21task2propa}}, isEmployee in {True}; department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task2prop}; {read }; expertise > expertise, projects ] project)
==============================================
Remove UP Set: [(code21,read,proj21task2prop)]
==============================================
Remaining Uncovered UP Size: 18
==============================================
The set of perms which code21 is uncovered and that have the same candidate constraint as (read,proj21task2prop)
[request, read]
==============================================
Result of computeUAE:
[projects supseteqln {{proj21}}, expertise supseteqln {{coding}}, tasks supseteqln {{proj21task2a proj21task2propa}}, isEmployee in {True}]
==============================================
Result of computePAE:
[project in {proj21}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task2prop}]
==============================================
Generalized Rule: 
rule(tasks supseteqln {{proj21task2a proj21task2propa}}, isEmployee in {True}; department in {dept2}, proprietary in {true}, type in {task}, rid in {proj21task2prop}; {request read }; expertise > expertise, projects ] project)
==============================================
Remaining Uncovered UP Size: 17
==============================================
Select an uncovered user-permission tuple:
<u,p>=<acc2,(setCost,proj22task2propa)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setCost,proj22task2propa) is uncovered and that have the same candidate constraint as acc2
[acc2]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj22task2propa}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{coding}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj22task2propa}; {setCost }; projects ] project)
==============================================
Remove UP Set: [(acc2,setCost,proj22task2propa)]
==============================================
Remaining Uncovered UP Size: 16
==============================================
The set of perms which acc2 is uncovered and that have the same candidate constraint as (setCost,proj22task2propa)
[setCost]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj22task2propa}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{coding}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj22task2propa}; {setCost }; projects ] project)
==============================================
Remaining Uncovered UP Size: 16
==============================================
Select an uncovered user-permission tuple:
<u,p>=<plan1,(setSchedule,proj11task2a)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setSchedule,proj11task2a) is uncovered and that have the same candidate constraint as plan1
[plan1]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task2a}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{coding}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task2a}; {setSchedule }; projects ] project)
==============================================
Remove UP Set: [(plan1,setSchedule,proj11task2a)]
==============================================
Remaining Uncovered UP Size: 15
==============================================
The set of perms which plan1 is uncovered and that have the same candidate constraint as (setSchedule,proj11task2a)
[setSchedule]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task2a}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{coding}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task2a}; {setSchedule }; projects ] project)
==============================================
Remaining Uncovered UP Size: 15
==============================================
Select an uncovered user-permission tuple:
<u,p>=<acc1,(setCost,proj12task2a)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setCost,proj12task2a) is uncovered and that have the same candidate constraint as acc1
[acc1]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task2a}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{coding}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task2a}; {setCost }; projects ] project)
==============================================
Remove UP Set: [(acc1,setCost,proj12task2a)]
==============================================
Remaining Uncovered UP Size: 14
==============================================
The set of perms which acc1 is uncovered and that have the same candidate constraint as (setCost,proj12task2a)
[setCost]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task2a}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{coding}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task2a}; {setCost }; projects ] project)
==============================================
Remaining Uncovered UP Size: 14
==============================================
Select an uncovered user-permission tuple:
<u,p>=<plan1,(setSchedule,proj11task1propa)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setSchedule,proj11task1propa) is uncovered and that have the same candidate constraint as plan1
[plan1]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task1propa}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{design}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task1propa}; {setSchedule }; projects ] project)
==============================================
Remove UP Set: [(plan1,setSchedule,proj11task1propa)]
==============================================
Remaining Uncovered UP Size: 13
==============================================
The set of perms which plan1 is uncovered and that have the same candidate constraint as (setSchedule,proj11task1propa)
[setSchedule]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task1propa}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{design}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task1propa}; {setSchedule }; projects ] project)
==============================================
Remaining Uncovered UP Size: 13
==============================================
Select an uncovered user-permission tuple:
<u,p>=<acc1,(setCost,proj12task2propa)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setCost,proj12task2propa) is uncovered and that have the same candidate constraint as acc1
[acc1]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj12task2propa}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{coding}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj12task2propa}; {setCost }; projects ] project)
==============================================
Remove UP Set: [(acc1,setCost,proj12task2propa)]
==============================================
Remaining Uncovered UP Size: 12
==============================================
The set of perms which acc1 is uncovered and that have the same candidate constraint as (setCost,proj12task2propa)
[setCost]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj12task2propa}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{coding}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj12task2propa}; {setCost }; projects ] project)
==============================================
Remaining Uncovered UP Size: 12
==============================================
Select an uncovered user-permission tuple:
<u,p>=<plan1,(setSchedule,proj11task2prop)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setSchedule,proj11task2prop) is uncovered and that have the same candidate constraint as plan1
[plan1]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task2prop}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{coding}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task2prop}; {setSchedule }; projects ] project)
==============================================
Remove UP Set: [(plan1,setSchedule,proj11task2prop)]
==============================================
Remaining Uncovered UP Size: 11
==============================================
The set of perms which plan1 is uncovered and that have the same candidate constraint as (setSchedule,proj11task2prop)
[setSchedule]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task2prop}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{coding}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task2prop}; {setSchedule }; projects ] project)
==============================================
Remaining Uncovered UP Size: 11
==============================================
Select an uncovered user-permission tuple:
<u,p>=<plan2,(setSchedule,proj22task1propa)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setSchedule,proj22task1propa) is uncovered and that have the same candidate constraint as plan2
[plan2]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj22task1propa}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{design}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj22task1propa}; {setSchedule }; projects ] project)
==============================================
Remove UP Set: [(plan2,setSchedule,proj22task1propa)]
==============================================
Remaining Uncovered UP Size: 10
==============================================
The set of perms which plan2 is uncovered and that have the same candidate constraint as (setSchedule,proj22task1propa)
[setSchedule]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj22task1propa}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{design}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj22task1propa}; {setSchedule }; projects ] project)
==============================================
Remaining Uncovered UP Size: 10
==============================================
Select an uncovered user-permission tuple:
<u,p>=<plan1,(setSchedule,proj11task1prop)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setSchedule,proj11task1prop) is uncovered and that have the same candidate constraint as plan1
[plan1]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task1prop}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{design}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task1prop}; {setSchedule }; projects ] project)
==============================================
Remove UP Set: [(plan1,setSchedule,proj11task1prop)]
==============================================
Remaining Uncovered UP Size: 9
==============================================
The set of perms which plan1 is uncovered and that have the same candidate constraint as (setSchedule,proj11task1prop)
[setSchedule]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task1prop}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{design}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj11task1prop}; {setSchedule }; projects ] project)
==============================================
Remaining Uncovered UP Size: 9
==============================================
Select an uncovered user-permission tuple:
<u,p>=<acc2,(setCost,proj22task2a)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setCost,proj22task2a) is uncovered and that have the same candidate constraint as acc2
[acc2]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task2a}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task2a}; {setCost }; projects ] project)
==============================================
Remove UP Set: [(acc2,setCost,proj22task2a)]
==============================================
Remaining Uncovered UP Size: 8
==============================================
The set of perms which acc2 is uncovered and that have the same candidate constraint as (setCost,proj22task2a)
[setCost]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task2a}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{coding}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task2a}; {setCost }; projects ] project)
==============================================
Remaining Uncovered UP Size: 8
==============================================
Select an uncovered user-permission tuple:
<u,p>=<plan1,(setSchedule,proj11task1a)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setSchedule,proj11task1a) is uncovered and that have the same candidate constraint as plan1
[plan1]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task1a}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{design}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task1a}; {setSchedule }; projects ] project)
==============================================
Remove UP Set: [(plan1,setSchedule,proj11task1a)]
==============================================
Remaining Uncovered UP Size: 7
==============================================
The set of perms which plan1 is uncovered and that have the same candidate constraint as (setSchedule,proj11task1a)
[setSchedule]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task1a}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{design}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task1a}; {setSchedule }; projects ] project)
==============================================
Remaining Uncovered UP Size: 7
==============================================
Select an uncovered user-permission tuple:
<u,p>=<ldr11,(read,proj12sched)>
==============================================
Candidate constraint:
[department=department, projects ] project]
==============================================
The set of users which (read,proj12sched) is uncovered and that have the same candidate constraint as ldr11
[ldr11]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, department in {dept1}, projectsLed supseteqln {{proj11}}]
==============================================
Result of computePAE:
[project in {proj12}, department in {dept1}, type in {schedule}]
==============================================
Generalized Rule: 
rule(projectsLed supseteqln {{proj11}}; type in {schedule}; {read }; department=department, projects ] project)
==============================================
Remove UP Set: [(ldr11,read,proj12sched), (ldr11,read,proj11sched)]
==============================================
Remaining Uncovered UP Size: 6
==============================================
The set of perms which ldr11 is uncovered and that have the same candidate constraint as (read,proj12sched)
[read]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, department in {dept1}, projectsLed supseteqln {{proj11}}]
==============================================
Result of computePAE:
[project in {proj12}, department in {dept1}, type in {schedule}]
==============================================
Generalized Rule: 
rule(projectsLed supseteqln {{proj11}}; type in {schedule}; {read }; department=department, projects ] project)
==============================================
Remaining Uncovered UP Size: 6
==============================================
Select an uncovered user-permission tuple:
<u,p>=<acc1,(setCost,proj12task1a)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setCost,proj12task1a) is uncovered and that have the same candidate constraint as acc1
[acc1]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task1a}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{design}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task1a}; {setCost }; projects ] project)
==============================================
Remove UP Set: [(acc1,setCost,proj12task1a)]
==============================================
Remaining Uncovered UP Size: 5
==============================================
The set of perms which acc1 is uncovered and that have the same candidate constraint as (setCost,proj12task1a)
[setCost]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task1a}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{design}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj12task1a}; {setCost }; projects ] project)
==============================================
Remaining Uncovered UP Size: 5
==============================================
Select an uncovered user-permission tuple:
<u,p>=<acc2,(setCost,proj22task1a)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setCost,proj22task1a) is uncovered and that have the same candidate constraint as acc2
[acc2]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task1a}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{design}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task1a}; {setCost }; projects ] project)
==============================================
Remove UP Set: [(acc2,setCost,proj22task1a)]
==============================================
Remaining Uncovered UP Size: 4
==============================================
The set of perms which acc2 is uncovered and that have the same candidate constraint as (setCost,proj22task1a)
[setCost]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{design}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task1a}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{design}}, department in {dept2}, proprietary in {false}, type in {task}, rid in {proj22task1a}; {setCost }; projects ] project)
==============================================
Remaining Uncovered UP Size: 4
==============================================
Select an uncovered user-permission tuple:
<u,p>=<acc1,(setCost,proj11task1)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setCost,proj11task1) is uncovered and that have the same candidate constraint as acc1
[acc1]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task1}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{design}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task1}; {setCost }; projects ] project)
==============================================
Remove UP Set: [(acc1,setCost,proj11task1)]
==============================================
Remaining Uncovered UP Size: 3
==============================================
The set of perms which acc1 is uncovered and that have the same candidate constraint as (setCost,proj11task1)
[setCost]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task1}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{design}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task1}; {setCost }; projects ] project)
==============================================
Remaining Uncovered UP Size: 3
==============================================
Select an uncovered user-permission tuple:
<u,p>=<acc1,(setCost,proj11task2)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setCost,proj11task2) is uncovered and that have the same candidate constraint as acc1
[acc1]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task2}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{coding}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task2}; {setCost }; projects ] project)
==============================================
Remove UP Set: [(acc1,setCost,proj11task2)]
==============================================
Remaining Uncovered UP Size: 2
==============================================
The set of perms which acc1 is uncovered and that have the same candidate constraint as (setCost,proj11task2)
[setCost]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{accountant}}]
==============================================
Result of computePAE:
[project in {proj11}, expertise supseteqln {{coding}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task2}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{accountant}}; expertise supseteqln {{coding}}, department in {dept1}, proprietary in {false}, type in {task}, rid in {proj11task2}; {setCost }; projects ] project)
==============================================
Remaining Uncovered UP Size: 2
==============================================
Select an uncovered user-permission tuple:
<u,p>=<plan2,(setSchedule,proj22task2propa)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setSchedule,proj22task2propa) is uncovered and that have the same candidate constraint as plan2
[plan2]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj22task2propa}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{coding}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj22task2propa}; {setSchedule }; projects ] project)
==============================================
Remove UP Set: [(plan2,setSchedule,proj22task2propa)]
==============================================
Remaining Uncovered UP Size: 1
==============================================
The set of perms which plan2 is uncovered and that have the same candidate constraint as (setSchedule,proj22task2propa)
[setSchedule]
==============================================
Result of computeUAE:
[projects supseteqln {{proj22 proj21}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj22}, expertise supseteqln {{coding}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj22task2propa}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{coding}}, department in {dept2}, proprietary in {true}, type in {task}, rid in {proj22task2propa}; {setSchedule }; projects ] project)
==============================================
Remaining Uncovered UP Size: 1
==============================================
Select an uncovered user-permission tuple:
<u,p>=<plan1,(setSchedule,proj12task1prop)>
==============================================
Candidate constraint:
[projects ] project]
==============================================
The set of users which (setSchedule,proj12task1prop) is uncovered and that have the same candidate constraint as plan1
[plan1]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj12task1prop}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{design}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj12task1prop}; {setSchedule }; projects ] project)
==============================================
Remove UP Set: [(plan1,setSchedule,proj12task1prop)]
==============================================
Remaining Uncovered UP Size: 0
==============================================
The set of perms which plan1 is uncovered and that have the same candidate constraint as (setSchedule,proj12task1prop)
[setSchedule]
==============================================
Result of computeUAE:
[projects supseteqln {{proj11 proj12}}, adminRoles supseteqln {{planner}}]
==============================================
Result of computePAE:
[project in {proj12}, expertise supseteqln {{design}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj12task1prop}]
==============================================
Generalized Rule: 
rule(adminRoles supseteqln {{planner}}; expertise supseteqln {{design}}, department in {dept1}, proprietary in {true}, type in {task}, rid in {proj12task1prop}; {setSchedule }; projects ] project)
==============================================
Remaining Uncovered UP Size: 0
==============================================
Time for the main while loop : 637 millisec
==============================================
BEFORE MERGING RULES

1.
rule(uid in {code21 des21 plan2 aud2}; department in {dept2}, type in {schedule}; {read }; projects ] project)
2.
rule(adminRoles supseteqln {{auditor}}; department in {dept2}, type in {schedule}; {read }; projects ] project)
3.
rule(isEmployee in {True}, tasks supseteqln {{proj11task1a proj11task1propa}}; department in {dept1}, proprietary in {true}, rid in {proj11task1prop}, type in {task}; {request }; expertise > expertise, projects ] project)
4.
rule(isEmployee in {True}, tasks supseteqln {{proj11task1a proj11task1propa}}; department in {dept1}, proprietary in {true}, rid in {proj11task1prop}, type in {task}; {request read }; expertise > expertise, projects ] project)
5.
rule(isEmployee in {True}, tasks supseteqln {{proj11task2a proj11task2propa}}; department in {dept1}, proprietary in {true}, rid in {proj11task2prop}, type in {task}; {read }; expertise > expertise, projects ] project)
6.
rule(isEmployee in {True}, tasks supseteqln {{proj11task2a proj11task2propa}}; department in {dept1}, proprietary in {true}, rid in {proj11task2prop}, type in {task}; {request read }; expertise > expertise, projects ] project)
7.
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj21task2propa}, type in {task}; {setSchedule }; projects ] project)
8.
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj21task2propa}, type in {task}; {setSchedule }; projects ] project)
9.
rule(isEmployee in {False}, tasks supseteqln {{proj22task2a proj22task2propa}}; department in {dept2}, proprietary in {false}, rid in {proj22task2}, type in {task}; {read }; expertise > expertise, projects ] project)
10.
rule(isEmployee in {False}, tasks supseteqln {{proj22task2a proj22task2propa}}; department in {dept2}, proprietary in {false}, rid in {proj22task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
11.
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj22task2a}, type in {task}; {setSchedule }; projects ] project)
12.
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj22task2a}, type in {task}; {setSchedule }; projects ] project)
13.
rule(isEmployee in {False}; department in {dept1}, proprietary in {false}, type in {task}; {request }; expertise > expertise, projects ] project, tasks ] rid)
14.
rule(isEmployee in {False}; department in {dept1}, proprietary in {false}, type in {task}; {request read setStatus }; expertise > expertise, projects ] project, tasks ] rid)
15.
rule(isEmployee in {True}; department in {dept2}, proprietary in {true}, type in {task}; {setStatus }; expertise > expertise, projects ] project, tasks ] rid)
16.
rule(isEmployee in {True}; department in {dept2}, proprietary in {true}, type in {task}; {request read setStatus }; expertise > expertise, projects ] project, tasks ] rid)
17.
rule(isEmployee in {True}, tasks supseteqln {{proj21task1a proj21task1propa}}; department in {dept2}, proprietary in {true}, rid in {proj21task1prop}, type in {task}; {read }; expertise > expertise, projects ] project)
18.
rule(isEmployee in {True}, tasks supseteqln {{proj21task1a proj21task1propa}}; department in {dept2}, proprietary in {true}, rid in {proj21task1prop}, type in {task}; {request read }; expertise > expertise, projects ] project)
19.
rule(isEmployee in {True}, tasks supseteqln {{proj21task1a proj21task1propa}}; department in {dept2}, proprietary in {false}, rid in {proj21task1}, type in {task}; {request }; expertise > expertise, projects ] project)
20.
rule(isEmployee in {True}, tasks supseteqln {{proj21task1a proj21task1propa}}; department in {dept2}, proprietary in {false}, rid in {proj21task1}, type in {task}; {request read }; expertise > expertise, projects ] project)
21.
rule(isEmployee in {True}; department in {dept1}, proprietary in {true}, type in {task}; {setStatus }; expertise > expertise, projects ] project, tasks ] rid)
22.
rule(isEmployee in {True}; department in {dept1}, proprietary in {true}, type in {task}; {request read setStatus }; expertise > expertise, projects ] project, tasks ] rid)
23.
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj21task2propa}, type in {task}; {setCost }; projects ] project)
24.
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj21task2propa}, type in {task}; {setCost }; projects ] project)
25.
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, type in {budget}; {write }; projects ] project)
26.
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, type in {budget}; {write read }; projects ] project)
27.
rule(; type in {schedule}; {read }; department=department, projects ] project, projectsLed ] project)
28.
rule(; type in {schedule}; {write read }; department=department, projects ] project, projectsLed ] project)
29.
rule(uid in {acc1 code12 plan1 des12 aud1}; department in {dept1}, type in {schedule}; {read }; projects ] project)
30.
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, type in {schedule}; {read }; projects ] project)
31.
rule(isEmployee in {True}; department in {dept2}, proprietary in {false}, type in {task}; {setStatus }; expertise > expertise, projects ] project, tasks ] rid)
32.
rule(isEmployee in {True}; department in {dept2}, proprietary in {false}, type in {task}; {request read setStatus }; expertise > expertise, projects ] project, tasks ] rid)
33.
rule(uid in {code22 des22 acc2 plan2 aud2}; department in {dept2}, type in {schedule}; {read }; projects ] project)
34.
rule(expertise supseteqln {{coding}}, isEmployee in {False}, tasks supseteqln {{proj22task2a proj22task2propa}}; department in {dept2}, type in {schedule}; {read }; projects ] project)
35.
rule(; type in {budget}; {read }; department=department, projects ] project, projectsLed ] project)
36.
rule(; type in {budget}; {write read }; department=department, projects ] project, projectsLed ] project)
37.
rule(isEmployee in {False}, tasks supseteqln {{proj12task1a proj12task1propa}}; department in {dept1}, proprietary in {false}, rid in {proj12task1}, type in {task}; {request }; expertise > expertise, projects ] project)
38.
rule(isEmployee in {False}, tasks supseteqln {{proj12task1a proj12task1propa}}; department in {dept1}, proprietary in {false}, rid in {proj12task1}, type in {task}; {request read }; expertise > expertise, projects ] project)
39.
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj21task2prop}, type in {task}; {setCost }; projects ] project)
40.
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj21task2prop}, type in {task}; {setCost }; projects ] project)
41.
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj22task2}, type in {task}; {setCost }; projects ] project)
42.
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj22task2}, type in {task}; {setCost }; projects ] project)
43.
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj11task2propa}, type in {task}; {setSchedule }; projects ] project)
44.
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj11task2propa}, type in {task}; {setSchedule }; projects ] project)
45.
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj22task1}, type in {task}; {setCost }; projects ] project)
46.
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj22task1}, type in {task}; {setCost }; projects ] project)
47.
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj21task1}, type in {task}; {setCost }; projects ] project)
48.
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj21task1}, type in {task}; {setCost }; projects ] project)
49.
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj12task2}, type in {task}; {setSchedule }; projects ] project)
50.
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj12task2}, type in {task}; {setSchedule }; projects ] project)
51.
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj21task2}, type in {task}; {setCost }; projects ] project)
52.
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj21task2}, type in {task}; {setCost }; projects ] project)
53.
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj21task1prop}, type in {task}; {setSchedule }; projects ] project)
54.
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj21task1prop}, type in {task}; {setSchedule }; projects ] project)
55.
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj22task1a}, type in {task}; {setSchedule }; projects ] project)
56.
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj22task1a}, type in {task}; {setSchedule }; projects ] project)
57.
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj21task1propa}, type in {task}; {setCost }; projects ] project)
58.
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj21task1propa}, type in {task}; {setCost }; projects ] project)
59.
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj22task2prop}, type in {task}; {setCost }; projects ] project)
60.
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj22task2prop}, type in {task}; {setCost }; projects ] project)
61.
rule(isEmployee in {False}; department in {dept2}, proprietary in {false}, type in {task}; {read }; expertise > expertise, projects ] project, tasks ] rid)
62.
rule(isEmployee in {False}; department in {dept2}, proprietary in {false}, type in {task}; {request read setStatus }; expertise > expertise, projects ] project, tasks ] rid)
63.
rule(isEmployee in {False}; department in {dept2}, proprietary in {true}, type in {task}; {setStatus }; expertise > expertise, projects ] project, tasks ] rid)
64.
rule(isEmployee in {False}; department in {dept2}, proprietary in {true}, type in {task}; {setStatus }; expertise > expertise, projects ] project, tasks ] rid)
65.
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj21task1}, type in {task}; {setSchedule }; projects ] project)
66.
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj21task1}, type in {task}; {setSchedule }; projects ] project)
67.
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj21task2}, type in {task}; {setSchedule }; projects ] project)
68.
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj21task2}, type in {task}; {setSchedule }; projects ] project)
69.
rule(adminRoles supseteqln {{auditor} {accountant}}; department in {dept1}, type in {budget}; {read }; projects ] project)
70.
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, type in {budget}; {write read }; projects ] project)
71.
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj21task2prop}, type in {task}; {setSchedule }; projects ] project)
72.
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj21task2prop}, type in {task}; {setSchedule }; projects ] project)
73.
rule(adminRoles supseteqln {{manager}}; project in {proj12}, type in {budget}; {read }; department=department)
74.
rule(adminRoles supseteqln {{manager}}; project in {proj12}, type in {budget}; {approve read }; department=department)
75.
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj12task1}, type in {task}; {setSchedule }; projects ] project)
76.
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj12task1}, type in {task}; {setSchedule }; projects ] project)
77.
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj12task2prop}, type in {task}; {setSchedule }; projects ] project)
78.
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj12task2prop}, type in {task}; {setSchedule }; projects ] project)
79.
rule(adminRoles supseteqln {{manager}}; project in {proj11}, type in {budget}; {approve }; department=department)
80.
rule(adminRoles supseteqln {{manager}}; project in {proj11}, type in {budget}; {approve read }; department=department)
81.
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj11task2propa}, type in {task}; {setCost }; projects ] project)
82.
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj11task2propa}, type in {task}; {setCost }; projects ] project)
83.
rule(adminRoles supseteqln {{manager}}; project in {proj22}, type in {budget}; {approve }; department=department)
84.
rule(adminRoles supseteqln {{manager}}; project in {proj22}, type in {budget}; {approve read }; department=department)
85.
rule(adminRoles supseteqln {{auditor}}; department in {dept2}, type in {budget}; {read }; projects ] project)
86.
rule(adminRoles supseteqln {{auditor}}; department in {dept2}, type in {budget}; {read }; projects ] project)
87.
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj22task1prop}, type in {task}; {setCost }; projects ] project)
88.
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj22task1prop}, type in {task}; {setCost }; projects ] project)
89.
rule(isEmployee in {True}, tasks supseteqln {{proj11task1a proj11task1propa}}; department in {dept1}, proprietary in {false}, rid in {proj11task1}, type in {task}; {read }; expertise > expertise, projects ] project)
90.
rule(isEmployee in {True}, tasks supseteqln {{proj11task1a proj11task1propa}}; department in {dept1}, proprietary in {false}, rid in {proj11task1}, type in {task}; {request read }; expertise > expertise, projects ] project)
91.
rule(isEmployee in {True}, tasks supseteqln {{proj11task2a proj11task2propa}}; department in {dept1}, proprietary in {false}, rid in {proj11task2}, type in {task}; {read }; expertise > expertise, projects ] project)
92.
rule(isEmployee in {True}, tasks supseteqln {{proj11task2a proj11task2propa}}; department in {dept1}, proprietary in {false}, rid in {proj11task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
93.
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj21task2a}, type in {task}; {setCost }; projects ] project)
94.
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj21task2a}, type in {task}; {setCost }; projects ] project)
95.
rule(adminRoles supseteqln {{manager}}; project in {proj21}, type in {budget}; {read }; department=department)
96.
rule(adminRoles supseteqln {{manager}}; project in {proj21}, type in {budget}; {approve read }; department=department)
97.
rule(isEmployee in {False}, tasks supseteqln {{proj12task2propa proj12task2a}}; department in {dept1}, proprietary in {false}, rid in {proj12task2}, type in {task}; {read }; expertise > expertise, projects ] project)
98.
rule(isEmployee in {False}, tasks supseteqln {{proj12task2propa proj12task2a}}; department in {dept1}, proprietary in {false}, rid in {proj12task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
99.
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj12task2a}, type in {task}; {setSchedule }; projects ] project)
100.
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj12task2a}, type in {task}; {setSchedule }; projects ] project)
101.
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj21task2a}, type in {task}; {setSchedule }; projects ] project)
102.
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj21task2a}, type in {task}; {setSchedule }; projects ] project)
103.
rule(isEmployee in {False}, tasks supseteqln {{proj22task1a proj22task1propa}}; department in {dept2}, proprietary in {false}, rid in {proj22task1}, type in {task}; {read }; expertise > expertise, projects ] project)
104.
rule(isEmployee in {False}, tasks supseteqln {{proj22task1a proj22task1propa}}; department in {dept2}, proprietary in {false}, rid in {proj22task1}, type in {task}; {request read }; expertise > expertise, projects ] project)
105.
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj12task1a}, type in {task}; {setSchedule }; projects ] project)
106.
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj12task1a}, type in {task}; {setSchedule }; projects ] project)
107.
rule(isEmployee in {True}, tasks supseteqln {{proj21task2a proj21task2propa}}; department in {dept2}, proprietary in {false}, rid in {proj21task2}, type in {task}; {read }; expertise > expertise, projects ] project)
108.
rule(isEmployee in {True}, tasks supseteqln {{proj21task2a proj21task2propa}}; department in {dept2}, proprietary in {false}, rid in {proj21task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
109.
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj21task1a}, type in {task}; {setSchedule }; projects ] project)
110.
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj21task1a}, type in {task}; {setSchedule }; projects ] project)
111.
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj12task1}, type in {task}; {setCost }; projects ] project)
112.
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj12task1}, type in {task}; {setCost }; projects ] project)
113.
rule(uid in {acc1 code11 des11 plan1 aud1}; department in {dept1}, type in {schedule}; {read }; projects ] project)
114.
rule(expertise supseteqln {{design}}, isEmployee in {True}, tasks supseteqln {{proj11task1a proj11task1propa}}; department in {dept1}, type in {schedule}; {read }; projects ] project)
115.
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj12task2}, type in {task}; {setCost }; projects ] project)
116.
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj12task2}, type in {task}; {setCost }; projects ] project)
117.
rule(adminRoles supseteqln {{planner}}; department in {dept2}, type in {schedule}; {write }; projects ] project)
118.
rule(adminRoles supseteqln {{planner}}; department in {dept2}, type in {schedule}; {write read }; projects ] project)
119.
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj22task1}, type in {task}; {setSchedule }; projects ] project)
120.
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj22task1}, type in {task}; {setSchedule }; projects ] project)
121.
rule(isEmployee in {True}; department in {dept1}, proprietary in {false}, type in {task}; {read }; expertise > expertise, projects ] project, tasks ] rid)
122.
rule(isEmployee in {True}; department in {dept1}, proprietary in {false}, type in {task}; {request read setStatus }; expertise > expertise, projects ] project, tasks ] rid)
123.
rule(adminRoles supseteqln {{planner}}; department in {dept1}, type in {schedule}; {write }; projects ] project)
124.
rule(adminRoles supseteqln {{planner}}; department in {dept1}, type in {schedule}; {write read }; projects ] project)
125.
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj22task2prop}, type in {task}; {setSchedule }; projects ] project)
126.
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj22task2prop}, type in {task}; {setSchedule }; projects ] project)
127.
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj11task2prop}, type in {task}; {setCost }; projects ] project)
128.
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj11task2prop}, type in {task}; {setCost }; projects ] project)
129.
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj11task1a}, type in {task}; {setCost }; projects ] project)
130.
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj11task1a}, type in {task}; {setCost }; projects ] project)
131.
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj21task1propa}, type in {task}; {setSchedule }; projects ] project)
132.
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj21task1propa}, type in {task}; {setSchedule }; projects ] project)
133.
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj12task1propa}, type in {task}; {setCost }; projects ] project)
134.
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj12task1propa}, type in {task}; {setCost }; projects ] project)
135.
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj22task2}, type in {task}; {setSchedule }; projects ] project)
136.
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj22task2}, type in {task}; {setSchedule }; projects ] project)
137.
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj12task2propa}, type in {task}; {setSchedule }; projects ] project)
138.
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj12task2propa}, type in {task}; {setSchedule }; projects ] project)
139.
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj22task1propa}, type in {task}; {setCost }; projects ] project)
140.
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj22task1propa}, type in {task}; {setCost }; projects ] project)
141.
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj11task1prop}, type in {task}; {setCost }; projects ] project)
142.
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj11task1prop}, type in {task}; {setCost }; projects ] project)
143.
rule(isEmployee in {False}; department in {dept1}, proprietary in {true}, type in {task}; {setStatus }; expertise > expertise, projects ] project, tasks ] rid)
144.
rule(isEmployee in {False}; department in {dept1}, proprietary in {true}, type in {task}; {setStatus }; expertise > expertise, projects ] project, tasks ] rid)
145.
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj21task1prop}, type in {task}; {setCost }; projects ] project)
146.
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj21task1prop}, type in {task}; {setCost }; projects ] project)
147.
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj12task1propa}, type in {task}; {setSchedule }; projects ] project)
148.
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj12task1propa}, type in {task}; {setSchedule }; projects ] project)
149.
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj11task1propa}, type in {task}; {setCost }; projects ] project)
150.
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj11task1propa}, type in {task}; {setCost }; projects ] project)
151.
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj11task2}, type in {task}; {setSchedule }; projects ] project)
152.
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj11task2}, type in {task}; {setSchedule }; projects ] project)
153.
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj11task1}, type in {task}; {setSchedule }; projects ] project)
154.
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj11task1}, type in {task}; {setSchedule }; projects ] project)
155.
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj11task2a}, type in {task}; {setCost }; projects ] project)
156.
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj11task2a}, type in {task}; {setCost }; projects ] project)
157.
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj12task2prop}, type in {task}; {setCost }; projects ] project)
158.
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj12task2prop}, type in {task}; {setCost }; projects ] project)
159.
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj12task1prop}, type in {task}; {setCost }; projects ] project)
160.
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj12task1prop}, type in {task}; {setCost }; projects ] project)
161.
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj22task1prop}, type in {task}; {setSchedule }; projects ] project)
162.
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj22task1prop}, type in {task}; {setSchedule }; projects ] project)
163.
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj21task1a}, type in {task}; {setCost }; projects ] project)
164.
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj21task1a}, type in {task}; {setCost }; projects ] project)
165.
rule(isEmployee in {True}, tasks supseteqln {{proj21task2a proj21task2propa}}; department in {dept2}, proprietary in {true}, rid in {proj21task2prop}, type in {task}; {read }; expertise > expertise, projects ] project)
166.
rule(isEmployee in {True}, tasks supseteqln {{proj21task2a proj21task2propa}}; department in {dept2}, proprietary in {true}, rid in {proj21task2prop}, type in {task}; {request read }; expertise > expertise, projects ] project)
167.
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj22task2propa}, type in {task}; {setCost }; projects ] project)
168.
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj22task2propa}, type in {task}; {setCost }; projects ] project)
169.
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj11task2a}, type in {task}; {setSchedule }; projects ] project)
170.
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj11task2a}, type in {task}; {setSchedule }; projects ] project)
171.
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj12task2a}, type in {task}; {setCost }; projects ] project)
172.
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj12task2a}, type in {task}; {setCost }; projects ] project)
173.
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj11task1propa}, type in {task}; {setSchedule }; projects ] project)
174.
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj11task1propa}, type in {task}; {setSchedule }; projects ] project)
175.
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj12task2propa}, type in {task}; {setCost }; projects ] project)
176.
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj12task2propa}, type in {task}; {setCost }; projects ] project)
177.
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj11task2prop}, type in {task}; {setSchedule }; projects ] project)
178.
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj11task2prop}, type in {task}; {setSchedule }; projects ] project)
179.
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj22task1propa}, type in {task}; {setSchedule }; projects ] project)
180.
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj22task1propa}, type in {task}; {setSchedule }; projects ] project)
181.
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj11task1prop}, type in {task}; {setSchedule }; projects ] project)
182.
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj11task1prop}, type in {task}; {setSchedule }; projects ] project)
183.
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj22task2a}, type in {task}; {setCost }; projects ] project)
184.
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj22task2a}, type in {task}; {setCost }; projects ] project)
185.
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj11task1a}, type in {task}; {setSchedule }; projects ] project)
186.
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj11task1a}, type in {task}; {setSchedule }; projects ] project)
187.
rule(projectsLed supseteqln {{proj11}}; type in {schedule}; {read }; department=department, projects ] project)
188.
rule(projectsLed supseteqln {{proj11}}; type in {schedule}; {read }; department=department, projects ] project)
189.
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj12task1a}, type in {task}; {setCost }; projects ] project)
190.
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj12task1a}, type in {task}; {setCost }; projects ] project)
191.
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj22task1a}, type in {task}; {setCost }; projects ] project)
192.
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj22task1a}, type in {task}; {setCost }; projects ] project)
193.
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj11task1}, type in {task}; {setCost }; projects ] project)
194.
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj11task1}, type in {task}; {setCost }; projects ] project)
195.
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj11task2}, type in {task}; {setCost }; projects ] project)
196.
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj11task2}, type in {task}; {setCost }; projects ] project)
197.
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj22task2propa}, type in {task}; {setSchedule }; projects ] project)
198.
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj22task2propa}, type in {task}; {setSchedule }; projects ] project)
199.
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj12task1prop}, type in {task}; {setSchedule }; projects ] project)
200.
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj12task1prop}, type in {task}; {setSchedule }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{auditor}}; department in {dept2}, type in {schedule}; {read }; projects ] project)
because of 
rule(uid in {code21 des21 plan2 aud2}; department in {dept2}, type in {schedule}; {read }; projects ] project)
==============================================
Removing Rule rule(isEmployee in {True}, tasks supseteqln {{proj11task1a proj11task1propa}}; department in {dept1}, proprietary in {true}, rid in {proj11task1prop}, type in {task}; {request }; expertise > expertise, projects ] project)
because of 
rule(isEmployee in {True}, tasks supseteqln {{proj11task1a proj11task1propa}}; department in {dept1}, proprietary in {true}, rid in {proj11task1prop}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Removing Rule rule(isEmployee in {True}, tasks supseteqln {{proj11task2a proj11task2propa}}; department in {dept1}, proprietary in {true}, rid in {proj11task2prop}, type in {task}; {read }; expertise > expertise, projects ] project)
because of 
rule(isEmployee in {True}, tasks supseteqln {{proj11task2a proj11task2propa}}; department in {dept1}, proprietary in {true}, rid in {proj11task2prop}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj21task2propa}, type in {task}; {setSchedule }; projects ] project)
because of 
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj21task2propa}, type in {task}; {setSchedule }; projects ] project)
==============================================
Removing Rule rule(isEmployee in {False}, tasks supseteqln {{proj22task2a proj22task2propa}}; department in {dept2}, proprietary in {false}, rid in {proj22task2}, type in {task}; {read }; expertise > expertise, projects ] project)
because of 
rule(isEmployee in {False}, tasks supseteqln {{proj22task2a proj22task2propa}}; department in {dept2}, proprietary in {false}, rid in {proj22task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj22task2a}, type in {task}; {setSchedule }; projects ] project)
because of 
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj22task2a}, type in {task}; {setSchedule }; projects ] project)
==============================================
Removing Rule rule(isEmployee in {False}; department in {dept1}, proprietary in {false}, type in {task}; {request }; expertise > expertise, projects ] project, tasks ] rid)
because of 
rule(isEmployee in {False}; department in {dept1}, proprietary in {false}, type in {task}; {request read setStatus }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Removing Rule rule(isEmployee in {True}; department in {dept2}, proprietary in {true}, type in {task}; {setStatus }; expertise > expertise, projects ] project, tasks ] rid)
because of 
rule(isEmployee in {True}; department in {dept2}, proprietary in {true}, type in {task}; {request read setStatus }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Removing Rule rule(isEmployee in {True}, tasks supseteqln {{proj21task1a proj21task1propa}}; department in {dept2}, proprietary in {true}, rid in {proj21task1prop}, type in {task}; {read }; expertise > expertise, projects ] project)
because of 
rule(isEmployee in {True}, tasks supseteqln {{proj21task1a proj21task1propa}}; department in {dept2}, proprietary in {true}, rid in {proj21task1prop}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Removing Rule rule(isEmployee in {True}, tasks supseteqln {{proj21task1a proj21task1propa}}; department in {dept2}, proprietary in {false}, rid in {proj21task1}, type in {task}; {request }; expertise > expertise, projects ] project)
because of 
rule(isEmployee in {True}, tasks supseteqln {{proj21task1a proj21task1propa}}; department in {dept2}, proprietary in {false}, rid in {proj21task1}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Removing Rule rule(isEmployee in {True}; department in {dept1}, proprietary in {true}, type in {task}; {setStatus }; expertise > expertise, projects ] project, tasks ] rid)
because of 
rule(isEmployee in {True}; department in {dept1}, proprietary in {true}, type in {task}; {request read setStatus }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Removing Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj21task2propa}, type in {task}; {setCost }; projects ] project)
because of 
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj21task2propa}, type in {task}; {setCost }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2}, type in {budget}; {write }; projects ] project)
because of 
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, type in {budget}; {write read }; projects ] project)
==============================================
Removing Rule rule(; type in {schedule}; {read }; department=department, projects ] project, projectsLed ] project)
because of 
rule(; type in {schedule}; {write read }; department=department, projects ] project, projectsLed ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{accountant}}; department in {dept1}, type in {schedule}; {read }; projects ] project)
because of 
rule(uid in {acc1 code12 plan1 des12 aud1}; department in {dept1}, type in {schedule}; {read }; projects ] project)
==============================================
Removing Rule rule(isEmployee in {True}; department in {dept2}, proprietary in {false}, type in {task}; {setStatus }; expertise > expertise, projects ] project, tasks ] rid)
because of 
rule(isEmployee in {True}; department in {dept2}, proprietary in {false}, type in {task}; {request read setStatus }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Removing Rule rule(expertise supseteqln {{coding}}, isEmployee in {False}, tasks supseteqln {{proj22task2a proj22task2propa}}; department in {dept2}, type in {schedule}; {read }; projects ] project)
because of 
rule(uid in {code22 des22 acc2 plan2 aud2}; department in {dept2}, type in {schedule}; {read }; projects ] project)
==============================================
Removing Rule rule(; type in {budget}; {read }; department=department, projects ] project, projectsLed ] project)
because of 
rule(; type in {budget}; {write read }; department=department, projects ] project, projectsLed ] project)
==============================================
Removing Rule rule(isEmployee in {False}, tasks supseteqln {{proj12task1a proj12task1propa}}; department in {dept1}, proprietary in {false}, rid in {proj12task1}, type in {task}; {request }; expertise > expertise, projects ] project)
because of 
rule(isEmployee in {False}, tasks supseteqln {{proj12task1a proj12task1propa}}; department in {dept1}, proprietary in {false}, rid in {proj12task1}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj21task2prop}, type in {task}; {setCost }; projects ] project)
because of 
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj21task2prop}, type in {task}; {setCost }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj22task2}, type in {task}; {setCost }; projects ] project)
because of 
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj22task2}, type in {task}; {setCost }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj11task2propa}, type in {task}; {setSchedule }; projects ] project)
because of 
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj11task2propa}, type in {task}; {setSchedule }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj22task1}, type in {task}; {setCost }; projects ] project)
because of 
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj22task1}, type in {task}; {setCost }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj21task1}, type in {task}; {setCost }; projects ] project)
because of 
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj21task1}, type in {task}; {setCost }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj12task2}, type in {task}; {setSchedule }; projects ] project)
because of 
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj12task2}, type in {task}; {setSchedule }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj21task2}, type in {task}; {setCost }; projects ] project)
because of 
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj21task2}, type in {task}; {setCost }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj21task1prop}, type in {task}; {setSchedule }; projects ] project)
because of 
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj21task1prop}, type in {task}; {setSchedule }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj22task1a}, type in {task}; {setSchedule }; projects ] project)
because of 
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj22task1a}, type in {task}; {setSchedule }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj21task1propa}, type in {task}; {setCost }; projects ] project)
because of 
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj21task1propa}, type in {task}; {setCost }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj22task2prop}, type in {task}; {setCost }; projects ] project)
because of 
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj22task2prop}, type in {task}; {setCost }; projects ] project)
==============================================
Removing Rule rule(isEmployee in {False}; department in {dept2}, proprietary in {false}, type in {task}; {read }; expertise > expertise, projects ] project, tasks ] rid)
because of 
rule(isEmployee in {False}; department in {dept2}, proprietary in {false}, type in {task}; {request read setStatus }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Removing Rule rule(isEmployee in {False}; department in {dept2}, proprietary in {true}, type in {task}; {setStatus }; expertise > expertise, projects ] project, tasks ] rid)
because of 
rule(isEmployee in {False}; department in {dept2}, proprietary in {true}, type in {task}; {setStatus }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Removing Rule rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj21task1}, type in {task}; {setSchedule }; projects ] project)
because of 
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj21task1}, type in {task}; {setSchedule }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj21task2}, type in {task}; {setSchedule }; projects ] project)
because of 
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj21task2}, type in {task}; {setSchedule }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj21task2prop}, type in {task}; {setSchedule }; projects ] project)
because of 
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj21task2prop}, type in {task}; {setSchedule }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{manager}}; project in {proj12}, type in {budget}; {read }; department=department)
because of 
rule(adminRoles supseteqln {{manager}}; project in {proj12}, type in {budget}; {approve read }; department=department)
==============================================
Removing Rule rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj12task1}, type in {task}; {setSchedule }; projects ] project)
because of 
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj12task1}, type in {task}; {setSchedule }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj12task2prop}, type in {task}; {setSchedule }; projects ] project)
because of 
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj12task2prop}, type in {task}; {setSchedule }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{manager}}; project in {proj11}, type in {budget}; {approve }; department=department)
because of 
rule(adminRoles supseteqln {{manager}}; project in {proj11}, type in {budget}; {approve read }; department=department)
==============================================
Removing Rule rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj11task2propa}, type in {task}; {setCost }; projects ] project)
because of 
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj11task2propa}, type in {task}; {setCost }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{manager}}; project in {proj22}, type in {budget}; {approve }; department=department)
because of 
rule(adminRoles supseteqln {{manager}}; project in {proj22}, type in {budget}; {approve read }; department=department)
==============================================
Removing Rule rule(adminRoles supseteqln {{auditor}}; department in {dept2}, type in {budget}; {read }; projects ] project)
because of 
rule(adminRoles supseteqln {{auditor}}; department in {dept2}, type in {budget}; {read }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj22task1prop}, type in {task}; {setCost }; projects ] project)
because of 
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj22task1prop}, type in {task}; {setCost }; projects ] project)
==============================================
Removing Rule rule(isEmployee in {True}, tasks supseteqln {{proj11task1a proj11task1propa}}; department in {dept1}, proprietary in {false}, rid in {proj11task1}, type in {task}; {read }; expertise > expertise, projects ] project)
because of 
rule(isEmployee in {True}, tasks supseteqln {{proj11task1a proj11task1propa}}; department in {dept1}, proprietary in {false}, rid in {proj11task1}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Removing Rule rule(isEmployee in {True}, tasks supseteqln {{proj11task2a proj11task2propa}}; department in {dept1}, proprietary in {false}, rid in {proj11task2}, type in {task}; {read }; expertise > expertise, projects ] project)
because of 
rule(isEmployee in {True}, tasks supseteqln {{proj11task2a proj11task2propa}}; department in {dept1}, proprietary in {false}, rid in {proj11task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj21task2a}, type in {task}; {setCost }; projects ] project)
because of 
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj21task2a}, type in {task}; {setCost }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{manager}}; project in {proj21}, type in {budget}; {read }; department=department)
because of 
rule(adminRoles supseteqln {{manager}}; project in {proj21}, type in {budget}; {approve read }; department=department)
==============================================
Removing Rule rule(isEmployee in {False}, tasks supseteqln {{proj12task2propa proj12task2a}}; department in {dept1}, proprietary in {false}, rid in {proj12task2}, type in {task}; {read }; expertise > expertise, projects ] project)
because of 
rule(isEmployee in {False}, tasks supseteqln {{proj12task2propa proj12task2a}}; department in {dept1}, proprietary in {false}, rid in {proj12task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj12task2a}, type in {task}; {setSchedule }; projects ] project)
because of 
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj12task2a}, type in {task}; {setSchedule }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj21task2a}, type in {task}; {setSchedule }; projects ] project)
because of 
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj21task2a}, type in {task}; {setSchedule }; projects ] project)
==============================================
Removing Rule rule(isEmployee in {False}, tasks supseteqln {{proj22task1a proj22task1propa}}; department in {dept2}, proprietary in {false}, rid in {proj22task1}, type in {task}; {read }; expertise > expertise, projects ] project)
because of 
rule(isEmployee in {False}, tasks supseteqln {{proj22task1a proj22task1propa}}; department in {dept2}, proprietary in {false}, rid in {proj22task1}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj12task1a}, type in {task}; {setSchedule }; projects ] project)
because of 
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj12task1a}, type in {task}; {setSchedule }; projects ] project)
==============================================
Removing Rule rule(isEmployee in {True}, tasks supseteqln {{proj21task2a proj21task2propa}}; department in {dept2}, proprietary in {false}, rid in {proj21task2}, type in {task}; {read }; expertise > expertise, projects ] project)
because of 
rule(isEmployee in {True}, tasks supseteqln {{proj21task2a proj21task2propa}}; department in {dept2}, proprietary in {false}, rid in {proj21task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj21task1a}, type in {task}; {setSchedule }; projects ] project)
because of 
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj21task1a}, type in {task}; {setSchedule }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj12task1}, type in {task}; {setCost }; projects ] project)
because of 
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj12task1}, type in {task}; {setCost }; projects ] project)
==============================================
Removing Rule rule(expertise supseteqln {{design}}, isEmployee in {True}, tasks supseteqln {{proj11task1a proj11task1propa}}; department in {dept1}, type in {schedule}; {read }; projects ] project)
because of 
rule(uid in {acc1 code11 des11 plan1 aud1}; department in {dept1}, type in {schedule}; {read }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj12task2}, type in {task}; {setCost }; projects ] project)
because of 
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj12task2}, type in {task}; {setCost }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{planner}}; department in {dept2}, type in {schedule}; {write }; projects ] project)
because of 
rule(adminRoles supseteqln {{planner}}; department in {dept2}, type in {schedule}; {write read }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj22task1}, type in {task}; {setSchedule }; projects ] project)
because of 
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj22task1}, type in {task}; {setSchedule }; projects ] project)
==============================================
Removing Rule rule(isEmployee in {True}; department in {dept1}, proprietary in {false}, type in {task}; {read }; expertise > expertise, projects ] project, tasks ] rid)
because of 
rule(isEmployee in {True}; department in {dept1}, proprietary in {false}, type in {task}; {request read setStatus }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Removing Rule rule(adminRoles supseteqln {{planner}}; department in {dept1}, type in {schedule}; {write }; projects ] project)
because of 
rule(adminRoles supseteqln {{planner}}; department in {dept1}, type in {schedule}; {write read }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj22task2prop}, type in {task}; {setSchedule }; projects ] project)
because of 
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj22task2prop}, type in {task}; {setSchedule }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj11task2prop}, type in {task}; {setCost }; projects ] project)
because of 
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj11task2prop}, type in {task}; {setCost }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj11task1a}, type in {task}; {setCost }; projects ] project)
because of 
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj11task1a}, type in {task}; {setCost }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj21task1propa}, type in {task}; {setSchedule }; projects ] project)
because of 
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj21task1propa}, type in {task}; {setSchedule }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj12task1propa}, type in {task}; {setCost }; projects ] project)
because of 
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj12task1propa}, type in {task}; {setCost }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj22task2}, type in {task}; {setSchedule }; projects ] project)
because of 
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj22task2}, type in {task}; {setSchedule }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj12task2propa}, type in {task}; {setSchedule }; projects ] project)
because of 
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj12task2propa}, type in {task}; {setSchedule }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj22task1propa}, type in {task}; {setCost }; projects ] project)
because of 
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj22task1propa}, type in {task}; {setCost }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj11task1prop}, type in {task}; {setCost }; projects ] project)
because of 
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj11task1prop}, type in {task}; {setCost }; projects ] project)
==============================================
Removing Rule rule(isEmployee in {False}; department in {dept1}, proprietary in {true}, type in {task}; {setStatus }; expertise > expertise, projects ] project, tasks ] rid)
because of 
rule(isEmployee in {False}; department in {dept1}, proprietary in {true}, type in {task}; {setStatus }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Removing Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj21task1prop}, type in {task}; {setCost }; projects ] project)
because of 
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj21task1prop}, type in {task}; {setCost }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj12task1propa}, type in {task}; {setSchedule }; projects ] project)
because of 
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj12task1propa}, type in {task}; {setSchedule }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj11task1propa}, type in {task}; {setCost }; projects ] project)
because of 
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj11task1propa}, type in {task}; {setCost }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj11task2}, type in {task}; {setSchedule }; projects ] project)
because of 
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj11task2}, type in {task}; {setSchedule }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj11task1}, type in {task}; {setSchedule }; projects ] project)
because of 
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj11task1}, type in {task}; {setSchedule }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj11task2a}, type in {task}; {setCost }; projects ] project)
because of 
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj11task2a}, type in {task}; {setCost }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj12task2prop}, type in {task}; {setCost }; projects ] project)
because of 
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj12task2prop}, type in {task}; {setCost }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj12task1prop}, type in {task}; {setCost }; projects ] project)
because of 
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj12task1prop}, type in {task}; {setCost }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj22task1prop}, type in {task}; {setSchedule }; projects ] project)
because of 
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj22task1prop}, type in {task}; {setSchedule }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj21task1a}, type in {task}; {setCost }; projects ] project)
because of 
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj21task1a}, type in {task}; {setCost }; projects ] project)
==============================================
Removing Rule rule(isEmployee in {True}, tasks supseteqln {{proj21task2a proj21task2propa}}; department in {dept2}, proprietary in {true}, rid in {proj21task2prop}, type in {task}; {read }; expertise > expertise, projects ] project)
because of 
rule(isEmployee in {True}, tasks supseteqln {{proj21task2a proj21task2propa}}; department in {dept2}, proprietary in {true}, rid in {proj21task2prop}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj22task2propa}, type in {task}; {setCost }; projects ] project)
because of 
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj22task2propa}, type in {task}; {setCost }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj11task2a}, type in {task}; {setSchedule }; projects ] project)
because of 
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj11task2a}, type in {task}; {setSchedule }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj12task2a}, type in {task}; {setCost }; projects ] project)
because of 
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj12task2a}, type in {task}; {setCost }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj11task1propa}, type in {task}; {setSchedule }; projects ] project)
because of 
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj11task1propa}, type in {task}; {setSchedule }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj12task2propa}, type in {task}; {setCost }; projects ] project)
because of 
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj12task2propa}, type in {task}; {setCost }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj11task2prop}, type in {task}; {setSchedule }; projects ] project)
because of 
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj11task2prop}, type in {task}; {setSchedule }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj22task1propa}, type in {task}; {setSchedule }; projects ] project)
because of 
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj22task1propa}, type in {task}; {setSchedule }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj11task1prop}, type in {task}; {setSchedule }; projects ] project)
because of 
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj11task1prop}, type in {task}; {setSchedule }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj22task2a}, type in {task}; {setCost }; projects ] project)
because of 
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj22task2a}, type in {task}; {setCost }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj11task1a}, type in {task}; {setSchedule }; projects ] project)
because of 
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj11task1a}, type in {task}; {setSchedule }; projects ] project)
==============================================
Removing Rule rule(projectsLed supseteqln {{proj11}}; type in {schedule}; {read }; department=department, projects ] project)
because of 
rule(projectsLed supseteqln {{proj11}}; type in {schedule}; {read }; department=department, projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj12task1a}, type in {task}; {setCost }; projects ] project)
because of 
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj12task1a}, type in {task}; {setCost }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj22task1a}, type in {task}; {setCost }; projects ] project)
because of 
rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj22task1a}, type in {task}; {setCost }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj11task1}, type in {task}; {setCost }; projects ] project)
because of 
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj11task1}, type in {task}; {setCost }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj11task2}, type in {task}; {setCost }; projects ] project)
because of 
rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj11task2}, type in {task}; {setCost }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj22task2propa}, type in {task}; {setSchedule }; projects ] project)
because of 
rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj22task2propa}, type in {task}; {setSchedule }; projects ] project)
==============================================
Removing Rule rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj12task1prop}, type in {task}; {setSchedule }; projects ] project)
because of 
rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj12task1prop}, type in {task}; {setSchedule }; projects ] project)
Merging two rules:
1.rule(; type in {schedule}; {write read }; department=department, projects ] project, projectsLed ] project)
2.rule(; type in {budget}; {write read }; department=department, projects ] project, projectsLed ] project)
==============================================
Result Rule rule(; type in {budget schedule}; {write read }; department=department, projects ] project, projectsLed ] project)
Merging two rules:
1.rule(uid in {code22 des22 acc2 plan2 aud2}; department in {dept2}, type in {schedule}; {read }; projects ] project)
2.rule(uid in {acc1 code11 des11 plan1 aud1}; department in {dept1}, type in {schedule}; {read }; projects ] project)
==============================================
Result Rule rule(uid in {acc2 des22 code22 acc1 code11 des11 plan2 plan1 aud1 aud2}; department in {dept2 dept1}, type in {schedule}; {read }; projects ] project)
Merging two rules:
1.rule(uid in {acc2 des22 code22 acc1 code11 des11 plan2 plan1 aud1 aud2}; department in {dept2 dept1}, type in {schedule}; {read }; projects ] project)
2.rule(uid in {acc1 code12 plan1 des12 aud1}; department in {dept1}, type in {schedule}; {read }; projects ] project)
==============================================
Result Rule rule(uid in {code22 des22 acc2 code12 acc1 code11 plan2 des11 des12 plan1 aud1 aud2}; department in {dept2 dept1}, type in {schedule}; {read }; projects ] project)
Merging two rules:
1.rule(uid in {code22 des22 acc2 code12 acc1 code11 plan2 des11 des12 plan1 aud1 aud2}; department in {dept2 dept1}, type in {schedule}; {read }; projects ] project)
2.rule(uid in {code21 des21 plan2 aud2}; department in {dept2}, type in {schedule}; {read }; projects ] project)
==============================================
Result Rule rule(uid in {des22 code22 code21 code12 code11 des21 des11 plan2 plan1 des12 acc2 acc1 aud1 aud2}; department in {dept2 dept1}, type in {schedule}; {read }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{planner}}; department in {dept2}, type in {schedule}; {write read }; projects ] project)
2.rule(adminRoles supseteqln {{planner}}; department in {dept1}, type in {schedule}; {write read }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, type in {schedule}; {write read }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{accountant}}; department in {dept2}, type in {budget}; {write read }; projects ] project)
2.rule(adminRoles supseteqln {{accountant}}; department in {dept1}, type in {budget}; {write read }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, type in {budget}; {write read }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{auditor} {accountant}}; department in {dept1}, type in {budget}; {read }; projects ] project)
2.rule(adminRoles supseteqln {{auditor}}; department in {dept2}, type in {budget}; {read }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{auditor} {accountant}}; department in {dept2 dept1}, type in {budget}; {read }; projects ] project)
Merging two rules:
1.rule(isEmployee in {True}; department in {dept2}, proprietary in {true}, type in {task}; {request read setStatus }; expertise > expertise, projects ] project, tasks ] rid)
2.rule(isEmployee in {True}; department in {dept1}, proprietary in {false}, type in {task}; {request read setStatus }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Result Rule rule(isEmployee in {True}; department in {dept2 dept1}, proprietary in {false true}, type in {task}; {request read setStatus }; expertise > expertise, projects ] project, tasks ] rid)
Merging two rules:
1.rule(isEmployee in {False}; department in {dept1}, proprietary in {false}, type in {task}; {request read setStatus }; expertise > expertise, projects ] project, tasks ] rid)
2.rule(isEmployee in {False}; department in {dept2}, proprietary in {false}, type in {task}; {request read setStatus }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Result Rule rule(isEmployee in {False}; department in {dept2 dept1}, proprietary in {false}, type in {task}; {request read setStatus }; expertise > expertise, projects ] project, tasks ] rid)
Merging two rules:
1.rule(adminRoles supseteqln {{manager}}; project in {proj12}, type in {budget}; {approve read }; department=department)
2.rule(adminRoles supseteqln {{manager}}; project in {proj11}, type in {budget}; {approve read }; department=department)
==============================================
Result Rule rule(adminRoles supseteqln {{manager}}; project in {proj11 proj12}, type in {budget}; {approve read }; department=department)
Merging two rules:
1.rule(adminRoles supseteqln {{manager}}; project in {proj11 proj12}, type in {budget}; {approve read }; department=department)
2.rule(adminRoles supseteqln {{manager}}; project in {proj22}, type in {budget}; {approve read }; department=department)
==============================================
Result Rule rule(adminRoles supseteqln {{manager}}; project in {proj11 proj12 proj22}, type in {budget}; {approve read }; department=department)
Merging two rules:
1.rule(adminRoles supseteqln {{manager}}; project in {proj11 proj12 proj22}, type in {budget}; {approve read }; department=department)
2.rule(adminRoles supseteqln {{manager}}; project in {proj21}, type in {budget}; {approve read }; department=department)
==============================================
Result Rule rule(adminRoles supseteqln {{manager}}; project in {proj11 proj12 proj22 proj21}, type in {budget}; {approve read }; department=department)
Merging two rules:
1.rule(isEmployee in {False}; department in {dept2}, proprietary in {true}, type in {task}; {setStatus }; expertise > expertise, projects ] project, tasks ] rid)
2.rule(isEmployee in {False}; department in {dept1}, proprietary in {true}, type in {task}; {setStatus }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Result Rule rule(isEmployee in {False}; department in {dept2 dept1}, proprietary in {true}, type in {task}; {setStatus }; expertise > expertise, projects ] project, tasks ] rid)
Merging two rules:
1.rule(isEmployee in {True}, tasks supseteqln {{proj21task1a proj21task1propa}}; department in {dept2}, proprietary in {true}, rid in {proj21task1prop}, type in {task}; {request read }; expertise > expertise, projects ] project)
2.rule(isEmployee in {True}, tasks supseteqln {{proj21task1a proj21task1propa}}; department in {dept2}, proprietary in {false}, rid in {proj21task1}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Result Rule rule(isEmployee in {True}, tasks supseteqln {{proj21task1a proj21task1propa}}; department in {dept2}, proprietary in {false true}, rid in {proj21task1 proj21task1prop}, type in {task}; {request read }; expertise > expertise, projects ] project)
Merging two rules:
1.rule(isEmployee in {True}, tasks supseteqln {{proj21task1a proj21task1propa}}; department in {dept2}, proprietary in {false true}, rid in {proj21task1 proj21task1prop}, type in {task}; {request read }; expertise > expertise, projects ] project)
2.rule(isEmployee in {True}, tasks supseteqln {{proj11task1a proj11task1propa}}; department in {dept1}, proprietary in {true}, rid in {proj11task1prop}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Result Rule rule(isEmployee in {True}, tasks supseteqln {{proj21task1a proj21task1propa} {proj11task1a proj11task1propa}}; department in {dept2 dept1}, proprietary in {true false}, rid in {proj21task1 proj21task1prop proj11task1prop}, type in {task}; {request read }; expertise > expertise, projects ] project)
Merging two rules:
1.rule(isEmployee in {True}, tasks supseteqln {{proj21task1a proj21task1propa} {proj11task1a proj11task1propa}}; department in {dept2 dept1}, proprietary in {true false}, rid in {proj21task1 proj21task1prop proj11task1prop}, type in {task}; {request read }; expertise > expertise, projects ] project)
2.rule(isEmployee in {True}, tasks supseteqln {{proj11task2a proj11task2propa}}; department in {dept1}, proprietary in {true}, rid in {proj11task2prop}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Result Rule rule(isEmployee in {True}, tasks supseteqln {{proj11task2a proj11task2propa} {proj21task1a proj21task1propa} {proj11task1a proj11task1propa}}; department in {dept2 dept1}, proprietary in {false true}, rid in {proj21task1 proj11task2prop proj21task1prop proj11task1prop}, type in {task}; {request read }; expertise > expertise, projects ] project)
Merging two rules:
1.rule(isEmployee in {True}, tasks supseteqln {{proj11task2a proj11task2propa} {proj21task1a proj21task1propa} {proj11task1a proj11task1propa}}; department in {dept2 dept1}, proprietary in {false true}, rid in {proj21task1 proj11task2prop proj21task1prop proj11task1prop}, type in {task}; {request read }; expertise > expertise, projects ] project)
2.rule(isEmployee in {False}, tasks supseteqln {{proj22task2a proj22task2propa}}; department in {dept2}, proprietary in {false}, rid in {proj22task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Result Rule rule(isEmployee in {True False}, tasks supseteqln {{proj22task2a proj22task2propa} {proj11task2a proj11task2propa} {proj21task1a proj21task1propa} {proj11task1a proj11task1propa}}; department in {dept2 dept1}, proprietary in {true false}, rid in {proj21task1 proj11task2prop proj21task1prop proj11task1prop proj22task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
Merging two rules:
1.rule(isEmployee in {True False}, tasks supseteqln {{proj22task2a proj22task2propa} {proj11task2a proj11task2propa} {proj21task1a proj21task1propa} {proj11task1a proj11task1propa}}; department in {dept2 dept1}, proprietary in {true false}, rid in {proj21task1 proj11task2prop proj21task1prop proj11task1prop proj22task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
2.rule(isEmployee in {False}, tasks supseteqln {{proj12task1a proj12task1propa}}; department in {dept1}, proprietary in {false}, rid in {proj12task1}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Result Rule rule(isEmployee in {True False}, tasks supseteqln {{proj12task1a proj12task1propa} {proj11task2a proj11task2propa} {proj22task2a proj22task2propa} {proj21task1a proj21task1propa} {proj11task1a proj11task1propa}}; department in {dept2 dept1}, proprietary in {false true}, rid in {proj12task1 proj21task1 proj11task2prop proj21task1prop proj11task1prop proj22task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
Merging two rules:
1.rule(isEmployee in {True False}, tasks supseteqln {{proj12task1a proj12task1propa} {proj11task2a proj11task2propa} {proj22task2a proj22task2propa} {proj21task1a proj21task1propa} {proj11task1a proj11task1propa}}; department in {dept2 dept1}, proprietary in {false true}, rid in {proj12task1 proj21task1 proj11task2prop proj21task1prop proj11task1prop proj22task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
2.rule(isEmployee in {True}, tasks supseteqln {{proj11task1a proj11task1propa}}; department in {dept1}, proprietary in {false}, rid in {proj11task1}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Result Rule rule(isEmployee in {True False}, tasks supseteqln {{proj12task1a proj12task1propa} {proj22task2a proj22task2propa} {proj11task2a proj11task2propa} {proj21task1a proj21task1propa} {proj11task1a proj11task1propa}}; department in {dept2 dept1}, proprietary in {true false}, rid in {proj21task1 proj12task1 proj11task2prop proj21task1prop proj11task1prop proj11task1 proj22task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
Merging two rules:
1.rule(isEmployee in {True False}, tasks supseteqln {{proj12task1a proj12task1propa} {proj22task2a proj22task2propa} {proj11task2a proj11task2propa} {proj21task1a proj21task1propa} {proj11task1a proj11task1propa}}; department in {dept2 dept1}, proprietary in {true false}, rid in {proj21task1 proj12task1 proj11task2prop proj21task1prop proj11task1prop proj11task1 proj22task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
2.rule(isEmployee in {True}, tasks supseteqln {{proj11task2a proj11task2propa}}; department in {dept1}, proprietary in {false}, rid in {proj11task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Result Rule rule(isEmployee in {True False}, tasks supseteqln {{proj12task1a proj12task1propa} {proj11task2a proj11task2propa} {proj22task2a proj22task2propa} {proj21task1a proj21task1propa} {proj11task1a proj11task1propa}}; department in {dept2 dept1}, proprietary in {false true}, rid in {proj11task2 proj12task1 proj21task1 proj11task2prop proj21task1prop proj11task1prop proj11task1 proj22task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
Merging two rules:
1.rule(isEmployee in {True False}, tasks supseteqln {{proj12task1a proj12task1propa} {proj11task2a proj11task2propa} {proj22task2a proj22task2propa} {proj21task1a proj21task1propa} {proj11task1a proj11task1propa}}; department in {dept2 dept1}, proprietary in {false true}, rid in {proj11task2 proj12task1 proj21task1 proj11task2prop proj21task1prop proj11task1prop proj11task1 proj22task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
2.rule(isEmployee in {False}, tasks supseteqln {{proj12task2propa proj12task2a}}; department in {dept1}, proprietary in {false}, rid in {proj12task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Result Rule rule(isEmployee in {True False}, tasks supseteqln {{proj12task1a proj12task1propa} {proj22task2a proj22task2propa} {proj11task2a proj11task2propa} {proj21task1a proj21task1propa} {proj12task2propa proj12task2a} {proj11task1a proj11task1propa}}; department in {dept2 dept1}, proprietary in {true false}, rid in {proj11task2 proj12task2 proj21task1 proj12task1 proj11task2prop proj21task1prop proj11task1prop proj11task1 proj22task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
Merging two rules:
1.rule(isEmployee in {True False}, tasks supseteqln {{proj12task1a proj12task1propa} {proj22task2a proj22task2propa} {proj11task2a proj11task2propa} {proj21task1a proj21task1propa} {proj12task2propa proj12task2a} {proj11task1a proj11task1propa}}; department in {dept2 dept1}, proprietary in {true false}, rid in {proj11task2 proj12task2 proj21task1 proj12task1 proj11task2prop proj21task1prop proj11task1prop proj11task1 proj22task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
2.rule(isEmployee in {False}, tasks supseteqln {{proj22task1a proj22task1propa}}; department in {dept2}, proprietary in {false}, rid in {proj22task1}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Result Rule rule(isEmployee in {True False}, tasks supseteqln {{proj12task1a proj12task1propa} {proj11task2a proj11task2propa} {proj22task2a proj22task2propa} {proj21task1a proj21task1propa} {proj11task1a proj11task1propa} {proj12task2propa proj12task2a} {proj22task1a proj22task1propa}}; department in {dept2 dept1}, proprietary in {false true}, rid in {proj11task2 proj22task1 proj12task2 proj12task1 proj21task1 proj11task2prop proj21task1prop proj11task1prop proj11task1 proj22task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
Merging two rules:
1.rule(isEmployee in {True False}, tasks supseteqln {{proj12task1a proj12task1propa} {proj11task2a proj11task2propa} {proj22task2a proj22task2propa} {proj21task1a proj21task1propa} {proj11task1a proj11task1propa} {proj12task2propa proj12task2a} {proj22task1a proj22task1propa}}; department in {dept2 dept1}, proprietary in {false true}, rid in {proj11task2 proj22task1 proj12task2 proj12task1 proj21task1 proj11task2prop proj21task1prop proj11task1prop proj11task1 proj22task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
2.rule(isEmployee in {True}, tasks supseteqln {{proj21task2a proj21task2propa}}; department in {dept2}, proprietary in {false}, rid in {proj21task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Result Rule rule(isEmployee in {True False}, tasks supseteqln {{proj12task1a proj12task1propa} {proj22task2a proj22task2propa} {proj11task2a proj11task2propa} {proj21task1a proj21task1propa} {proj12task2propa proj12task2a} {proj11task1a proj11task1propa} {proj22task1a proj22task1propa} {proj21task2a proj21task2propa}}; department in {dept2 dept1}, proprietary in {true false}, rid in {proj11task2 proj22task1 proj21task2 proj12task2 proj21task1 proj12task1 proj11task2prop proj21task1prop proj11task1prop proj11task1 proj22task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
Merging two rules:
1.rule(isEmployee in {True False}, tasks supseteqln {{proj12task1a proj12task1propa} {proj22task2a proj22task2propa} {proj11task2a proj11task2propa} {proj21task1a proj21task1propa} {proj12task2propa proj12task2a} {proj11task1a proj11task1propa} {proj22task1a proj22task1propa} {proj21task2a proj21task2propa}}; department in {dept2 dept1}, proprietary in {true false}, rid in {proj11task2 proj22task1 proj21task2 proj12task2 proj21task1 proj12task1 proj11task2prop proj21task1prop proj11task1prop proj11task1 proj22task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
2.rule(isEmployee in {True}, tasks supseteqln {{proj21task2a proj21task2propa}}; department in {dept2}, proprietary in {true}, rid in {proj21task2prop}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Result Rule rule(isEmployee in {True False}, tasks supseteqln {{proj12task1a proj12task1propa} {proj11task2a proj11task2propa} {proj22task2a proj22task2propa} {proj21task1a proj21task1propa} {proj11task1a proj11task1propa} {proj12task2propa proj12task2a} {proj22task1a proj22task1propa} {proj21task2a proj21task2propa}}; department in {dept2 dept1}, proprietary in {false true}, rid in {proj11task2 proj22task1 proj12task2 proj21task2 proj12task1 proj21task1 proj11task2prop proj21task1prop proj21task2prop proj11task1prop proj11task1 proj22task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj12task1}, type in {task}; {setCost }; projects ] project)
2.rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj22task1a}, type in {task}; {setCost }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj12task1 proj22task1a}, type in {task}; {setCost }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj12task1 proj22task1a}, type in {task}; {setCost }; projects ] project)
2.rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj12task1propa}, type in {task}; {setCost }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design}}, proprietary in {true false}, rid in {proj12task1 proj22task1a proj12task1propa}, type in {task}; {setCost }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design}}, proprietary in {true false}, rid in {proj12task1 proj22task1a proj12task1propa}, type in {task}; {setCost }; projects ] project)
2.rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj22task1}, type in {task}; {setCost }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design}}, proprietary in {false true}, rid in {proj22task1 proj12task1 proj22task1a proj12task1propa}, type in {task}; {setCost }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design}}, proprietary in {false true}, rid in {proj22task1 proj12task1 proj22task1a proj12task1propa}, type in {task}; {setCost }; projects ] project)
2.rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj22task2}, type in {task}; {setCost }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj22task1 proj12task1 proj22task1a proj12task1propa proj22task2}, type in {task}; {setCost }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj22task1 proj12task1 proj22task1a proj12task1propa proj22task2}, type in {task}; {setCost }; projects ] project)
2.rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj21task1}, type in {task}; {setCost }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj22task1 proj21task1 proj12task1 proj22task1a proj12task1propa proj22task2}, type in {task}; {setCost }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj22task1 proj21task1 proj12task1 proj22task1a proj12task1propa proj22task2}, type in {task}; {setCost }; projects ] project)
2.rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj21task2propa}, type in {task}; {setCost }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj22task1 proj12task1 proj21task1 proj22task1a proj21task2propa proj12task1propa proj22task2}, type in {task}; {setCost }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj22task1 proj12task1 proj21task1 proj22task1a proj21task2propa proj12task1propa proj22task2}, type in {task}; {setCost }; projects ] project)
2.rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj11task1}, type in {task}; {setCost }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj22task1 proj21task1 proj12task1 proj22task1a proj21task2propa proj12task1propa proj11task1 proj22task2}, type in {task}; {setCost }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj22task1 proj21task1 proj12task1 proj22task1a proj21task2propa proj12task1propa proj11task1 proj22task2}, type in {task}; {setCost }; projects ] project)
2.rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj21task2}, type in {task}; {setCost }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj22task1 proj21task2 proj12task1 proj21task1 proj22task1a proj21task2propa proj12task1propa proj11task1 proj22task2}, type in {task}; {setCost }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj22task1 proj21task2 proj12task1 proj21task1 proj22task1a proj21task2propa proj12task1propa proj11task1 proj22task2}, type in {task}; {setCost }; projects ] project)
2.rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj12task2a}, type in {task}; {setCost }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj22task1 proj21task2 proj21task1 proj12task1 proj22task1a proj21task2propa proj12task1propa proj12task2a proj11task1 proj22task2}, type in {task}; {setCost }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj22task1 proj21task2 proj21task1 proj12task1 proj22task1a proj21task2propa proj12task1propa proj12task2a proj11task1 proj22task2}, type in {task}; {setCost }; projects ] project)
2.rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj21task1propa}, type in {task}; {setCost }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj22task1 proj21task2 proj12task1 proj21task1 proj22task1a proj21task2propa proj12task1propa proj12task2a proj11task1 proj21task1propa proj22task2}, type in {task}; {setCost }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj22task1 proj21task2 proj12task1 proj21task1 proj22task1a proj21task2propa proj12task1propa proj12task2a proj11task1 proj21task1propa proj22task2}, type in {task}; {setCost }; projects ] project)
2.rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj21task2prop}, type in {task}; {setCost }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj22task1 proj21task2 proj21task1 proj12task1 proj22task1a proj21task2propa proj12task1propa proj21task2prop proj12task2a proj11task1 proj22task2 proj21task1propa}, type in {task}; {setCost }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj22task1 proj21task2 proj21task1 proj12task1 proj22task1a proj21task2propa proj12task1propa proj21task2prop proj12task2a proj11task1 proj22task2 proj21task1propa}, type in {task}; {setCost }; projects ] project)
2.rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj12task1a}, type in {task}; {setCost }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj22task1 proj12task1 proj22task1a proj12task1a proj12task1propa proj12task2a proj21task1propa proj21task2 proj21task1 proj21task2propa proj21task2prop proj11task1 proj22task2}, type in {task}; {setCost }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj22task1 proj12task1 proj22task1a proj12task1a proj12task1propa proj12task2a proj21task1propa proj21task2 proj21task1 proj21task2propa proj21task2prop proj11task1 proj22task2}, type in {task}; {setCost }; projects ] project)
2.rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj22task2prop}, type in {task}; {setCost }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj22task1 proj12task1 proj22task1a proj12task1a proj12task1propa proj12task2a proj21task1propa proj21task2 proj22task2prop proj21task1 proj21task2propa proj21task2prop proj11task1 proj22task2}, type in {task}; {setCost }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj22task1 proj12task1 proj22task1a proj12task1a proj12task1propa proj12task2a proj21task1propa proj21task2 proj22task2prop proj21task1 proj21task2propa proj21task2prop proj11task1 proj22task2}, type in {task}; {setCost }; projects ] project)
2.rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj22task2a}, type in {task}; {setCost }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj22task1 proj22task2a proj12task1 proj22task1a proj12task1a proj12task1propa proj12task2a proj21task1propa proj21task2 proj21task1 proj22task2prop proj21task2propa proj21task2prop proj11task1 proj22task2}, type in {task}; {setCost }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj22task1 proj22task2a proj12task1 proj22task1a proj12task1a proj12task1propa proj12task2a proj21task1propa proj21task2 proj21task1 proj22task2prop proj21task2propa proj21task2prop proj11task1 proj22task2}, type in {task}; {setCost }; projects ] project)
2.rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj12task2propa}, type in {task}; {setCost }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj22task1 proj12task2propa proj22task2a proj12task1 proj22task1a proj12task1a proj12task1propa proj12task2a proj21task1propa proj21task2 proj22task2prop proj21task1 proj21task2propa proj21task2prop proj11task1 proj22task2}, type in {task}; {setCost }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj22task1 proj12task2propa proj22task2a proj12task1 proj22task1a proj12task1a proj12task1propa proj12task2a proj21task1propa proj21task2 proj22task2prop proj21task1 proj21task2propa proj21task2prop proj11task1 proj22task2}, type in {task}; {setCost }; projects ] project)
2.rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj11task2propa}, type in {task}; {setCost }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj22task1 proj22task2a proj12task2propa proj12task1 proj22task1a proj12task1a proj12task1propa proj12task2a proj21task1propa proj21task2 proj21task1 proj22task2prop proj21task2propa proj11task2propa proj21task2prop proj11task1 proj22task2}, type in {task}; {setCost }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj22task1 proj22task2a proj12task2propa proj12task1 proj22task1a proj12task1a proj12task1propa proj12task2a proj21task1propa proj21task2 proj21task1 proj22task2prop proj21task2propa proj11task2propa proj21task2prop proj11task1 proj22task2}, type in {task}; {setCost }; projects ] project)
2.rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj22task1prop}, type in {task}; {setCost }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj22task1 proj12task2propa proj22task2a proj12task1 proj22task1a proj12task1a proj12task1propa proj12task2a proj21task1propa proj21task2 proj22task2prop proj21task1 proj21task2propa proj22task1prop proj11task2propa proj21task2prop proj11task1 proj22task2}, type in {task}; {setCost }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj22task1 proj12task2propa proj22task2a proj12task1 proj22task1a proj12task1a proj12task1propa proj12task2a proj21task1propa proj21task2 proj22task2prop proj21task1 proj21task2propa proj22task1prop proj11task2propa proj21task2prop proj11task1 proj22task2}, type in {task}; {setCost }; projects ] project)
2.rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj21task2a}, type in {task}; {setCost }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj22task1 proj21task2a proj22task2a proj12task2propa proj12task1 proj22task1a proj12task1a proj12task1propa proj12task2a proj21task1propa proj21task2 proj21task1 proj22task2prop proj21task2propa proj11task2propa proj22task1prop proj21task2prop proj11task1 proj22task2}, type in {task}; {setCost }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj22task1 proj21task2a proj22task2a proj12task2propa proj12task1 proj22task1a proj12task1a proj12task1propa proj12task2a proj21task1propa proj21task2 proj21task1 proj22task2prop proj21task2propa proj11task2propa proj22task1prop proj21task2prop proj11task1 proj22task2}, type in {task}; {setCost }; projects ] project)
2.rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj22task2propa}, type in {task}; {setCost }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj22task1 proj21task2a proj12task2propa proj22task2a proj22task2propa proj12task1 proj22task1a proj12task1a proj12task1propa proj12task2a proj21task1propa proj21task2 proj22task2prop proj21task1 proj21task2propa proj22task1prop proj11task2propa proj21task2prop proj11task1 proj22task2}, type in {task}; {setCost }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj22task1 proj21task2a proj12task2propa proj22task2a proj22task2propa proj12task1 proj22task1a proj12task1a proj12task1propa proj12task2a proj21task1propa proj21task2 proj22task2prop proj21task1 proj21task2propa proj22task1prop proj11task2propa proj21task2prop proj11task1 proj22task2}, type in {task}; {setCost }; projects ] project)
2.rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj11task2}, type in {task}; {setCost }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj11task2 proj22task1 proj21task2a proj22task2a proj12task2propa proj22task2propa proj12task1 proj22task1a proj12task1a proj12task1propa proj12task2a proj21task1propa proj21task2 proj21task1 proj22task2prop proj21task2propa proj11task2propa proj22task1prop proj21task2prop proj11task1 proj22task2}, type in {task}; {setCost }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj11task2 proj22task1 proj21task2a proj22task2a proj12task2propa proj22task2propa proj12task1 proj22task1a proj12task1a proj12task1propa proj12task2a proj21task1propa proj21task2 proj21task1 proj22task2prop proj21task2propa proj11task2propa proj22task1prop proj21task2prop proj11task1 proj22task2}, type in {task}; {setCost }; projects ] project)
2.rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj12task2}, type in {task}; {setCost }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj11task2 proj22task1 proj21task2a proj12task2propa proj22task2a proj12task2 proj22task2propa proj12task1 proj22task1a proj12task1a proj12task1propa proj12task2a proj21task1propa proj21task2 proj22task2prop proj21task1 proj21task2propa proj22task1prop proj11task2propa proj21task2prop proj11task1 proj22task2}, type in {task}; {setCost }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj11task2 proj22task1 proj21task2a proj12task2propa proj22task2a proj12task2 proj22task2propa proj12task1 proj22task1a proj12task1a proj12task1propa proj12task2a proj21task1propa proj21task2 proj22task2prop proj21task1 proj21task2propa proj22task1prop proj11task2propa proj21task2prop proj11task1 proj22task2}, type in {task}; {setCost }; projects ] project)
2.rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj12task2prop}, type in {task}; {setCost }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj11task2 proj22task1 proj21task2a proj22task2a proj12task2propa proj22task2propa proj12task2 proj12task1 proj12task2prop proj22task1a proj12task1a proj12task1propa proj12task2a proj21task1propa proj21task2 proj21task1 proj22task2prop proj21task2propa proj11task2propa proj22task1prop proj21task2prop proj11task1 proj22task2}, type in {task}; {setCost }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj11task2 proj22task1 proj21task2a proj22task2a proj12task2propa proj22task2propa proj12task2 proj12task1 proj12task2prop proj22task1a proj12task1a proj12task1propa proj12task2a proj21task1propa proj21task2 proj21task1 proj22task2prop proj21task2propa proj11task2propa proj22task1prop proj21task2prop proj11task1 proj22task2}, type in {task}; {setCost }; projects ] project)
2.rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj11task2prop}, type in {task}; {setCost }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj11task2 proj22task1 proj21task2a proj12task2propa proj22task2a proj12task2 proj22task2propa proj12task1 proj22task1a proj12task2prop proj11task2prop proj12task1a proj12task1propa proj12task2a proj21task1propa proj21task2 proj22task2prop proj21task1 proj21task2propa proj22task1prop proj11task2propa proj21task2prop proj11task1 proj22task2}, type in {task}; {setCost }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj11task2 proj22task1 proj21task2a proj12task2propa proj22task2a proj12task2 proj22task2propa proj12task1 proj22task1a proj12task2prop proj11task2prop proj12task1a proj12task1propa proj12task2a proj21task1propa proj21task2 proj22task2prop proj21task1 proj21task2propa proj22task1prop proj11task2propa proj21task2prop proj11task1 proj22task2}, type in {task}; {setCost }; projects ] project)
2.rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj12task1prop}, type in {task}; {setCost }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj11task2 proj21task2a proj22task2a proj12task2 proj12task1 proj12task1a proj11task2prop proj12task1propa proj21task1propa proj22task2prop proj11task2propa proj21task2prop proj11task1 proj22task1 proj12task2propa proj22task2propa proj12task2prop proj22task1a proj12task2a proj21task2 proj21task1 proj21task2propa proj12task1prop proj22task1prop proj22task2}, type in {task}; {setCost }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj11task2 proj21task2a proj22task2a proj12task2 proj12task1 proj12task1a proj11task2prop proj12task1propa proj21task1propa proj22task2prop proj11task2propa proj21task2prop proj11task1 proj22task1 proj12task2propa proj22task2propa proj12task2prop proj22task1a proj12task2a proj21task2 proj21task1 proj21task2propa proj12task1prop proj22task1prop proj22task2}, type in {task}; {setCost }; projects ] project)
2.rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj11task1a}, type in {task}; {setCost }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj11task2 proj21task2a proj22task2a proj12task2 proj12task1 proj11task2prop proj12task1a proj12task1propa proj21task1propa proj22task2prop proj11task2propa proj21task2prop proj11task1 proj22task1 proj12task2propa proj22task2propa proj22task1a proj12task2prop proj12task2a proj21task2 proj11task1a proj21task1 proj21task2propa proj22task1prop proj12task1prop proj22task2}, type in {task}; {setCost }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj11task2 proj21task2a proj22task2a proj12task2 proj12task1 proj11task2prop proj12task1a proj12task1propa proj21task1propa proj22task2prop proj11task2propa proj21task2prop proj11task1 proj22task1 proj12task2propa proj22task2propa proj22task1a proj12task2prop proj12task2a proj21task2 proj11task1a proj21task1 proj21task2propa proj22task1prop proj12task1prop proj22task2}, type in {task}; {setCost }; projects ] project)
2.rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj22task1propa}, type in {task}; {setCost }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj11task2 proj21task2a proj22task2a proj12task2 proj12task1 proj12task1a proj11task2prop proj12task1propa proj21task1propa proj22task2prop proj11task2propa proj21task2prop proj11task1 proj22task1 proj12task2propa proj22task2propa proj22task1propa proj12task2prop proj22task1a proj12task2a proj21task2 proj21task1 proj11task1a proj21task2propa proj12task1prop proj22task1prop proj22task2}, type in {task}; {setCost }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj11task2 proj21task2a proj22task2a proj12task2 proj12task1 proj12task1a proj11task2prop proj12task1propa proj21task1propa proj22task2prop proj11task2propa proj21task2prop proj11task1 proj22task1 proj12task2propa proj22task2propa proj22task1propa proj12task2prop proj22task1a proj12task2a proj21task2 proj21task1 proj11task1a proj21task2propa proj12task1prop proj22task1prop proj22task2}, type in {task}; {setCost }; projects ] project)
2.rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj11task2a}, type in {task}; {setCost }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj11task2 proj21task2a proj22task2a proj12task2 proj12task1 proj11task2prop proj12task1a proj12task1propa proj21task1propa proj11task2a proj22task2prop proj11task2propa proj21task2prop proj11task1 proj22task1 proj12task2propa proj22task2propa proj22task1a proj12task2prop proj22task1propa proj12task2a proj21task2 proj11task1a proj21task1 proj21task2propa proj22task1prop proj12task1prop proj22task2}, type in {task}; {setCost }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj11task2 proj21task2a proj22task2a proj12task2 proj12task1 proj11task2prop proj12task1a proj12task1propa proj21task1propa proj11task2a proj22task2prop proj11task2propa proj21task2prop proj11task1 proj22task1 proj12task2propa proj22task2propa proj22task1a proj12task2prop proj22task1propa proj12task2a proj21task2 proj11task1a proj21task1 proj21task2propa proj22task1prop proj12task1prop proj22task2}, type in {task}; {setCost }; projects ] project)
2.rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj11task1prop}, type in {task}; {setCost }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj11task2 proj21task2a proj22task2a proj12task2 proj12task1 proj12task1a proj11task2prop proj12task1propa proj21task1propa proj11task2a proj22task2prop proj11task2propa proj21task2prop proj11task1 proj22task1 proj12task2propa proj22task2propa proj22task1propa proj12task2prop proj22task1a proj12task2a proj21task2 proj21task1 proj11task1a proj21task2propa proj12task1prop proj22task1prop proj11task1prop proj22task2}, type in {task}; {setCost }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj11task2 proj21task2a proj22task2a proj12task2 proj12task1 proj12task1a proj11task2prop proj12task1propa proj21task1propa proj11task2a proj22task2prop proj11task2propa proj21task2prop proj11task1 proj22task1 proj12task2propa proj22task2propa proj22task1propa proj12task2prop proj22task1a proj12task2a proj21task2 proj21task1 proj11task1a proj21task2propa proj12task1prop proj22task1prop proj11task1prop proj22task2}, type in {task}; {setCost }; projects ] project)
2.rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj21task1prop}, type in {task}; {setCost }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj11task2 proj21task2a proj22task2a proj12task2 proj12task1 proj11task2prop proj12task1a proj12task1propa proj21task1propa proj11task2a proj22task2prop proj21task1prop proj11task2propa proj21task2prop proj11task1 proj22task1 proj12task2propa proj22task2propa proj22task1a proj12task2prop proj22task1propa proj12task2a proj21task2 proj11task1a proj21task1 proj21task2propa proj22task1prop proj12task1prop proj11task1prop proj22task2}, type in {task}; {setCost }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj11task2 proj21task2a proj22task2a proj12task2 proj12task1 proj11task2prop proj12task1a proj12task1propa proj21task1propa proj11task2a proj22task2prop proj21task1prop proj11task2propa proj21task2prop proj11task1 proj22task1 proj12task2propa proj22task2propa proj22task1a proj12task2prop proj22task1propa proj12task2a proj21task2 proj11task1a proj21task1 proj21task2propa proj22task1prop proj12task1prop proj11task1prop proj22task2}, type in {task}; {setCost }; projects ] project)
2.rule(adminRoles supseteqln {{accountant}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj11task1propa}, type in {task}; {setCost }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj11task2 proj21task2a proj22task2a proj12task2 proj12task1 proj12task1a proj11task2prop proj12task1propa proj21task1propa proj11task2a proj22task2prop proj21task1prop proj11task2propa proj21task2prop proj11task1 proj22task1 proj12task2propa proj22task2propa proj22task1propa proj12task2prop proj22task1a proj11task1propa proj12task2a proj21task2 proj21task1 proj11task1a proj21task2propa proj12task1prop proj22task1prop proj11task1prop proj22task2}, type in {task}; {setCost }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj11task2 proj21task2a proj22task2a proj12task2 proj12task1 proj12task1a proj11task2prop proj12task1propa proj21task1propa proj11task2a proj22task2prop proj21task1prop proj11task2propa proj21task2prop proj11task1 proj22task1 proj12task2propa proj22task2propa proj22task1propa proj12task2prop proj22task1a proj11task1propa proj12task2a proj21task2 proj21task1 proj11task1a proj21task2propa proj12task1prop proj22task1prop proj11task1prop proj22task2}, type in {task}; {setCost }; projects ] project)
2.rule(adminRoles supseteqln {{accountant}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj21task1a}, type in {task}; {setCost }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj11task2 proj21task2a proj22task2a proj12task2 proj12task1 proj11task2prop proj12task1a proj12task1propa proj21task1propa proj11task2a proj22task2prop proj21task1prop proj11task2propa proj21task2prop proj11task1 proj22task1 proj12task2propa proj22task2propa proj22task1a proj12task2prop proj22task1propa proj11task1propa proj12task2a proj21task2 proj11task1a proj21task1 proj21task2propa proj22task1prop proj12task1prop proj21task1a proj11task1prop proj22task2}, type in {task}; {setCost }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj21task1a}, type in {task}; {setSchedule }; projects ] project)
2.rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj12task1prop}, type in {task}; {setSchedule }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design}}, proprietary in {true false}, rid in {proj12task1prop proj21task1a}, type in {task}; {setSchedule }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design}}, proprietary in {true false}, rid in {proj12task1prop proj21task1a}, type in {task}; {setSchedule }; projects ] project)
2.rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj22task2propa}, type in {task}; {setSchedule }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj22task2propa proj12task1prop proj21task1a}, type in {task}; {setSchedule }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj22task2propa proj12task1prop proj21task1a}, type in {task}; {setSchedule }; projects ] project)
2.rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj11task1prop}, type in {task}; {setSchedule }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj22task2propa proj12task1prop proj11task1prop proj21task1a}, type in {task}; {setSchedule }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj22task2propa proj12task1prop proj11task1prop proj21task1a}, type in {task}; {setSchedule }; projects ] project)
2.rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj21task2propa}, type in {task}; {setSchedule }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj22task2propa proj21task2propa proj12task1prop proj21task1a proj11task1prop}, type in {task}; {setSchedule }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj22task2propa proj21task2propa proj12task1prop proj21task1a proj11task1prop}, type in {task}; {setSchedule }; projects ] project)
2.rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj11task1a}, type in {task}; {setSchedule }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj22task2propa proj11task1a proj21task2propa proj12task1prop proj11task1prop proj21task1a}, type in {task}; {setSchedule }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj22task2propa proj11task1a proj21task2propa proj12task1prop proj11task1prop proj21task1a}, type in {task}; {setSchedule }; projects ] project)
2.rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj11task2prop}, type in {task}; {setSchedule }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj22task2propa proj11task1a proj21task2propa proj11task2prop proj12task1prop proj21task1a proj11task1prop}, type in {task}; {setSchedule }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj22task2propa proj11task1a proj21task2propa proj11task2prop proj12task1prop proj21task1a proj11task1prop}, type in {task}; {setSchedule }; projects ] project)
2.rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj22task1}, type in {task}; {setSchedule }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj22task1 proj22task2propa proj11task1a proj21task2propa proj11task2prop proj12task1prop proj11task1prop proj21task1a}, type in {task}; {setSchedule }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj22task1 proj22task2propa proj11task1a proj21task2propa proj11task2prop proj12task1prop proj11task1prop proj21task1a}, type in {task}; {setSchedule }; projects ] project)
2.rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj21task2}, type in {task}; {setSchedule }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj22task1 proj21task2 proj22task2propa proj11task1a proj21task2propa proj11task2prop proj12task1prop proj21task1a proj11task1prop}, type in {task}; {setSchedule }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj22task1 proj21task2 proj22task2propa proj11task1a proj21task2propa proj11task2prop proj12task1prop proj21task1a proj11task1prop}, type in {task}; {setSchedule }; projects ] project)
2.rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj22task1propa}, type in {task}; {setSchedule }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj22task1 proj22task2propa proj21task2 proj11task1a proj22task1propa proj21task2propa proj11task2prop proj12task1prop proj11task1prop proj21task1a}, type in {task}; {setSchedule }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj22task1 proj22task2propa proj21task2 proj11task1a proj22task1propa proj21task2propa proj11task2prop proj12task1prop proj11task1prop proj21task1a}, type in {task}; {setSchedule }; projects ] project)
2.rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj11task2a}, type in {task}; {setSchedule }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj22task1 proj11task2a proj21task2 proj22task2propa proj11task1a proj22task1propa proj21task2propa proj11task2prop proj12task1prop proj21task1a proj11task1prop}, type in {task}; {setSchedule }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj22task1 proj11task2a proj21task2 proj22task2propa proj11task1a proj22task1propa proj21task2propa proj11task2prop proj12task1prop proj21task1a proj11task1prop}, type in {task}; {setSchedule }; projects ] project)
2.rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj22task2a}, type in {task}; {setSchedule }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj22task1 proj22task2a proj22task2propa proj21task2 proj11task2a proj11task1a proj22task1propa proj21task2propa proj11task2prop proj12task1prop proj11task1prop proj21task1a}, type in {task}; {setSchedule }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj22task1 proj22task2a proj22task2propa proj21task2 proj11task2a proj11task1a proj22task1propa proj21task2propa proj11task2prop proj12task1prop proj11task1prop proj21task1a}, type in {task}; {setSchedule }; projects ] project)
2.rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj22task1prop}, type in {task}; {setSchedule }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj22task1 proj22task2a proj22task2propa proj22task1propa proj11task2prop proj11task2a proj21task2 proj11task1a proj21task2propa proj22task1prop proj12task1prop proj21task1a proj11task1prop}, type in {task}; {setSchedule }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj22task1 proj22task2a proj22task2propa proj22task1propa proj11task2prop proj11task2a proj21task2 proj11task1a proj21task2propa proj22task1prop proj12task1prop proj21task1a proj11task1prop}, type in {task}; {setSchedule }; projects ] project)
2.rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj11task1propa}, type in {task}; {setSchedule }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj22task1 proj22task2a proj22task2propa proj22task1propa proj11task2prop proj11task1propa proj21task2 proj11task2a proj11task1a proj21task2propa proj12task1prop proj22task1prop proj11task1prop proj21task1a}, type in {task}; {setSchedule }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj22task1 proj22task2a proj22task2propa proj22task1propa proj11task2prop proj11task1propa proj21task2 proj11task2a proj11task1a proj21task2propa proj12task1prop proj22task1prop proj11task1prop proj21task1a}, type in {task}; {setSchedule }; projects ] project)
2.rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj22task2prop}, type in {task}; {setSchedule }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj22task1 proj22task2a proj22task2propa proj22task1propa proj11task2prop proj11task1propa proj11task2a proj21task2 proj22task2prop proj11task1a proj21task2propa proj22task1prop proj12task1prop proj21task1a proj11task1prop}, type in {task}; {setSchedule }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj22task1 proj22task2a proj22task2propa proj22task1propa proj11task2prop proj11task1propa proj11task2a proj21task2 proj22task2prop proj11task1a proj21task2propa proj22task1prop proj12task1prop proj21task1a proj11task1prop}, type in {task}; {setSchedule }; projects ] project)
2.rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj21task2a}, type in {task}; {setSchedule }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj22task1 proj21task2a proj22task2a proj22task2propa proj22task1propa proj11task2prop proj11task1propa proj21task2 proj11task2a proj11task1a proj22task2prop proj21task2propa proj12task1prop proj22task1prop proj11task1prop proj21task1a}, type in {task}; {setSchedule }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj22task1 proj21task2a proj22task2a proj22task2propa proj22task1propa proj11task2prop proj11task1propa proj21task2 proj11task2a proj11task1a proj22task2prop proj21task2propa proj12task1prop proj22task1prop proj11task1prop proj21task1a}, type in {task}; {setSchedule }; projects ] project)
2.rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj22task1a}, type in {task}; {setSchedule }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj22task1 proj21task2a proj22task2a proj22task2propa proj22task1a proj22task1propa proj11task2prop proj11task1propa proj11task2a proj21task2 proj22task2prop proj11task1a proj21task2propa proj22task1prop proj12task1prop proj21task1a proj11task1prop}, type in {task}; {setSchedule }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj22task1 proj21task2a proj22task2a proj22task2propa proj22task1a proj22task1propa proj11task2prop proj11task1propa proj11task2a proj21task2 proj22task2prop proj11task1a proj21task2propa proj22task1prop proj12task1prop proj21task1a proj11task1prop}, type in {task}; {setSchedule }; projects ] project)
2.rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj12task2propa}, type in {task}; {setSchedule }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj22task1 proj21task2a proj12task2propa proj22task2a proj22task2propa proj22task1propa proj22task1a proj11task2prop proj11task1propa proj21task2 proj11task2a proj11task1a proj22task2prop proj21task2propa proj12task1prop proj22task1prop proj11task1prop proj21task1a}, type in {task}; {setSchedule }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj22task1 proj21task2a proj12task2propa proj22task2a proj22task2propa proj22task1propa proj22task1a proj11task2prop proj11task1propa proj21task2 proj11task2a proj11task1a proj22task2prop proj21task2propa proj12task1prop proj22task1prop proj11task1prop proj21task1a}, type in {task}; {setSchedule }; projects ] project)
2.rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj11task2propa}, type in {task}; {setSchedule }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj22task1 proj21task2a proj22task2a proj12task2propa proj22task2propa proj22task1a proj22task1propa proj11task2prop proj11task1propa proj11task2a proj21task2 proj22task2prop proj11task1a proj21task2propa proj11task2propa proj22task1prop proj12task1prop proj21task1a proj11task1prop}, type in {task}; {setSchedule }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj22task1 proj21task2a proj22task2a proj12task2propa proj22task2propa proj22task1a proj22task1propa proj11task2prop proj11task1propa proj11task2a proj21task2 proj22task2prop proj11task1a proj21task2propa proj11task2propa proj22task1prop proj12task1prop proj21task1a proj11task1prop}, type in {task}; {setSchedule }; projects ] project)
2.rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj11task2}, type in {task}; {setSchedule }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj11task2 proj22task1 proj21task2a proj12task2propa proj22task2a proj22task2propa proj22task1propa proj22task1a proj11task2prop proj11task1propa proj21task2 proj11task2a proj11task1a proj22task2prop proj21task2propa proj12task1prop proj22task1prop proj11task2propa proj11task1prop proj21task1a}, type in {task}; {setSchedule }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj11task2 proj22task1 proj21task2a proj12task2propa proj22task2a proj22task2propa proj22task1propa proj22task1a proj11task2prop proj11task1propa proj21task2 proj11task2a proj11task1a proj22task2prop proj21task2propa proj12task1prop proj22task1prop proj11task2propa proj11task1prop proj21task1a}, type in {task}; {setSchedule }; projects ] project)
2.rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj11task1}, type in {task}; {setSchedule }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj11task2 proj22task1 proj21task2a proj22task2a proj12task2propa proj22task2propa proj22task1a proj22task1propa proj11task2prop proj11task1propa proj11task2a proj21task2 proj22task2prop proj11task1a proj21task2propa proj11task2propa proj22task1prop proj12task1prop proj21task1a proj11task1prop proj11task1}, type in {task}; {setSchedule }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj11task2 proj22task1 proj21task2a proj22task2a proj12task2propa proj22task2propa proj22task1a proj22task1propa proj11task2prop proj11task1propa proj11task2a proj21task2 proj22task2prop proj11task1a proj21task2propa proj11task2propa proj22task1prop proj12task1prop proj21task1a proj11task1prop proj11task1}, type in {task}; {setSchedule }; projects ] project)
2.rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj22task2}, type in {task}; {setSchedule }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj11task2 proj22task1 proj21task2a proj12task2propa proj22task2a proj22task2propa proj22task1propa proj22task1a proj11task2prop proj11task1propa proj21task2 proj11task2a proj11task1a proj22task2prop proj21task2propa proj12task1prop proj22task1prop proj11task2propa proj11task1prop proj21task1a proj11task1 proj22task2}, type in {task}; {setSchedule }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj11task2 proj22task1 proj21task2a proj12task2propa proj22task2a proj22task2propa proj22task1propa proj22task1a proj11task2prop proj11task1propa proj21task2 proj11task2a proj11task1a proj22task2prop proj21task2propa proj12task1prop proj22task1prop proj11task2propa proj11task1prop proj21task1a proj11task1 proj22task2}, type in {task}; {setSchedule }; projects ] project)
2.rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj12task1a}, type in {task}; {setSchedule }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj11task2 proj22task1 proj21task2a proj22task2a proj12task2propa proj22task2propa proj22task1a proj22task1propa proj12task1a proj11task2prop proj11task1propa proj11task2a proj21task2 proj22task2prop proj11task1a proj21task2propa proj11task2propa proj22task1prop proj12task1prop proj21task1a proj11task1prop proj11task1 proj22task2}, type in {task}; {setSchedule }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj11task2 proj22task1 proj21task2a proj22task2a proj12task2propa proj22task2propa proj22task1a proj22task1propa proj12task1a proj11task2prop proj11task1propa proj11task2a proj21task2 proj22task2prop proj11task1a proj21task2propa proj11task2propa proj22task1prop proj12task1prop proj21task1a proj11task1prop proj11task1 proj22task2}, type in {task}; {setSchedule }; projects ] project)
2.rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj21task1propa}, type in {task}; {setSchedule }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj11task2 proj22task1 proj21task2a proj12task2propa proj22task2a proj22task2propa proj22task1propa proj22task1a proj11task2prop proj12task1a proj11task1propa proj21task1propa proj21task2 proj11task2a proj11task1a proj22task2prop proj21task2propa proj12task1prop proj22task1prop proj11task2propa proj11task1prop proj21task1a proj11task1 proj22task2}, type in {task}; {setSchedule }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj11task2 proj22task1 proj21task2a proj12task2propa proj22task2a proj22task2propa proj22task1propa proj22task1a proj11task2prop proj12task1a proj11task1propa proj21task1propa proj21task2 proj11task2a proj11task1a proj22task2prop proj21task2propa proj12task1prop proj22task1prop proj11task2propa proj11task1prop proj21task1a proj11task1 proj22task2}, type in {task}; {setSchedule }; projects ] project)
2.rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj12task2a}, type in {task}; {setSchedule }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj11task2 proj21task2a proj22task2a proj12task1a proj11task2prop proj21task1propa proj11task2a proj22task2prop proj11task2propa proj11task1 proj22task1 proj12task2propa proj22task2propa proj22task1a proj22task1propa proj11task1propa proj12task2a proj21task2 proj11task1a proj21task2propa proj22task1prop proj12task1prop proj21task1a proj11task1prop proj22task2}, type in {task}; {setSchedule }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj11task2 proj21task2a proj22task2a proj12task1a proj11task2prop proj21task1propa proj11task2a proj22task2prop proj11task2propa proj11task1 proj22task1 proj12task2propa proj22task2propa proj22task1a proj22task1propa proj11task1propa proj12task2a proj21task2 proj11task1a proj21task2propa proj22task1prop proj12task1prop proj21task1a proj11task1prop proj22task2}, type in {task}; {setSchedule }; projects ] project)
2.rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {false}, rid in {proj12task2}, type in {task}; {setSchedule }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj11task2 proj21task2a proj22task2a proj12task2 proj11task2prop proj12task1a proj21task1propa proj11task2a proj22task2prop proj11task2propa proj11task1 proj22task1 proj12task2propa proj22task2propa proj22task1propa proj22task1a proj11task1propa proj12task2a proj21task2 proj11task1a proj21task2propa proj12task1prop proj22task1prop proj11task1prop proj21task1a proj22task2}, type in {task}; {setSchedule }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj11task2 proj21task2a proj22task2a proj12task2 proj11task2prop proj12task1a proj21task1propa proj11task2a proj22task2prop proj11task2propa proj11task1 proj22task1 proj12task2propa proj22task2propa proj22task1propa proj22task1a proj11task1propa proj12task2a proj21task2 proj11task1a proj21task2propa proj12task1prop proj22task1prop proj11task1prop proj21task1a proj22task2}, type in {task}; {setSchedule }; projects ] project)
2.rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj21task1prop}, type in {task}; {setSchedule }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj11task2 proj21task2a proj22task2a proj12task2 proj12task1a proj11task2prop proj21task1propa proj11task2a proj22task2prop proj21task1prop proj11task2propa proj11task1 proj22task1 proj12task2propa proj22task2propa proj22task1a proj22task1propa proj11task1propa proj12task2a proj21task2 proj11task1a proj21task2propa proj22task1prop proj12task1prop proj21task1a proj11task1prop proj22task2}, type in {task}; {setSchedule }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj11task2 proj21task2a proj22task2a proj12task2 proj12task1a proj11task2prop proj21task1propa proj11task2a proj22task2prop proj21task1prop proj11task2propa proj11task1 proj22task1 proj12task2propa proj22task2propa proj22task1a proj22task1propa proj11task1propa proj12task2a proj21task2 proj11task1a proj21task2propa proj22task1prop proj12task1prop proj21task1a proj11task1prop proj22task2}, type in {task}; {setSchedule }; projects ] project)
2.rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj21task1}, type in {task}; {setSchedule }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj11task2 proj21task2a proj22task2a proj12task2 proj11task2prop proj12task1a proj21task1propa proj11task2a proj22task2prop proj21task1prop proj11task2propa proj11task1 proj22task1 proj12task2propa proj22task2propa proj22task1propa proj22task1a proj11task1propa proj12task2a proj21task2 proj21task1 proj11task1a proj21task2propa proj12task1prop proj22task1prop proj11task1prop proj21task1a proj22task2}, type in {task}; {setSchedule }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj11task2 proj21task2a proj22task2a proj12task2 proj11task2prop proj12task1a proj21task1propa proj11task2a proj22task2prop proj21task1prop proj11task2propa proj11task1 proj22task1 proj12task2propa proj22task2propa proj22task1propa proj22task1a proj11task1propa proj12task2a proj21task2 proj21task1 proj11task1a proj21task2propa proj12task1prop proj22task1prop proj11task1prop proj21task1a proj22task2}, type in {task}; {setSchedule }; projects ] project)
2.rule(adminRoles supseteqln {{planner}}; department in {dept2}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj21task2prop}, type in {task}; {setSchedule }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj11task2 proj21task2a proj22task2a proj12task2 proj12task1a proj11task2prop proj21task1propa proj11task2a proj22task2prop proj21task1prop proj11task2propa proj21task2prop proj11task1 proj22task1 proj12task2propa proj22task2propa proj22task1a proj22task1propa proj11task1propa proj12task2a proj21task2 proj11task1a proj21task1 proj21task2propa proj22task1prop proj12task1prop proj21task1a proj11task1prop proj22task2}, type in {task}; {setSchedule }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj11task2 proj21task2a proj22task2a proj12task2 proj12task1a proj11task2prop proj21task1propa proj11task2a proj22task2prop proj21task1prop proj11task2propa proj21task2prop proj11task1 proj22task1 proj12task2propa proj22task2propa proj22task1a proj22task1propa proj11task1propa proj12task2a proj21task2 proj11task1a proj21task1 proj21task2propa proj22task1prop proj12task1prop proj21task1a proj11task1prop proj22task2}, type in {task}; {setSchedule }; projects ] project)
2.rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {false}, rid in {proj12task1}, type in {task}; {setSchedule }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj11task2 proj21task2a proj22task2a proj12task2 proj12task1 proj11task2prop proj12task1a proj21task1propa proj11task2a proj22task2prop proj21task1prop proj11task2propa proj21task2prop proj11task1 proj22task1 proj12task2propa proj22task2propa proj22task1propa proj22task1a proj11task1propa proj12task2a proj21task2 proj21task1 proj11task1a proj21task2propa proj12task1prop proj22task1prop proj11task1prop proj21task1a proj22task2}, type in {task}; {setSchedule }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj11task2 proj21task2a proj22task2a proj12task2 proj12task1 proj11task2prop proj12task1a proj21task1propa proj11task2a proj22task2prop proj21task1prop proj11task2propa proj21task2prop proj11task1 proj22task1 proj12task2propa proj22task2propa proj22task1propa proj22task1a proj11task1propa proj12task2a proj21task2 proj21task1 proj11task1a proj21task2propa proj12task1prop proj22task1prop proj11task1prop proj21task1a proj22task2}, type in {task}; {setSchedule }; projects ] project)
2.rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{coding}}, proprietary in {true}, rid in {proj12task2prop}, type in {task}; {setSchedule }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj11task2 proj21task2a proj22task2a proj12task2 proj12task1 proj12task1a proj11task2prop proj21task1propa proj11task2a proj22task2prop proj21task1prop proj11task2propa proj21task2prop proj11task1 proj22task1 proj12task2propa proj22task2propa proj12task2prop proj22task1a proj22task1propa proj11task1propa proj12task2a proj21task2 proj11task1a proj21task1 proj21task2propa proj22task1prop proj12task1prop proj21task1a proj11task1prop proj22task2}, type in {task}; {setSchedule }; projects ] project)
Merging two rules:
1.rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj11task2 proj21task2a proj22task2a proj12task2 proj12task1 proj12task1a proj11task2prop proj21task1propa proj11task2a proj22task2prop proj21task1prop proj11task2propa proj21task2prop proj11task1 proj22task1 proj12task2propa proj22task2propa proj12task2prop proj22task1a proj22task1propa proj11task1propa proj12task2a proj21task2 proj11task1a proj21task1 proj21task2propa proj22task1prop proj12task1prop proj21task1a proj11task1prop proj22task2}, type in {task}; {setSchedule }; projects ] project)
2.rule(adminRoles supseteqln {{planner}}; department in {dept1}, expertise supseteqln {{design}}, proprietary in {true}, rid in {proj12task1propa}, type in {task}; {setSchedule }; projects ] project)
==============================================
Result Rule rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj11task2 proj21task2a proj22task2a proj12task2 proj12task1 proj11task2prop proj12task1a proj12task1propa proj21task1propa proj11task2a proj22task2prop proj21task1prop proj11task2propa proj21task2prop proj11task1 proj22task1 proj12task2propa proj22task2propa proj22task1propa proj22task1a proj12task2prop proj11task1propa proj12task2a proj21task2 proj21task1 proj11task1a proj21task2propa proj12task1prop proj22task1prop proj11task1prop proj21task1a proj22task2}, type in {task}; {setSchedule }; projects ] project)
==============================================
Round 1
1.
rule(projectsLed supseteqln {{proj11}}; type in {schedule}; {read }; department=department, projects ] project)
2.
rule(; type in {budget schedule}; {write read }; department=department, projects ] project, projectsLed ] project)
3.
rule(uid in {des22 code22 code21 code12 code11 des21 des11 plan2 plan1 des12 acc2 acc1 aud1 aud2}; department in {dept2 dept1}, type in {schedule}; {read }; projects ] project)
4.
rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, type in {schedule}; {write read }; projects ] project)
5.
rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, type in {budget}; {write read }; projects ] project)
6.
rule(adminRoles supseteqln {{auditor} {accountant}}; department in {dept2 dept1}, type in {budget}; {read }; projects ] project)
7.
rule(isEmployee in {True}; department in {dept2 dept1}, proprietary in {false true}, type in {task}; {request read setStatus }; expertise > expertise, projects ] project, tasks ] rid)
8.
rule(isEmployee in {False}; department in {dept2 dept1}, proprietary in {false}, type in {task}; {request read setStatus }; expertise > expertise, projects ] project, tasks ] rid)
9.
rule(adminRoles supseteqln {{manager}}; project in {proj11 proj12 proj22 proj21}, type in {budget}; {approve read }; department=department)
10.
rule(isEmployee in {False}; department in {dept2 dept1}, proprietary in {true}, type in {task}; {setStatus }; expertise > expertise, projects ] project, tasks ] rid)
11.
rule(isEmployee in {True False}, tasks supseteqln {{proj12task1a proj12task1propa} {proj11task2a proj11task2propa} {proj22task2a proj22task2propa} {proj21task1a proj21task1propa} {proj11task1a proj11task1propa} {proj12task2propa proj12task2a} {proj22task1a proj22task1propa} {proj21task2a proj21task2propa}}; department in {dept2 dept1}, proprietary in {false true}, rid in {proj11task2 proj22task1 proj12task2 proj21task2 proj12task1 proj21task1 proj11task2prop proj21task1prop proj21task2prop proj11task1prop proj11task1 proj22task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
12.
rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj11task2 proj21task2a proj22task2a proj12task2 proj12task1 proj11task2prop proj12task1a proj12task1propa proj21task1propa proj11task2a proj22task2prop proj21task1prop proj11task2propa proj21task2prop proj11task1 proj22task1 proj12task2propa proj22task2propa proj22task1a proj12task2prop proj22task1propa proj11task1propa proj12task2a proj21task2 proj11task1a proj21task1 proj21task2propa proj22task1prop proj12task1prop proj21task1a proj11task1prop proj22task2}, type in {task}; {setCost }; projects ] project)
13.
rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj11task2 proj21task2a proj22task2a proj12task2 proj12task1 proj11task2prop proj12task1a proj12task1propa proj21task1propa proj11task2a proj22task2prop proj21task1prop proj11task2propa proj21task2prop proj11task1 proj22task1 proj12task2propa proj22task2propa proj22task1propa proj22task1a proj12task2prop proj11task1propa proj12task2a proj21task2 proj21task1 proj11task1a proj21task2propa proj12task1prop proj22task1prop proj11task1prop proj21task1a proj22task2}, type in {task}; {setSchedule }; projects ] project)
==============================================
Time for the mergeRules: 643 millisec
==============================================
Eliminating Conjuncts for:
rule(projectsLed supseteqln {{proj11}}; type in {schedule}; {read }; department=department, projects ] project)
==============================================
Eliminating Conjuncts for:
rule(; type in {budget schedule}; {write read }; department=department, projects ] project, projectsLed ] project)
==============================================
Eliminating Conjuncts for:
rule(uid in {des22 code22 code21 code12 code11 des21 des11 plan2 plan1 des12 acc2 acc1 aud1 aud2}; department in {dept2 dept1}, type in {schedule}; {read }; projects ] project)
==============================================
Eliminating Conjuncts for:
rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, type in {schedule}; {write read }; projects ] project)
==============================================
Eliminating Conjuncts for:
rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, type in {budget}; {write read }; projects ] project)
==============================================
Eliminating Conjuncts for:
rule(adminRoles supseteqln {{auditor} {accountant}}; department in {dept2 dept1}, type in {budget}; {read }; projects ] project)
==============================================
Eliminating Conjuncts for:
rule(isEmployee in {True}; department in {dept2 dept1}, proprietary in {false true}, type in {task}; {request read setStatus }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Eliminating Conjuncts for:
rule(isEmployee in {False}; department in {dept2 dept1}, proprietary in {false}, type in {task}; {request read setStatus }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Eliminating Conjuncts for:
rule(adminRoles supseteqln {{manager}}; project in {proj11 proj12 proj22 proj21}, type in {budget}; {approve read }; department=department)
==============================================
Eliminating Conjuncts for:
rule(isEmployee in {False}; department in {dept2 dept1}, proprietary in {true}, type in {task}; {setStatus }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Eliminating Conjuncts for:
rule(isEmployee in {True False}, tasks supseteqln {{proj12task1a proj12task1propa} {proj11task2a proj11task2propa} {proj22task2a proj22task2propa} {proj21task1a proj21task1propa} {proj11task1a proj11task1propa} {proj12task2propa proj12task2a} {proj22task1a proj22task1propa} {proj21task2a proj21task2propa}}; department in {dept2 dept1}, proprietary in {false true}, rid in {proj11task2 proj22task1 proj12task2 proj21task2 proj12task1 proj21task1 proj11task2prop proj21task1prop proj21task2prop proj11task1prop proj11task1 proj22task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Eliminating Conjuncts for:
rule(adminRoles supseteqln {{accountant}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {false true}, rid in {proj11task2 proj21task2a proj22task2a proj12task2 proj12task1 proj11task2prop proj12task1a proj12task1propa proj21task1propa proj11task2a proj22task2prop proj21task1prop proj11task2propa proj21task2prop proj11task1 proj22task1 proj12task2propa proj22task2propa proj22task1a proj12task2prop proj22task1propa proj11task1propa proj12task2a proj21task2 proj11task1a proj21task1 proj21task2propa proj22task1prop proj12task1prop proj21task1a proj11task1prop proj22task2}, type in {task}; {setCost }; projects ] project)
==============================================
Eliminating Conjuncts for:
rule(adminRoles supseteqln {{planner}}; department in {dept2 dept1}, expertise supseteqln {{design} {coding}}, proprietary in {true false}, rid in {proj11task2 proj21task2a proj22task2a proj12task2 proj12task1 proj11task2prop proj12task1a proj12task1propa proj21task1propa proj11task2a proj22task2prop proj21task1prop proj11task2propa proj21task2prop proj11task1 proj22task1 proj12task2propa proj22task2propa proj22task1propa proj22task1a proj12task2prop proj11task1propa proj12task2a proj21task2 proj21task1 proj11task1a proj21task2propa proj12task1prop proj22task1prop proj11task1prop proj21task1a proj22task2}, type in {task}; {setSchedule }; projects ] project)
==============================================
Eliminating Overlap Elements for:
rule(; type in {schedule}; {read }; department=department, projects ] project)
==============================================
Removing schedule from PAE of 
rule(; type in {schedule}; {read }; department=department, projects ] project)because of 
rule(; type in {schedule}; {read }; projects ] project)
==============================================
Removing Rule rule(; type in {}; {read }; department=department, projects ] project)
==============================================
Eliminating Overlap Elements for:
rule(; type in {budget schedule}; {write read }; department=department, projects ] project, projectsLed ] project)
==============================================
Eliminating Overlap Elements for:
rule(; type in {schedule}; {read }; projects ] project)
==============================================
Eliminating Overlap Elements for:
rule(adminRoles supseteqln {{planner}}; type in {schedule}; {write read }; projects ] project)
==============================================
Eliminating Overlap Elements for:
rule(adminRoles supseteqln {{accountant}}; type in {budget}; {write read }; projects ] project)
==============================================
Eliminating Overlap Elements for:
rule(adminRoles supseteqln {{auditor} {accountant}}; type in {budget}; {read }; projects ] project)
==============================================
Removing [accountant] from UAE of 
rule(adminRoles supseteqln {{auditor} {accountant}}; type in {budget}; {read }; projects ] project)because of 
rule(adminRoles supseteqln {{accountant}}; type in {budget}; {write read }; projects ] project)
==============================================
Eliminating Overlap Elements for:
rule(isEmployee in {True}; type in {task}; {request read setStatus }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Eliminating Overlap Elements for:
rule(; proprietary in {false}, type in {task}; {request read setStatus }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Eliminating Overlap Elements for:
rule(adminRoles supseteqln {{manager}}; type in {budget}; {approve read }; department=department)
==============================================
Eliminating Overlap Elements for:
rule(; type in {task}; {setStatus }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Eliminating Overlap Elements for:
rule(; rid in {proj11task2 proj22task1 proj12task2 proj12task1 proj11task2prop proj21task2 proj21task1 proj21task1prop proj21task2prop proj11task1prop proj11task1 proj22task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Eliminating Overlap Elements for:
rule(adminRoles supseteqln {{accountant}}; type in {task}; {setCost }; projects ] project)
==============================================
Eliminating Overlap Elements for:
rule(adminRoles supseteqln {{planner}}; type in {task}; {setSchedule }; projects ] project)
==============================================
Eliminating Elements for:
rule(; type in {budget schedule}; {write read }; department=department, projects ] project, projectsLed ] project)
==============================================
Eliminating Elements for:
rule(; type in {schedule}; {read }; projects ] project)
==============================================
Eliminating Elements for:
rule(adminRoles supseteqln {{planner}}; type in {schedule}; {write read }; projects ] project)
==============================================
Eliminating Elements for:
rule(adminRoles supseteqln {{accountant}}; type in {budget}; {write read }; projects ] project)
==============================================
Eliminating Elements for:
rule(adminRoles supseteqln {{auditor}}; type in {budget}; {read }; projects ] project)
==============================================
Eliminating Elements for:
rule(isEmployee in {True}; type in {task}; {request read setStatus }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Eliminating Elements for:
rule(; proprietary in {false}, type in {task}; {request read setStatus }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Eliminating Elements for:
rule(adminRoles supseteqln {{manager}}; type in {budget}; {approve read }; department=department)
==============================================
Eliminating Elements for:
rule(; type in {task}; {setStatus }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Eliminating Elements for:
rule(; rid in {proj11task2 proj22task1 proj12task2 proj12task1 proj11task2prop proj21task2 proj21task1 proj21task1prop proj21task2prop proj11task1prop proj11task1 proj22task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Eliminating Elements for:
rule(adminRoles supseteqln {{accountant}}; type in {task}; {setCost }; projects ] project)
==============================================
Eliminating Elements for:
rule(adminRoles supseteqln {{planner}}; type in {task}; {setSchedule }; projects ] project)
==============================================
Eliminating Overlap Ops for:
rule(; type in {budget schedule}; {write read }; department=department, projects ] project, projectsLed ] project)
==============================================
Eliminating Overlap Ops for:
rule(; type in {schedule}; {read }; projects ] project)
==============================================
Eliminating Overlap Ops for:
rule(adminRoles supseteqln {{planner}}; type in {schedule}; {write read }; projects ] project)
==============================================
Eliminating Overlap Ops for:
rule(adminRoles supseteqln {{accountant}}; type in {budget}; {write read }; projects ] project)
==============================================
Eliminating Overlap Ops for:
rule(adminRoles supseteqln {{auditor}}; type in {budget}; {read }; projects ] project)
==============================================
Eliminating Overlap Ops for:
rule(isEmployee in {True}; type in {task}; {request read setStatus }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Eliminating Overlap Ops for:
rule(; proprietary in {false}, type in {task}; {request read setStatus }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Eliminating Overlap Ops for:
rule(adminRoles supseteqln {{manager}}; type in {budget}; {approve read }; department=department)
==============================================
Eliminating Overlap Ops for:
rule(; type in {task}; {setStatus }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Eliminating Overlap Ops for:
rule(; rid in {proj11task2 proj22task1 proj12task2 proj12task1 proj11task2prop proj21task2 proj21task1 proj21task1prop proj21task2prop proj11task1prop proj11task1 proj22task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Eliminating Overlap Ops for:
rule(adminRoles supseteqln {{accountant}}; type in {task}; {setCost }; projects ] project)
==============================================
Eliminating Overlap Ops for:
rule(adminRoles supseteqln {{planner}}; type in {task}; {setSchedule }; projects ] project)
==============================================
Eliminating Constraints for:
rule(; type in {budget schedule}; {write read }; department=department, projects ] project, projectsLed ] project)
==============================================
Eliminating Constraints for:
rule(; type in {schedule}; {read }; projects ] project)
==============================================
Eliminating Constraints for:
rule(adminRoles supseteqln {{planner}}; type in {schedule}; {write }; projects ] project)
==============================================
Eliminating Constraints for:
rule(adminRoles supseteqln {{accountant}}; type in {budget}; {write read }; projects ] project)
==============================================
Eliminating Constraints for:
rule(adminRoles supseteqln {{auditor}}; type in {budget}; {read }; projects ] project)
==============================================
Eliminating Constraints for:
rule(isEmployee in {True}; type in {task}; {request read }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Eliminating Constraints for:
rule(; proprietary in {false}, type in {task}; {request read }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Eliminating Constraints for:
rule(adminRoles supseteqln {{manager}}; type in {budget}; {approve read }; department=department)
==============================================
Eliminating Constraints for:
rule(; type in {task}; {setStatus }; expertise > expertise, projects ] project, tasks ] rid)
==============================================
Eliminating Constraints for:
rule(; rid in {proj11task2 proj22task1 proj12task2 proj12task1 proj11task2prop proj21task2 proj21task1 proj21task1prop proj21task2prop proj11task1prop proj11task1 proj22task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Eliminating Constraints for:
rule(adminRoles supseteqln {{accountant}}; type in {task}; {setCost }; projects ] project)
==============================================
Eliminating Constraints for:
rule(adminRoles supseteqln {{planner}}; type in {task}; {setSchedule }; projects ] project)
==============================================
Time for simplifyRules Round: 1 57 millisec
==============================================
Round 2
1.
rule(; type in {budget schedule}; {write read }; projectsLed ] project)
2.
rule(; type in {schedule}; {read }; projects ] project)
3.
rule(adminRoles supseteqln {{planner}}; type in {schedule}; {write }; projects ] project)
4.
rule(adminRoles supseteqln {{accountant}}; type in {budget}; {write read }; projects ] project)
5.
rule(adminRoles supseteqln {{auditor}}; type in {budget}; {read }; projects ] project)
6.
rule(isEmployee in {True}; type in {task}; {request read }; expertise > expertise, projects ] project)
7.
rule(; proprietary in {false}, type in {task}; {request read }; expertise > expertise, projects ] project)
8.
rule(adminRoles supseteqln {{manager}}; type in {budget}; {approve read }; department=department)
9.
rule(; type in {task}; {setStatus }; tasks ] rid)
10.
rule(; rid in {proj11task2 proj22task1 proj12task2 proj12task1 proj11task2prop proj21task2 proj21task1 proj21task1prop proj21task2prop proj11task1prop proj11task1 proj22task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
11.
rule(adminRoles supseteqln {{accountant}}; type in {task}; {setCost }; projects ] project)
12.
rule(adminRoles supseteqln {{planner}}; type in {task}; {setSchedule }; projects ] project)
==============================================
Time for mergeRules Round: 2 4 millisec
==============================================
Eliminating Conjuncts for:
rule(; type in {budget schedule}; {write read }; projectsLed ] project)
==============================================
Eliminating Conjuncts for:
rule(; type in {schedule}; {read }; projects ] project)
==============================================
Eliminating Conjuncts for:
rule(adminRoles supseteqln {{planner}}; type in {schedule}; {write }; projects ] project)
==============================================
Eliminating Conjuncts for:
rule(adminRoles supseteqln {{accountant}}; type in {budget}; {write read }; projects ] project)
==============================================
Eliminating Conjuncts for:
rule(adminRoles supseteqln {{auditor}}; type in {budget}; {read }; projects ] project)
==============================================
Eliminating Conjuncts for:
rule(isEmployee in {True}; type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Eliminating Conjuncts for:
rule(; proprietary in {false}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Eliminating Conjuncts for:
rule(adminRoles supseteqln {{manager}}; type in {budget}; {approve read }; department=department)
==============================================
Eliminating Conjuncts for:
rule(; type in {task}; {setStatus }; tasks ] rid)
==============================================
Eliminating Conjuncts for:
rule(; rid in {proj11task2 proj22task1 proj12task2 proj12task1 proj11task2prop proj21task2 proj21task1 proj21task1prop proj21task2prop proj11task1prop proj11task1 proj22task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Eliminating Conjuncts for:
rule(adminRoles supseteqln {{accountant}}; type in {task}; {setCost }; projects ] project)
==============================================
Eliminating Conjuncts for:
rule(adminRoles supseteqln {{planner}}; type in {task}; {setSchedule }; projects ] project)
==============================================
Eliminating Overlap Elements for:
rule(; type in {budget schedule}; {write read }; projectsLed ] project)
==============================================
Eliminating Overlap Elements for:
rule(; type in {schedule}; {read }; projects ] project)
==============================================
Eliminating Overlap Elements for:
rule(adminRoles supseteqln {{planner}}; type in {schedule}; {write }; projects ] project)
==============================================
Eliminating Overlap Elements for:
rule(adminRoles supseteqln {{accountant}}; type in {budget}; {write read }; projects ] project)
==============================================
Eliminating Overlap Elements for:
rule(adminRoles supseteqln {{auditor}}; type in {budget}; {read }; projects ] project)
==============================================
Eliminating Overlap Elements for:
rule(isEmployee in {True}; type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Eliminating Overlap Elements for:
rule(; proprietary in {false}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Eliminating Overlap Elements for:
rule(adminRoles supseteqln {{manager}}; type in {budget}; {approve read }; department=department)
==============================================
Eliminating Overlap Elements for:
rule(; type in {task}; {setStatus }; tasks ] rid)
==============================================
Eliminating Overlap Elements for:
rule(; rid in {proj11task2 proj22task1 proj12task2 proj12task1 proj11task2prop proj21task2 proj21task1 proj21task1prop proj21task2prop proj11task1prop proj11task1 proj22task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Eliminating Overlap Elements for:
rule(adminRoles supseteqln {{accountant}}; type in {task}; {setCost }; projects ] project)
==============================================
Eliminating Overlap Elements for:
rule(adminRoles supseteqln {{planner}}; type in {task}; {setSchedule }; projects ] project)
==============================================
Eliminating Elements for:
rule(; type in {budget schedule}; {write read }; projectsLed ] project)
==============================================
Eliminating Elements for:
rule(; type in {schedule}; {read }; projects ] project)
==============================================
Eliminating Elements for:
rule(adminRoles supseteqln {{planner}}; type in {schedule}; {write }; projects ] project)
==============================================
Eliminating Elements for:
rule(adminRoles supseteqln {{accountant}}; type in {budget}; {write read }; projects ] project)
==============================================
Eliminating Elements for:
rule(adminRoles supseteqln {{auditor}}; type in {budget}; {read }; projects ] project)
==============================================
Eliminating Elements for:
rule(isEmployee in {True}; type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Eliminating Elements for:
rule(; proprietary in {false}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Eliminating Elements for:
rule(adminRoles supseteqln {{manager}}; type in {budget}; {approve read }; department=department)
==============================================
Eliminating Elements for:
rule(; type in {task}; {setStatus }; tasks ] rid)
==============================================
Eliminating Elements for:
rule(; rid in {proj11task2 proj22task1 proj12task2 proj12task1 proj11task2prop proj21task2 proj21task1 proj21task1prop proj21task2prop proj11task1prop proj11task1 proj22task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Eliminating Elements for:
rule(adminRoles supseteqln {{accountant}}; type in {task}; {setCost }; projects ] project)
==============================================
Eliminating Elements for:
rule(adminRoles supseteqln {{planner}}; type in {task}; {setSchedule }; projects ] project)
==============================================
Eliminating Overlap Ops for:
rule(; type in {budget schedule}; {write read }; projectsLed ] project)
==============================================
Eliminating Overlap Ops for:
rule(; type in {schedule}; {read }; projects ] project)
==============================================
Eliminating Overlap Ops for:
rule(adminRoles supseteqln {{planner}}; type in {schedule}; {write }; projects ] project)
==============================================
Eliminating Overlap Ops for:
rule(adminRoles supseteqln {{accountant}}; type in {budget}; {write read }; projects ] project)
==============================================
Eliminating Overlap Ops for:
rule(adminRoles supseteqln {{auditor}}; type in {budget}; {read }; projects ] project)
==============================================
Eliminating Overlap Ops for:
rule(isEmployee in {True}; type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Eliminating Overlap Ops for:
rule(; proprietary in {false}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Eliminating Overlap Ops for:
rule(adminRoles supseteqln {{manager}}; type in {budget}; {approve read }; department=department)
==============================================
Eliminating Overlap Ops for:
rule(; type in {task}; {setStatus }; tasks ] rid)
==============================================
Eliminating Overlap Ops for:
rule(; rid in {proj11task2 proj22task1 proj12task2 proj12task1 proj11task2prop proj21task2 proj21task1 proj21task1prop proj21task2prop proj11task1prop proj11task1 proj22task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Eliminating Overlap Ops for:
rule(adminRoles supseteqln {{accountant}}; type in {task}; {setCost }; projects ] project)
==============================================
Eliminating Overlap Ops for:
rule(adminRoles supseteqln {{planner}}; type in {task}; {setSchedule }; projects ] project)
==============================================
Eliminating Constraints for:
rule(; type in {budget schedule}; {write read }; projectsLed ] project)
==============================================
Eliminating Constraints for:
rule(; type in {schedule}; {read }; projects ] project)
==============================================
Eliminating Constraints for:
rule(adminRoles supseteqln {{planner}}; type in {schedule}; {write }; projects ] project)
==============================================
Eliminating Constraints for:
rule(adminRoles supseteqln {{accountant}}; type in {budget}; {write read }; projects ] project)
==============================================
Eliminating Constraints for:
rule(adminRoles supseteqln {{auditor}}; type in {budget}; {read }; projects ] project)
==============================================
Eliminating Constraints for:
rule(isEmployee in {True}; type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Eliminating Constraints for:
rule(; proprietary in {false}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Eliminating Constraints for:
rule(adminRoles supseteqln {{manager}}; type in {budget}; {approve read }; department=department)
==============================================
Eliminating Constraints for:
rule(; type in {task}; {setStatus }; tasks ] rid)
==============================================
Eliminating Constraints for:
rule(; rid in {proj11task2 proj22task1 proj12task2 proj12task1 proj11task2prop proj21task2 proj21task1 proj21task1prop proj21task2prop proj11task1prop proj11task1 proj22task2}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Eliminating Constraints for:
rule(adminRoles supseteqln {{accountant}}; type in {task}; {setCost }; projects ] project)
==============================================
Eliminating Constraints for:
rule(adminRoles supseteqln {{planner}}; type in {task}; {setSchedule }; projects ] project)
==============================================
Adding Rule: 
rule(; type in {schedule}; {read }; projects ] project)
==============================================
Adding Rule: 
rule(adminRoles supseteqln {{accountant}}; type in {task}; {setCost }; projects ] project)
==============================================
Adding Rule: 
rule(adminRoles supseteqln {{planner}}; type in {task}; {setSchedule }; projects ] project)
==============================================
Adding Rule: 
rule(isEmployee in {True}; type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Adding Rule: 
rule(; type in {task}; {setStatus }; tasks ] rid)
==============================================
Adding Rule: 
rule(; proprietary in {false}, type in {task}; {request read }; expertise > expertise, projects ] project)
==============================================
Adding Rule: 
rule(; type in {budget schedule}; {write read }; projectsLed ] project)
==============================================
Adding Rule: 
rule(adminRoles supseteqln {{accountant}}; type in {budget}; {write read }; projects ] project)
==============================================
Adding Rule: 
rule(adminRoles supseteqln {{manager}}; type in {budget}; {approve read }; department=department)
==============================================
Adding Rule: 
rule(adminRoles supseteqln {{planner}}; type in {schedule}; {write }; projects ] project)
==============================================
Adding Rule: 
rule(adminRoles supseteqln {{auditor}}; type in {budget}; {read }; projects ] project)
==============================================
Time for selection step:  42 millisec
==============================================
OUTPUT RULES

1.
rule(; type in {schedule}; {read }; projects ] project)
WSC=3.0
2.
rule(adminRoles supseteqln {{accountant}}; type in {task}; {setCost }; projects ] project)
WSC=4.0
3.
rule(adminRoles supseteqln {{planner}}; type in {task}; {setSchedule }; projects ] project)
WSC=4.0
4.
rule(isEmployee in {True}; type in {task}; {request read }; expertise > expertise, projects ] project)
WSC=6.0
5.
rule(; type in {task}; {setStatus }; tasks ] rid)
WSC=3.0
6.
rule(; proprietary in {false}, type in {task}; {request read }; expertise > expertise, projects ] project)
WSC=6.0
7.
rule(; type in {budget schedule}; {write read }; projectsLed ] project)
WSC=5.0
8.
rule(adminRoles supseteqln {{accountant}}; type in {budget}; {write read }; projects ] project)
WSC=5.0
9.
rule(adminRoles supseteqln {{manager}}; type in {budget}; {approve read }; department=department)
WSC=5.0
10.
rule(adminRoles supseteqln {{planner}}; type in {schedule}; {write }; projects ] project)
WSC=4.0
11.
rule(adminRoles supseteqln {{auditor}}; type in {budget}; {read }; projects ] project)
WSC=4.0

total WSC=49
==============================================
INPUT-OUTPUT CORRESPONDENCE
1. rule(adminRoles supseteqln {{manager}}; type in {budget}; {approve read }; department=department)
SIMILAR OUTPUT RULES:
rule(adminRoles supseteqln {{manager}}; type in {budget}; {approve read }; department=department), similarity: 1.00

2. rule(; type in {budget schedule}; {write read }; projectsLed ] project)
SIMILAR OUTPUT RULES:
rule(; type in {budget schedule}; {write read }; projectsLed ] project), similarity: 1.00

3. rule(; type in {schedule}; {read }; projects ] project)
SIMILAR OUTPUT RULES:
rule(; type in {schedule}; {read }; projects ] project), similarity: 1.00

4. rule(; type in {task}; {setStatus }; tasks ] rid)
SIMILAR OUTPUT RULES:
rule(; type in {task}; {setStatus }; tasks ] rid), similarity: 1.00

5. rule(; type in {task}, proprietary in {false}; {request read }; projects ] project, expertise > expertise)
SIMILAR OUTPUT RULES:
rule(; proprietary in {false}, type in {task}; {request read }; expertise > expertise, projects ] project), similarity: 1.00

6. rule(isEmployee in {True}; type in {task}; {request read }; projects ] project, expertise > expertise)
SIMILAR OUTPUT RULES:
rule(isEmployee in {True}; type in {task}; {request read }; expertise > expertise, projects ] project), similarity: 1.00

7. rule(adminRoles supseteqln {{auditor}}; type in {budget}; {read }; projects ] project)
SIMILAR OUTPUT RULES:
rule(adminRoles supseteqln {{auditor}}; type in {budget}; {read }; projects ] project), similarity: 1.00

8. rule(adminRoles supseteqln {{accountant}}; type in {budget}; {write read }; projects ] project)
SIMILAR OUTPUT RULES:
rule(adminRoles supseteqln {{accountant}}; type in {budget}; {write read }; projects ] project), similarity: 1.00

9. rule(adminRoles supseteqln {{accountant}}; type in {task}; {setCost }; projects ] project)
SIMILAR OUTPUT RULES:
rule(adminRoles supseteqln {{accountant}}; type in {task}; {setCost }; projects ] project), similarity: 1.00

10. rule(adminRoles supseteqln {{planner}}; type in {schedule}; {write }; projects ] project)
SIMILAR OUTPUT RULES:
rule(adminRoles supseteqln {{planner}}; type in {schedule}; {write }; projects ] project), similarity: 1.00

11. rule(adminRoles supseteqln {{planner}}; type in {task}; {setSchedule }; projects ] project)
SIMILAR OUTPUT RULES:
rule(adminRoles supseteqln {{planner}}; type in {task}; {setSchedule }; projects ] project), similarity: 1.00

==============================================
Consistency Check Result:
true
==============================================
Statistics:
Number of calls to mergeRules: 2
Number of generalizations: 266
Number of merges: 86
Number of eliminated conjuncts: 26
Number of eliminated values: 0
Number of eliminated elements for multi-value: 5
Number of eliminated constraints: 0
Number of subsumption checks: 2
Number of unsuccessful merges: 864
Number of removed pairs: 0
Number of extra compares: 1083
==============================================
Remaining time: 17 millisec
11 11 49.0 506.0 189 49.0 1401
