==============================================
Select an uncovered user-permission tuple:
<u,p>=<admissions2,(read,eeStu1application)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (read,eeStu1application) is uncovered and that have the same candidate constraint as admissions2
[admissions2]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}, uid in {admissions2}]
==============================================
Result of computePAE:
[student in {eeStu1}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}, uid in {admissions2}; student in {eeStu1}, type in {application}; {read }; )
==============================================
Remove UP Set: [(admissions2,read,eeStu1application)]
==============================================
Remaining Uncovered UP Size: 167
==============================================
The set of perms which admissions2 is uncovered and that have the same candidate constraint as (read,eeStu1application)
[read, setStatus]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}, uid in {admissions2}]
==============================================
Result of computePAE:
[student in {eeStu1}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}, uid in {admissions2}; student in {eeStu1}, type in {application}; {read setStatus }; )
==============================================
Remaining Uncovered UP Size: 166
==============================================
Select an uncovered user-permission tuple:
<u,p>=<csStu2,(addScore,cs101gradebook)>
==============================================
Candidate constraint:
[crsTaught ] crs, department=department]
==============================================
The set of users which (addScore,cs101gradebook) is uncovered and that have the same candidate constraint as csStu2
[csStu2]
==============================================
Result of computeUAE:
[position in {student}, department in {cs}, crsTaken supseteqln {{cs601}}, crsTaught supseteqln {{cs602 cs101}}]
==============================================
Result of computePAE:
[crs in {cs101}, department in {cs}, type in {gradebook}]
==============================================
Generalized Rule: 
rule(position in {student}, crsTaken supseteqln {{cs601}}; type in {gradebook}; {addScore }; crsTaught ] crs, department=department)
==============================================
Remove UP Set: [(csStu2,addScore,cs602gradebook), (csStu2,addScore,cs101gradebook)]
==============================================
Remaining Uncovered UP Size: 164
==============================================
The set of perms which csStu2 is uncovered and that have the same candidate constraint as (addScore,cs101gradebook)
[readScore, addScore]
==============================================
Result of computeUAE:
[position in {student}, department in {cs}, crsTaken supseteqln {{cs601}}, crsTaught supseteqln {{cs602 cs101}}]
==============================================
Result of computePAE:
[crs in {cs101}, department in {cs}, type in {gradebook}]
==============================================
Generalized Rule: 
rule(position in {student}, crsTaken supseteqln {{cs601}}; type in {gradebook}; {readScore addScore }; crsTaught ] crs, department=department)
==============================================
Remaining Uncovered UP Size: 162
==============================================
Select an uncovered user-permission tuple:
<u,p>=<admissions2,(setStatus,eeStu2application)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (setStatus,eeStu2application) is uncovered and that have the same candidate constraint as admissions2
[admissions2]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}, uid in {admissions2}]
==============================================
Result of computePAE:
[student in {eeStu2}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}, uid in {admissions2}; student in {eeStu2}, type in {application}; {setStatus }; )
==============================================
Remove UP Set: [(admissions2,setStatus,eeStu2application)]
==============================================
Remaining Uncovered UP Size: 161
==============================================
The set of perms which admissions2 is uncovered and that have the same candidate constraint as (setStatus,eeStu2application)
[read, setStatus]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}, uid in {admissions2}]
==============================================
Result of computePAE:
[student in {eeStu2}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}, uid in {admissions2}; student in {eeStu2}, type in {application}; {read setStatus }; )
==============================================
Remaining Uncovered UP Size: 160
==============================================
Select an uncovered user-permission tuple:
<u,p>=<csFac1,(readScore,cs101gradebook)>
==============================================
Candidate constraint:
[crsTaught ] crs, department=department]
==============================================
The set of users which (readScore,cs101gradebook) is uncovered and that have the same candidate constraint as csFac1
[csFac1, csStu2]
==============================================
Removed Sets for UAE crsTaught supseteqln {{cs602 cs101} {cs101}}
[[cs602, cs101]]
==============================================
Result of computeUAE:
[position in {student faculty}, department in {cs}, crsTaught supseteqln {{cs101}}]
==============================================
Result of computePAE:
[crs in {cs101}, department in {cs}, type in {gradebook}]
==============================================
Generalized Rule: 
rule(position in {student faculty}; type in {gradebook}; {readScore }; crsTaught ] crs, department=department)
==============================================
Remove UP Set: [(csStu2,readScore,cs101gradebook), (csStu3,readScore,cs601gradebook), (eeStu3,readScore,ee601gradebook), (eeStu2,readScore,ee101gradebook), (csStu2,readScore,cs602gradebook), (eeFac2,readScore,ee601gradebook), (eeStu2,readScore,ee602gradebook), (csFac1,readScore,cs101gradebook), (csFac2,readScore,cs601gradebook), (eeFac1,readScore,ee101gradebook)]
==============================================
Remaining Uncovered UP Size: 152
==============================================
The set of perms which csFac1 is uncovered and that have the same candidate constraint as (readScore,cs101gradebook)
[readScore, assignGrade, addScore, changeScore]
==============================================
Result of computeUAE:
[position in {faculty}, department in {cs}, crsTaught supseteqln {{cs101}}]
==============================================
Result of computePAE:
[crs in {cs101}, department in {cs}, type in {gradebook}]
==============================================
Generalized Rule: 
rule(position in {faculty}; type in {gradebook}; {readScore assignGrade addScore changeScore }; crsTaught ] crs, department=department)
==============================================
Remaining Uncovered UP Size: 140
==============================================
Select an uncovered user-permission tuple:
<u,p>=<admissions1,(read,eeStu4application)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (read,eeStu4application) is uncovered and that have the same candidate constraint as admissions1
[admissions1, admissions2]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}]
==============================================
Result of computePAE:
[student in {eeStu4}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}; student in {eeStu4}, type in {application}; {read }; )
==============================================
Remove UP Set: [(admissions2,read,eeStu4application), (admissions1,read,eeStu4application)]
==============================================
Remaining Uncovered UP Size: 138
==============================================
The set of perms which admissions1 is uncovered and that have the same candidate constraint as (read,eeStu4application)
[read, setStatus]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}, uid in {admissions1}]
==============================================
Result of computePAE:
[student in {eeStu4}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}, uid in {admissions1}; student in {eeStu4}, type in {application}; {read setStatus }; )
==============================================
Remaining Uncovered UP Size: 137
==============================================
Select an uncovered user-permission tuple:
<u,p>=<csFac2,(read,cs601roster)>
==============================================
Candidate constraint:
[crsTaught ] crs, department=department]
==============================================
The set of users which (read,cs601roster) is uncovered and that have the same candidate constraint as csFac2
[csFac2]
==============================================
Result of computeUAE:
[position in {faculty}, department in {cs}, crsTaught supseteqln {{cs601}}]
==============================================
Result of computePAE:
[crs in {cs601}, department in {cs}, type in {roster}]
==============================================
Generalized Rule: 
rule(position in {faculty}; type in {roster}; {read }; crsTaught ] crs, department=department)
==============================================
Remove UP Set: [(eeFac1,read,ee101roster), (eeFac2,read,ee601roster), (csFac1,read,cs101roster), (csFac2,read,cs601roster)]
==============================================
Remaining Uncovered UP Size: 133
==============================================
The set of perms which csFac2 is uncovered and that have the same candidate constraint as (read,cs601roster)
[read]
==============================================
Result of computeUAE:
[position in {faculty}, department in {cs}, crsTaught supseteqln {{cs601}}]
==============================================
Result of computePAE:
[crs in {cs601}, department in {cs}, type in {roster}]
==============================================
Generalized Rule: 
rule(position in {faculty}; type in {roster}; {read }; crsTaught ] crs, department=department)
==============================================
Remaining Uncovered UP Size: 133
==============================================
Select an uncovered user-permission tuple:
<u,p>=<registrar2,(read,csStu2trans)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (read,csStu2trans) is uncovered and that have the same candidate constraint as registrar2
[registrar1, registrar2]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}]
==============================================
Result of computePAE:
[student in {csStu2}, department in {cs}, type in {transcript}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}; student in {csStu2}, department in {cs}, type in {transcript}; {read }; )
==============================================
Remove UP Set: [(registrar1,read,csStu2trans), (registrar2,read,csStu2trans)]
==============================================
Remaining Uncovered UP Size: 131
==============================================
The set of perms which registrar2 is uncovered and that have the same candidate constraint as (read,csStu2trans)
[read]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}, uid in {registrar2}]
==============================================
Result of computePAE:
[student in {csStu2}, department in {cs}, type in {transcript}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}, uid in {registrar2}; student in {csStu2}, department in {cs}, type in {transcript}; {read }; )
==============================================
Remaining Uncovered UP Size: 131
==============================================
Select an uncovered user-permission tuple:
<u,p>=<registrar2,(write,cs601roster)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (write,cs601roster) is uncovered and that have the same candidate constraint as registrar2
[registrar2]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}, uid in {registrar2}]
==============================================
Result of computePAE:
[crs in {cs601}, department in {cs}, type in {roster}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}, uid in {registrar2}; crs in {cs601}, department in {cs}, type in {roster}; {write }; )
==============================================
Remove UP Set: [(registrar2,write,cs601roster)]
==============================================
Remaining Uncovered UP Size: 130
==============================================
The set of perms which registrar2 is uncovered and that have the same candidate constraint as (write,cs601roster)
[write, read]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}, uid in {registrar2}]
==============================================
Result of computePAE:
[crs in {cs601}, department in {cs}, type in {roster}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}, uid in {registrar2}; crs in {cs601}, department in {cs}, type in {roster}; {write read }; )
==============================================
Remaining Uncovered UP Size: 129
==============================================
Select an uncovered user-permission tuple:
<u,p>=<eeStu2,(checkStatus,eeStu2application)>
==============================================
Candidate constraint:
[uid=student]
==============================================
The set of users which (checkStatus,eeStu2application) is uncovered and that have the same candidate constraint as eeStu2
[eeStu2]
==============================================
Result of computeUAE:
[position in {student}, department in {ee}, crsTaken supseteqln {{ee601}}, crsTaught supseteqln {{ee101 ee602}}]
==============================================
Result of computePAE:
[student in {eeStu2}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {student}, department in {ee}, crsTaken supseteqln {{ee601}}, crsTaught supseteqln {{ee101 ee602}}; type in {application}; {checkStatus }; uid=student)
==============================================
Remove UP Set: [(eeStu2,checkStatus,eeStu2application)]
==============================================
Remaining Uncovered UP Size: 128
==============================================
The set of perms which eeStu2 is uncovered and that have the same candidate constraint as (checkStatus,eeStu2application)
[checkStatus]
==============================================
Result of computeUAE:
[position in {student}, department in {ee}, crsTaken supseteqln {{ee601}}, crsTaught supseteqln {{ee101 ee602}}]
==============================================
Result of computePAE:
[student in {eeStu2}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {student}, department in {ee}, crsTaken supseteqln {{ee601}}, crsTaught supseteqln {{ee101 ee602}}; type in {application}; {checkStatus }; uid=student)
==============================================
Remaining Uncovered UP Size: 128
==============================================
Select an uncovered user-permission tuple:
<u,p>=<eeStu4,(read,eeStu4trans)>
==============================================
Candidate constraint:
[department=department, uid=student]
==============================================
The set of users which (read,eeStu4trans) is uncovered and that have the same candidate constraint as eeStu4
[eeStu4]
==============================================
Result of computeUAE:
[position in {student}, department in {ee}, crsTaken supseteqln {{ee601}}, uid in {eeStu4}]
==============================================
Result of computePAE:
[student in {eeStu4}, department in {ee}, type in {transcript}]
==============================================
Generalized Rule: 
rule(position in {student}, crsTaken supseteqln {{ee601}}; type in {transcript}; {read }; department=department, uid=student)
==============================================
Remove UP Set: [(eeStu4,read,eeStu4trans), (eeStu5,read,eeStu5trans), (eeStu2,read,eeStu2trans)]
==============================================
Remaining Uncovered UP Size: 125
==============================================
The set of perms which eeStu4 is uncovered and that have the same candidate constraint as (read,eeStu4trans)
[read]
==============================================
Result of computeUAE:
[position in {student}, department in {ee}, crsTaken supseteqln {{ee601}}, uid in {eeStu4}]
==============================================
Result of computePAE:
[student in {eeStu4}, department in {ee}, type in {transcript}]
==============================================
Generalized Rule: 
rule(position in {student}, crsTaken supseteqln {{ee601}}; type in {transcript}; {read }; department=department, uid=student)
==============================================
Remaining Uncovered UP Size: 125
==============================================
Select an uncovered user-permission tuple:
<u,p>=<eeStu4,(readMyScores,ee601gradebook)>
==============================================
Candidate constraint:
[crsTaken ] crs, department=department]
==============================================
The set of users which (readMyScores,ee601gradebook) is uncovered and that have the same candidate constraint as eeStu4
[eeStu4, eeStu5, eeStu2]
==============================================
Removed Sets for UAE crsTaken supseteqln {{ee601} {ee601 ee602}}
[[ee601, ee602]]
==============================================
Result of computeUAE:
[position in {student}, department in {ee}, crsTaken supseteqln {{ee601}}]
==============================================
Result of computePAE:
[crs in {ee601}, department in {ee}, type in {gradebook}]
==============================================
Generalized Rule: 
rule(position in {student}; type in {gradebook}; {readMyScores }; crsTaken ] crs, department=department)
==============================================
Remove UP Set: [(eeStu5,readMyScores,ee601gradebook), (csStu3,readMyScores,cs602gradebook), (csStu5,readMyScores,cs601gradebook), (csStu5,readMyScores,cs602gradebook), (eeStu4,readMyScores,ee601gradebook), (eeStu1,readMyScores,ee101gradebook), (csStu4,readMyScores,cs601gradebook), (csStu2,readMyScores,cs601gradebook), (eeStu2,readMyScores,ee601gradebook), (csStu1,readMyScores,cs101gradebook), (eeStu3,readMyScores,ee602gradebook), (eeStu5,readMyScores,ee602gradebook)]
==============================================
Remaining Uncovered UP Size: 113
==============================================
The set of perms which eeStu4 is uncovered and that have the same candidate constraint as (readMyScores,ee601gradebook)
[readMyScores]
==============================================
Result of computeUAE:
[position in {student}, department in {ee}, crsTaken supseteqln {{ee601}}, uid in {eeStu4}]
==============================================
Result of computePAE:
[crs in {ee601}, department in {ee}, type in {gradebook}]
==============================================
Generalized Rule: 
rule(position in {student}, uid in {eeStu4}; type in {gradebook}; {readMyScores }; crsTaken ] crs, department=department)
==============================================
Remaining Uncovered UP Size: 113
==============================================
Select an uncovered user-permission tuple:
<u,p>=<csChair,(read,csStu3trans)>
==============================================
Candidate constraint:
[department=department]
==============================================
The set of users which (read,csStu3trans) is uncovered and that have the same candidate constraint as csChair
[csChair]
==============================================
Result of computeUAE:
[department in {cs}, isChair in {true}]
==============================================
Result of computePAE:
[student in {csStu3}, department in {cs}, type in {transcript}]
==============================================
Generalized Rule: 
rule(isChair in {true}; student in {csStu3}, type in {transcript}; {read }; department=department)
==============================================
Remove UP Set: [(csChair,read,csStu3trans)]
==============================================
Remaining Uncovered UP Size: 112
==============================================
The set of perms which csChair is uncovered and that have the same candidate constraint as (read,csStu3trans)
[read]
==============================================
Result of computeUAE:
[department in {cs}, isChair in {true}]
==============================================
Result of computePAE:
[student in {csStu3}, department in {cs}, type in {transcript}]
==============================================
Generalized Rule: 
rule(isChair in {true}; student in {csStu3}, type in {transcript}; {read }; department=department)
==============================================
Remaining Uncovered UP Size: 112
==============================================
Select an uncovered user-permission tuple:
<u,p>=<registrar1,(read,csStu4trans)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (read,csStu4trans) is uncovered and that have the same candidate constraint as registrar1
[registrar1, registrar2]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}]
==============================================
Result of computePAE:
[student in {csStu4}, department in {cs}, type in {transcript}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}; student in {csStu4}, department in {cs}, type in {transcript}; {read }; )
==============================================
Remove UP Set: [(registrar1,read,csStu4trans), (registrar2,read,csStu4trans)]
==============================================
Remaining Uncovered UP Size: 110
==============================================
The set of perms which registrar1 is uncovered and that have the same candidate constraint as (read,csStu4trans)
[read]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}, uid in {registrar1}]
==============================================
Result of computePAE:
[student in {csStu4}, department in {cs}, type in {transcript}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}, uid in {registrar1}; student in {csStu4}, department in {cs}, type in {transcript}; {read }; )
==============================================
Remaining Uncovered UP Size: 110
==============================================
Select an uncovered user-permission tuple:
<u,p>=<registrar2,(write,cs101roster)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (write,cs101roster) is uncovered and that have the same candidate constraint as registrar2
[registrar2]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}, uid in {registrar2}]
==============================================
Result of computePAE:
[crs in {cs101}, department in {cs}, type in {roster}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}, uid in {registrar2}; crs in {cs101}, department in {cs}, type in {roster}; {write }; )
==============================================
Remove UP Set: [(registrar2,write,cs101roster)]
==============================================
Remaining Uncovered UP Size: 109
==============================================
The set of perms which registrar2 is uncovered and that have the same candidate constraint as (write,cs101roster)
[write, read]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}, uid in {registrar2}]
==============================================
Result of computePAE:
[crs in {cs101}, department in {cs}, type in {roster}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}, uid in {registrar2}; crs in {cs101}, department in {cs}, type in {roster}; {write read }; )
==============================================
Remaining Uncovered UP Size: 108
==============================================
Select an uncovered user-permission tuple:
<u,p>=<registrar2,(write,cs602roster)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (write,cs602roster) is uncovered and that have the same candidate constraint as registrar2
[registrar2]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}, uid in {registrar2}]
==============================================
Result of computePAE:
[crs in {cs602}, department in {cs}, type in {roster}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}, uid in {registrar2}; crs in {cs602}, department in {cs}, type in {roster}; {write }; )
==============================================
Remove UP Set: [(registrar2,write,cs602roster)]
==============================================
Remaining Uncovered UP Size: 107
==============================================
The set of perms which registrar2 is uncovered and that have the same candidate constraint as (write,cs602roster)
[write, read]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}, uid in {registrar2}]
==============================================
Result of computePAE:
[crs in {cs602}, department in {cs}, type in {roster}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}, uid in {registrar2}; crs in {cs602}, department in {cs}, type in {roster}; {write read }; )
==============================================
Remaining Uncovered UP Size: 106
==============================================
Select an uncovered user-permission tuple:
<u,p>=<registrar1,(read,eeStu2trans)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (read,eeStu2trans) is uncovered and that have the same candidate constraint as registrar1
[registrar1, registrar2]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}]
==============================================
Result of computePAE:
[student in {eeStu2}, department in {ee}, type in {transcript}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}; student in {eeStu2}, department in {ee}, type in {transcript}; {read }; )
==============================================
Remove UP Set: [(registrar2,read,eeStu2trans), (registrar1,read,eeStu2trans)]
==============================================
Remaining Uncovered UP Size: 104
==============================================
The set of perms which registrar1 is uncovered and that have the same candidate constraint as (read,eeStu2trans)
[read]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}, uid in {registrar1}]
==============================================
Result of computePAE:
[student in {eeStu2}, department in {ee}, type in {transcript}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}, uid in {registrar1}; student in {eeStu2}, department in {ee}, type in {transcript}; {read }; )
==============================================
Remaining Uncovered UP Size: 104
==============================================
Select an uncovered user-permission tuple:
<u,p>=<csStu2,(checkStatus,csStu2application)>
==============================================
Candidate constraint:
[uid=student]
==============================================
The set of users which (checkStatus,csStu2application) is uncovered and that have the same candidate constraint as csStu2
[csStu2]
==============================================
Result of computeUAE:
[position in {student}, department in {cs}, crsTaken supseteqln {{cs601}}, crsTaught supseteqln {{cs602 cs101}}]
==============================================
Result of computePAE:
[student in {csStu2}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {student}, department in {cs}, crsTaken supseteqln {{cs601}}, crsTaught supseteqln {{cs602 cs101}}; type in {application}; {checkStatus }; uid=student)
==============================================
Remove UP Set: [(csStu2,checkStatus,csStu2application)]
==============================================
Remaining Uncovered UP Size: 103
==============================================
The set of perms which csStu2 is uncovered and that have the same candidate constraint as (checkStatus,csStu2application)
[checkStatus]
==============================================
Result of computeUAE:
[position in {student}, department in {cs}, crsTaken supseteqln {{cs601}}, crsTaught supseteqln {{cs602 cs101}}]
==============================================
Result of computePAE:
[student in {csStu2}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {student}, department in {cs}, crsTaken supseteqln {{cs601}}, crsTaught supseteqln {{cs602 cs101}}; type in {application}; {checkStatus }; uid=student)
==============================================
Remaining Uncovered UP Size: 103
==============================================
Select an uncovered user-permission tuple:
<u,p>=<csStu3,(checkStatus,csStu3application)>
==============================================
Candidate constraint:
[uid=student]
==============================================
The set of users which (checkStatus,csStu3application) is uncovered and that have the same candidate constraint as csStu3
[csStu3]
==============================================
Result of computeUAE:
[position in {student}, department in {cs}, crsTaken supseteqln {{cs602}}, crsTaught supseteqln {{cs601}}]
==============================================
Result of computePAE:
[student in {csStu3}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {student}, department in {cs}, crsTaken supseteqln {{cs602}}, crsTaught supseteqln {{cs601}}; type in {application}; {checkStatus }; uid=student)
==============================================
Remove UP Set: [(csStu3,checkStatus,csStu3application)]
==============================================
Remaining Uncovered UP Size: 102
==============================================
The set of perms which csStu3 is uncovered and that have the same candidate constraint as (checkStatus,csStu3application)
[checkStatus]
==============================================
Result of computeUAE:
[position in {student}, department in {cs}, crsTaken supseteqln {{cs602}}, crsTaught supseteqln {{cs601}}]
==============================================
Result of computePAE:
[student in {csStu3}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {student}, department in {cs}, crsTaken supseteqln {{cs602}}, crsTaught supseteqln {{cs601}}; type in {application}; {checkStatus }; uid=student)
==============================================
Remaining Uncovered UP Size: 102
==============================================
Select an uncovered user-permission tuple:
<u,p>=<eeStu2,(addScore,ee602gradebook)>
==============================================
Candidate constraint:
[crsTaught ] crs, department=department]
==============================================
The set of users which (addScore,ee602gradebook) is uncovered and that have the same candidate constraint as eeStu2
[eeStu2]
==============================================
Result of computeUAE:
[position in {student}, department in {ee}, crsTaken supseteqln {{ee601}}, crsTaught supseteqln {{ee101 ee602}}]
==============================================
Result of computePAE:
[crs in {ee602}, department in {ee}, type in {gradebook}]
==============================================
Generalized Rule: 
rule(position in {student}, crsTaken supseteqln {{ee601}}; type in {gradebook}; {addScore }; crsTaught ] crs, department=department)
==============================================
Remove UP Set: [(eeStu2,addScore,ee101gradebook), (eeStu2,addScore,ee602gradebook)]
==============================================
Remaining Uncovered UP Size: 100
==============================================
The set of perms which eeStu2 is uncovered and that have the same candidate constraint as (addScore,ee602gradebook)
[readScore, addScore]
==============================================
Result of computeUAE:
[position in {student}, department in {ee}, crsTaken supseteqln {{ee601}}, crsTaught supseteqln {{ee101 ee602}}]
==============================================
Result of computePAE:
[crs in {ee602}, department in {ee}, type in {gradebook}]
==============================================
Generalized Rule: 
rule(position in {student}, crsTaken supseteqln {{ee601}}; type in {gradebook}; {readScore addScore }; crsTaught ] crs, department=department)
==============================================
Remaining Uncovered UP Size: 100
==============================================
Select an uncovered user-permission tuple:
<u,p>=<eeStu1,(read,eeStu1trans)>
==============================================
Candidate constraint:
[department=department, uid=student]
==============================================
The set of users which (read,eeStu1trans) is uncovered and that have the same candidate constraint as eeStu1
[eeStu1]
==============================================
Result of computeUAE:
[position in {student}, department in {ee}, crsTaken supseteqln {{ee101}}]
==============================================
Result of computePAE:
[student in {eeStu1}, department in {ee}, type in {transcript}]
==============================================
Generalized Rule: 
rule(position in {student}, crsTaken supseteqln {{ee101}}; type in {transcript}; {read }; department=department, uid=student)
==============================================
Remove UP Set: [(eeStu1,read,eeStu1trans)]
==============================================
Remaining Uncovered UP Size: 99
==============================================
The set of perms which eeStu1 is uncovered and that have the same candidate constraint as (read,eeStu1trans)
[read]
==============================================
Result of computeUAE:
[position in {student}, department in {ee}, crsTaken supseteqln {{ee101}}]
==============================================
Result of computePAE:
[student in {eeStu1}, department in {ee}, type in {transcript}]
==============================================
Generalized Rule: 
rule(position in {student}, crsTaken supseteqln {{ee101}}; type in {transcript}; {read }; department=department, uid=student)
==============================================
Remaining Uncovered UP Size: 99
==============================================
Select an uncovered user-permission tuple:
<u,p>=<registrar1,(read,ee101roster)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (read,ee101roster) is uncovered and that have the same candidate constraint as registrar1
[registrar1, registrar2]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}]
==============================================
Result of computePAE:
[crs in {ee101}, department in {ee}, type in {roster}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}; crs in {ee101}, department in {ee}, type in {roster}; {read }; )
==============================================
Remove UP Set: [(registrar1,read,ee101roster), (registrar2,read,ee101roster)]
==============================================
Remaining Uncovered UP Size: 97
==============================================
The set of perms which registrar1 is uncovered and that have the same candidate constraint as (read,ee101roster)
[write, read]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}, uid in {registrar1}]
==============================================
Result of computePAE:
[crs in {ee101}, department in {ee}, type in {roster}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}, uid in {registrar1}; crs in {ee101}, department in {ee}, type in {roster}; {write read }; )
==============================================
Remaining Uncovered UP Size: 96
==============================================
Select an uncovered user-permission tuple:
<u,p>=<eeChair,(read,eeStu2trans)>
==============================================
Candidate constraint:
[department=department]
==============================================
The set of users which (read,eeStu2trans) is uncovered and that have the same candidate constraint as eeChair
[eeChair]
==============================================
Result of computeUAE:
[department in {ee}, isChair in {true}]
==============================================
Result of computePAE:
[student in {eeStu2}, department in {ee}, type in {transcript}]
==============================================
Generalized Rule: 
rule(isChair in {true}; student in {eeStu2}, type in {transcript}; {read }; department=department)
==============================================
Remove UP Set: [(eeChair,read,eeStu2trans)]
==============================================
Remaining Uncovered UP Size: 95
==============================================
The set of perms which eeChair is uncovered and that have the same candidate constraint as (read,eeStu2trans)
[read]
==============================================
Result of computeUAE:
[department in {ee}, isChair in {true}]
==============================================
Result of computePAE:
[student in {eeStu2}, department in {ee}, type in {transcript}]
==============================================
Generalized Rule: 
rule(isChair in {true}; student in {eeStu2}, type in {transcript}; {read }; department=department)
==============================================
Remaining Uncovered UP Size: 95
==============================================
Select an uncovered user-permission tuple:
<u,p>=<eeStu3,(read,eeStu3trans)>
==============================================
Candidate constraint:
[department=department, uid=student]
==============================================
The set of users which (read,eeStu3trans) is uncovered and that have the same candidate constraint as eeStu3
[eeStu3]
==============================================
Result of computeUAE:
[position in {student}, department in {ee}, crsTaken supseteqln {{ee602}}, crsTaught supseteqln {{ee601}}]
==============================================
Result of computePAE:
[student in {eeStu3}, department in {ee}, type in {transcript}]
==============================================
Generalized Rule: 
rule(position in {student}, crsTaken supseteqln {{ee602}}, crsTaught supseteqln {{ee601}}; type in {transcript}; {read }; department=department, uid=student)
==============================================
Remove UP Set: [(eeStu3,read,eeStu3trans)]
==============================================
Remaining Uncovered UP Size: 94
==============================================
The set of perms which eeStu3 is uncovered and that have the same candidate constraint as (read,eeStu3trans)
[read]
==============================================
Result of computeUAE:
[position in {student}, department in {ee}, crsTaken supseteqln {{ee602}}, crsTaught supseteqln {{ee601}}]
==============================================
Result of computePAE:
[student in {eeStu3}, department in {ee}, type in {transcript}]
==============================================
Generalized Rule: 
rule(position in {student}, crsTaken supseteqln {{ee602}}, crsTaught supseteqln {{ee601}}; type in {transcript}; {read }; department=department, uid=student)
==============================================
Remaining Uncovered UP Size: 94
==============================================
Select an uncovered user-permission tuple:
<u,p>=<csStu5,(checkStatus,csStu5application)>
==============================================
Candidate constraint:
[uid=student]
==============================================
The set of users which (checkStatus,csStu5application) is uncovered and that have the same candidate constraint as csStu5
[csStu5]
==============================================
Result of computeUAE:
[position in {student}, department in {cs}, crsTaken supseteqln {{cs602 cs601}}]
==============================================
Result of computePAE:
[student in {csStu5}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {student}, department in {cs}, crsTaken supseteqln {{cs602 cs601}}; type in {application}; {checkStatus }; uid=student)
==============================================
Remove UP Set: [(csStu5,checkStatus,csStu5application)]
==============================================
Remaining Uncovered UP Size: 93
==============================================
The set of perms which csStu5 is uncovered and that have the same candidate constraint as (checkStatus,csStu5application)
[checkStatus]
==============================================
Result of computeUAE:
[position in {student}, department in {cs}, crsTaken supseteqln {{cs602 cs601}}]
==============================================
Result of computePAE:
[student in {csStu5}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {student}, department in {cs}, crsTaken supseteqln {{cs602 cs601}}; type in {application}; {checkStatus }; uid=student)
==============================================
Remaining Uncovered UP Size: 93
==============================================
Select an uncovered user-permission tuple:
<u,p>=<csStu4,(checkStatus,csStu4application)>
==============================================
Candidate constraint:
[uid=student]
==============================================
The set of users which (checkStatus,csStu4application) is uncovered and that have the same candidate constraint as csStu4
[csStu4]
==============================================
Result of computeUAE:
[position in {student}, department in {cs}, crsTaken supseteqln {{cs601}}, uid in {csStu4}]
==============================================
Result of computePAE:
[student in {csStu4}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {student}, department in {cs}, crsTaken supseteqln {{cs601}}; type in {application}; {checkStatus }; uid=student)
==============================================
Remove UP Set: [(csStu5,checkStatus,csStu5application), (csStu2,checkStatus,csStu2application), (csStu4,checkStatus,csStu4application)]
==============================================
Remaining Uncovered UP Size: 92
==============================================
The set of perms which csStu4 is uncovered and that have the same candidate constraint as (checkStatus,csStu4application)
[checkStatus]
==============================================
Result of computeUAE:
[position in {student}, department in {cs}, crsTaken supseteqln {{cs601}}, uid in {csStu4}]
==============================================
Result of computePAE:
[student in {csStu4}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {student}, department in {cs}, crsTaken supseteqln {{cs601}}; type in {application}; {checkStatus }; uid=student)
==============================================
Remaining Uncovered UP Size: 92
==============================================
Select an uncovered user-permission tuple:
<u,p>=<registrar1,(read,ee602roster)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (read,ee602roster) is uncovered and that have the same candidate constraint as registrar1
[registrar1, registrar2]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}]
==============================================
Result of computePAE:
[crs in {ee602}, department in {ee}, type in {roster}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}; crs in {ee602}, department in {ee}, type in {roster}; {read }; )
==============================================
Remove UP Set: [(registrar2,read,ee602roster), (registrar1,read,ee602roster)]
==============================================
Remaining Uncovered UP Size: 90
==============================================
The set of perms which registrar1 is uncovered and that have the same candidate constraint as (read,ee602roster)
[write, read]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}, uid in {registrar1}]
==============================================
Result of computePAE:
[crs in {ee602}, department in {ee}, type in {roster}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}, uid in {registrar1}; crs in {ee602}, department in {ee}, type in {roster}; {write read }; )
==============================================
Remaining Uncovered UP Size: 89
==============================================
Select an uncovered user-permission tuple:
<u,p>=<admissions1,(read,csStu5application)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (read,csStu5application) is uncovered and that have the same candidate constraint as admissions1
[admissions1, admissions2]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}]
==============================================
Result of computePAE:
[student in {csStu5}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}; student in {csStu5}, type in {application}; {read }; )
==============================================
Remove UP Set: [(admissions1,read,csStu5application), (admissions2,read,csStu5application)]
==============================================
Remaining Uncovered UP Size: 87
==============================================
The set of perms which admissions1 is uncovered and that have the same candidate constraint as (read,csStu5application)
[read, setStatus]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}, uid in {admissions1}]
==============================================
Result of computePAE:
[student in {csStu5}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}, uid in {admissions1}; student in {csStu5}, type in {application}; {read setStatus }; )
==============================================
Remaining Uncovered UP Size: 86
==============================================
Select an uncovered user-permission tuple:
<u,p>=<admissions2,(setStatus,application2)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (setStatus,application2) is uncovered and that have the same candidate constraint as admissions2
[admissions2]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}, uid in {admissions2}]
==============================================
Result of computePAE:
[student in {applicant2}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}, uid in {admissions2}; student in {applicant2}, type in {application}; {setStatus }; )
==============================================
Remove UP Set: [(admissions2,setStatus,application2)]
==============================================
Remaining Uncovered UP Size: 85
==============================================
The set of perms which admissions2 is uncovered and that have the same candidate constraint as (setStatus,application2)
[read, setStatus]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}, uid in {admissions2}]
==============================================
Result of computePAE:
[student in {applicant2}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}, uid in {admissions2}; student in {applicant2}, type in {application}; {read setStatus }; )
==============================================
Remaining Uncovered UP Size: 84
==============================================
Select an uncovered user-permission tuple:
<u,p>=<csStu2,(read,csStu2trans)>
==============================================
Candidate constraint:
[department=department, uid=student]
==============================================
The set of users which (read,csStu2trans) is uncovered and that have the same candidate constraint as csStu2
[csStu2]
==============================================
Result of computeUAE:
[position in {student}, department in {cs}, crsTaken supseteqln {{cs601}}, crsTaught supseteqln {{cs602 cs101}}]
==============================================
Result of computePAE:
[student in {csStu2}, department in {cs}, type in {transcript}]
==============================================
Generalized Rule: 
rule(position in {student}, crsTaken supseteqln {{cs601}}, crsTaught supseteqln {{cs602 cs101}}; type in {transcript}; {read }; department=department, uid=student)
==============================================
Remove UP Set: [(csStu2,read,csStu2trans)]
==============================================
Remaining Uncovered UP Size: 83
==============================================
The set of perms which csStu2 is uncovered and that have the same candidate constraint as (read,csStu2trans)
[read]
==============================================
Result of computeUAE:
[position in {student}, department in {cs}, crsTaken supseteqln {{cs601}}, crsTaught supseteqln {{cs602 cs101}}]
==============================================
Result of computePAE:
[student in {csStu2}, department in {cs}, type in {transcript}]
==============================================
Generalized Rule: 
rule(position in {student}, crsTaken supseteqln {{cs601}}, crsTaught supseteqln {{cs602 cs101}}; type in {transcript}; {read }; department=department, uid=student)
==============================================
Remaining Uncovered UP Size: 83
==============================================
Select an uncovered user-permission tuple:
<u,p>=<admissions2,(setStatus,application1)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (setStatus,application1) is uncovered and that have the same candidate constraint as admissions2
[admissions2]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}, uid in {admissions2}]
==============================================
Result of computePAE:
[student in {applicant1}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}, uid in {admissions2}; student in {applicant1}, type in {application}; {setStatus }; )
==============================================
Remove UP Set: [(admissions2,setStatus,application1)]
==============================================
Remaining Uncovered UP Size: 82
==============================================
The set of perms which admissions2 is uncovered and that have the same candidate constraint as (setStatus,application1)
[read, setStatus]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}, uid in {admissions2}]
==============================================
Result of computePAE:
[student in {applicant1}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}, uid in {admissions2}; student in {applicant1}, type in {application}; {read setStatus }; )
==============================================
Remaining Uncovered UP Size: 81
==============================================
Select an uncovered user-permission tuple:
<u,p>=<csStu1,(read,csStu1trans)>
==============================================
Candidate constraint:
[department=department, uid=student]
==============================================
The set of users which (read,csStu1trans) is uncovered and that have the same candidate constraint as csStu1
[csStu1]
==============================================
Result of computeUAE:
[position in {student}, department in {cs}, crsTaken supseteqln {{cs101}}]
==============================================
Result of computePAE:
[student in {csStu1}, department in {cs}, type in {transcript}]
==============================================
Generalized Rule: 
rule(position in {student}, crsTaken supseteqln {{cs101}}; type in {transcript}; {read }; department=department, uid=student)
==============================================
Remove UP Set: [(csStu1,read,csStu1trans)]
==============================================
Remaining Uncovered UP Size: 80
==============================================
The set of perms which csStu1 is uncovered and that have the same candidate constraint as (read,csStu1trans)
[read]
==============================================
Result of computeUAE:
[position in {student}, department in {cs}, crsTaken supseteqln {{cs101}}]
==============================================
Result of computePAE:
[student in {csStu1}, department in {cs}, type in {transcript}]
==============================================
Generalized Rule: 
rule(position in {student}, crsTaken supseteqln {{cs101}}; type in {transcript}; {read }; department=department, uid=student)
==============================================
Remaining Uncovered UP Size: 80
==============================================
Select an uncovered user-permission tuple:
<u,p>=<admissions2,(read,csStu3application)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (read,csStu3application) is uncovered and that have the same candidate constraint as admissions2
[admissions2]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}, uid in {admissions2}]
==============================================
Result of computePAE:
[student in {csStu3}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}, uid in {admissions2}; student in {csStu3}, type in {application}; {read }; )
==============================================
Remove UP Set: [(admissions2,read,csStu3application)]
==============================================
Remaining Uncovered UP Size: 79
==============================================
The set of perms which admissions2 is uncovered and that have the same candidate constraint as (read,csStu3application)
[read, setStatus]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}, uid in {admissions2}]
==============================================
Result of computePAE:
[student in {csStu3}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}, uid in {admissions2}; student in {csStu3}, type in {application}; {read setStatus }; )
==============================================
Remaining Uncovered UP Size: 78
==============================================
Select an uncovered user-permission tuple:
<u,p>=<admissions1,(read,csStu2application)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (read,csStu2application) is uncovered and that have the same candidate constraint as admissions1
[admissions1, admissions2]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}]
==============================================
Result of computePAE:
[student in {csStu2}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}; student in {csStu2}, type in {application}; {read }; )
==============================================
Remove UP Set: [(admissions1,read,csStu2application), (admissions2,read,csStu2application)]
==============================================
Remaining Uncovered UP Size: 76
==============================================
The set of perms which admissions1 is uncovered and that have the same candidate constraint as (read,csStu2application)
[read, setStatus]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}, uid in {admissions1}]
==============================================
Result of computePAE:
[student in {csStu2}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}, uid in {admissions1}; student in {csStu2}, type in {application}; {read setStatus }; )
==============================================
Remaining Uncovered UP Size: 75
==============================================
Select an uncovered user-permission tuple:
<u,p>=<eeStu4,(checkStatus,eeStu4application)>
==============================================
Candidate constraint:
[uid=student]
==============================================
The set of users which (checkStatus,eeStu4application) is uncovered and that have the same candidate constraint as eeStu4
[eeStu4]
==============================================
Result of computeUAE:
[position in {student}, department in {ee}, crsTaken supseteqln {{ee601}}, uid in {eeStu4}]
==============================================
Result of computePAE:
[student in {eeStu4}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {student}, department in {ee}, crsTaken supseteqln {{ee601}}; type in {application}; {checkStatus }; uid=student)
==============================================
Remove UP Set: [(eeStu2,checkStatus,eeStu2application), (eeStu5,checkStatus,eeStu5application), (eeStu4,checkStatus,eeStu4application)]
==============================================
Remaining Uncovered UP Size: 73
==============================================
The set of perms which eeStu4 is uncovered and that have the same candidate constraint as (checkStatus,eeStu4application)
[checkStatus]
==============================================
Result of computeUAE:
[position in {student}, department in {ee}, crsTaken supseteqln {{ee601}}, uid in {eeStu4}]
==============================================
Result of computePAE:
[student in {eeStu4}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {student}, department in {ee}, crsTaken supseteqln {{ee601}}; type in {application}; {checkStatus }; uid=student)
==============================================
Remaining Uncovered UP Size: 73
==============================================
Select an uncovered user-permission tuple:
<u,p>=<registrar1,(read,ee601roster)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (read,ee601roster) is uncovered and that have the same candidate constraint as registrar1
[registrar1, registrar2]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}]
==============================================
Result of computePAE:
[crs in {ee601}, department in {ee}, type in {roster}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}; crs in {ee601}, department in {ee}, type in {roster}; {read }; )
==============================================
Remove UP Set: [(registrar1,read,ee601roster), (registrar2,read,ee601roster)]
==============================================
Remaining Uncovered UP Size: 71
==============================================
The set of perms which registrar1 is uncovered and that have the same candidate constraint as (read,ee601roster)
[write, read]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}, uid in {registrar1}]
==============================================
Result of computePAE:
[crs in {ee601}, department in {ee}, type in {roster}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}, uid in {registrar1}; crs in {ee601}, department in {ee}, type in {roster}; {write read }; )
==============================================
Remaining Uncovered UP Size: 70
==============================================
Select an uncovered user-permission tuple:
<u,p>=<admissions1,(read,application2)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (read,application2) is uncovered and that have the same candidate constraint as admissions1
[admissions1, admissions2]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}]
==============================================
Result of computePAE:
[student in {applicant2}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}; student in {applicant2}, type in {application}; {read }; )
==============================================
Remove UP Set: [(admissions1,read,application2), (admissions2,read,application2)]
==============================================
Remaining Uncovered UP Size: 69
==============================================
The set of perms which admissions1 is uncovered and that have the same candidate constraint as (read,application2)
[read, setStatus]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}, uid in {admissions1}]
==============================================
Result of computePAE:
[student in {applicant2}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}, uid in {admissions1}; student in {applicant2}, type in {application}; {read setStatus }; )
==============================================
Remaining Uncovered UP Size: 68
==============================================
Select an uncovered user-permission tuple:
<u,p>=<admissions1,(read,application1)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (read,application1) is uncovered and that have the same candidate constraint as admissions1
[admissions1, admissions2]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}]
==============================================
Result of computePAE:
[student in {applicant1}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}; student in {applicant1}, type in {application}; {read }; )
==============================================
Remove UP Set: [(admissions2,read,application1), (admissions1,read,application1)]
==============================================
Remaining Uncovered UP Size: 67
==============================================
The set of perms which admissions1 is uncovered and that have the same candidate constraint as (read,application1)
[read, setStatus]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}, uid in {admissions1}]
==============================================
Result of computePAE:
[student in {applicant1}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}, uid in {admissions1}; student in {applicant1}, type in {application}; {read setStatus }; )
==============================================
Remaining Uncovered UP Size: 66
==============================================
Select an uncovered user-permission tuple:
<u,p>=<admissions2,(setStatus,csStu4application)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (setStatus,csStu4application) is uncovered and that have the same candidate constraint as admissions2
[admissions2]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}, uid in {admissions2}]
==============================================
Result of computePAE:
[student in {csStu4}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}, uid in {admissions2}; student in {csStu4}, type in {application}; {setStatus }; )
==============================================
Remove UP Set: [(admissions2,setStatus,csStu4application)]
==============================================
Remaining Uncovered UP Size: 65
==============================================
The set of perms which admissions2 is uncovered and that have the same candidate constraint as (setStatus,csStu4application)
[read, setStatus]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}, uid in {admissions2}]
==============================================
Result of computePAE:
[student in {csStu4}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}, uid in {admissions2}; student in {csStu4}, type in {application}; {read setStatus }; )
==============================================
Remaining Uncovered UP Size: 64
==============================================
Select an uncovered user-permission tuple:
<u,p>=<admissions1,(read,csStu1application)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (read,csStu1application) is uncovered and that have the same candidate constraint as admissions1
[admissions1, admissions2]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}]
==============================================
Result of computePAE:
[student in {csStu1}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}; student in {csStu1}, type in {application}; {read }; )
==============================================
Remove UP Set: [(admissions2,read,csStu1application), (admissions1,read,csStu1application)]
==============================================
Remaining Uncovered UP Size: 62
==============================================
The set of perms which admissions1 is uncovered and that have the same candidate constraint as (read,csStu1application)
[read, setStatus]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}, uid in {admissions1}]
==============================================
Result of computePAE:
[student in {csStu1}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}, uid in {admissions1}; student in {csStu1}, type in {application}; {read setStatus }; )
==============================================
Remaining Uncovered UP Size: 61
==============================================
Select an uncovered user-permission tuple:
<u,p>=<registrar2,(write,ee101roster)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (write,ee101roster) is uncovered and that have the same candidate constraint as registrar2
[registrar2]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}, uid in {registrar2}]
==============================================
Result of computePAE:
[crs in {ee101}, department in {ee}, type in {roster}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}, uid in {registrar2}; crs in {ee101}, department in {ee}, type in {roster}; {write }; )
==============================================
Remove UP Set: [(registrar2,write,ee101roster)]
==============================================
Remaining Uncovered UP Size: 60
==============================================
The set of perms which registrar2 is uncovered and that have the same candidate constraint as (write,ee101roster)
[write, read]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}, uid in {registrar2}]
==============================================
Result of computePAE:
[crs in {ee101}, department in {ee}, type in {roster}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}, uid in {registrar2}; crs in {ee101}, department in {ee}, type in {roster}; {write read }; )
==============================================
Remaining Uncovered UP Size: 60
==============================================
Select an uncovered user-permission tuple:
<u,p>=<csChair,(read,csStu4trans)>
==============================================
Candidate constraint:
[department=department]
==============================================
The set of users which (read,csStu4trans) is uncovered and that have the same candidate constraint as csChair
[csChair]
==============================================
Result of computeUAE:
[department in {cs}, isChair in {true}]
==============================================
Result of computePAE:
[student in {csStu4}, department in {cs}, type in {transcript}]
==============================================
Generalized Rule: 
rule(isChair in {true}; student in {csStu4}, type in {transcript}; {read }; department=department)
==============================================
Remove UP Set: [(csChair,read,csStu4trans)]
==============================================
Remaining Uncovered UP Size: 59
==============================================
The set of perms which csChair is uncovered and that have the same candidate constraint as (read,csStu4trans)
[read]
==============================================
Result of computeUAE:
[department in {cs}, isChair in {true}]
==============================================
Result of computePAE:
[student in {csStu4}, department in {cs}, type in {transcript}]
==============================================
Generalized Rule: 
rule(isChair in {true}; student in {csStu4}, type in {transcript}; {read }; department=department)
==============================================
Remaining Uncovered UP Size: 59
==============================================
Select an uncovered user-permission tuple:
<u,p>=<eeChair,(read,eeStu4trans)>
==============================================
Candidate constraint:
[department=department]
==============================================
The set of users which (read,eeStu4trans) is uncovered and that have the same candidate constraint as eeChair
[eeChair]
==============================================
Result of computeUAE:
[department in {ee}, isChair in {true}]
==============================================
Result of computePAE:
[student in {eeStu4}, department in {ee}, type in {transcript}]
==============================================
Generalized Rule: 
rule(isChair in {true}; student in {eeStu4}, type in {transcript}; {read }; department=department)
==============================================
Remove UP Set: [(eeChair,read,eeStu4trans)]
==============================================
Remaining Uncovered UP Size: 58
==============================================
The set of perms which eeChair is uncovered and that have the same candidate constraint as (read,eeStu4trans)
[read]
==============================================
Result of computeUAE:
[department in {ee}, isChair in {true}]
==============================================
Result of computePAE:
[student in {eeStu4}, department in {ee}, type in {transcript}]
==============================================
Generalized Rule: 
rule(isChair in {true}; student in {eeStu4}, type in {transcript}; {read }; department=department)
==============================================
Remaining Uncovered UP Size: 58
==============================================
Select an uncovered user-permission tuple:
<u,p>=<registrar1,(read,eeStu3trans)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (read,eeStu3trans) is uncovered and that have the same candidate constraint as registrar1
[registrar1, registrar2]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}]
==============================================
Result of computePAE:
[student in {eeStu3}, department in {ee}, type in {transcript}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}; student in {eeStu3}, department in {ee}, type in {transcript}; {read }; )
==============================================
Remove UP Set: [(registrar2,read,eeStu3trans), (registrar1,read,eeStu3trans)]
==============================================
Remaining Uncovered UP Size: 56
==============================================
The set of perms which registrar1 is uncovered and that have the same candidate constraint as (read,eeStu3trans)
[read]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}, uid in {registrar1}]
==============================================
Result of computePAE:
[student in {eeStu3}, department in {ee}, type in {transcript}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}, uid in {registrar1}; student in {eeStu3}, department in {ee}, type in {transcript}; {read }; )
==============================================
Remaining Uncovered UP Size: 56
==============================================
Select an uncovered user-permission tuple:
<u,p>=<applicant1,(checkStatus,application1)>
==============================================
Candidate constraint:
[uid=student]
==============================================
The set of users which (checkStatus,application1) is uncovered and that have the same candidate constraint as applicant1
[applicant1]
==============================================
Result of computeUAE:
[position in {applicant}, uid in {applicant1}]
==============================================
Result of computePAE:
[student in {applicant1}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {applicant}; type in {application}; {checkStatus }; uid=student)
==============================================
Remove UP Set: [(applicant2,checkStatus,application2), (applicant1,checkStatus,application1)]
==============================================
Remaining Uncovered UP Size: 54
==============================================
The set of perms which applicant1 is uncovered and that have the same candidate constraint as (checkStatus,application1)
[checkStatus]
==============================================
Result of computeUAE:
[position in {applicant}, uid in {applicant1}]
==============================================
Result of computePAE:
[student in {applicant1}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {applicant}; type in {application}; {checkStatus }; uid=student)
==============================================
Remaining Uncovered UP Size: 54
==============================================
Select an uncovered user-permission tuple:
<u,p>=<eeChair,(read,eeStu5trans)>
==============================================
Candidate constraint:
[department=department]
==============================================
The set of users which (read,eeStu5trans) is uncovered and that have the same candidate constraint as eeChair
[eeChair]
==============================================
Result of computeUAE:
[department in {ee}, isChair in {true}]
==============================================
Result of computePAE:
[student in {eeStu5}, department in {ee}, type in {transcript}]
==============================================
Generalized Rule: 
rule(isChair in {true}; student in {eeStu5}, type in {transcript}; {read }; department=department)
==============================================
Remove UP Set: [(eeChair,read,eeStu5trans)]
==============================================
Remaining Uncovered UP Size: 53
==============================================
The set of perms which eeChair is uncovered and that have the same candidate constraint as (read,eeStu5trans)
[read]
==============================================
Result of computeUAE:
[department in {ee}, isChair in {true}]
==============================================
Result of computePAE:
[student in {eeStu5}, department in {ee}, type in {transcript}]
==============================================
Generalized Rule: 
rule(isChair in {true}; student in {eeStu5}, type in {transcript}; {read }; department=department)
==============================================
Remaining Uncovered UP Size: 53
==============================================
Select an uncovered user-permission tuple:
<u,p>=<registrar1,(read,cs602roster)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (read,cs602roster) is uncovered and that have the same candidate constraint as registrar1
[registrar1, registrar2]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}]
==============================================
Result of computePAE:
[crs in {cs602}, department in {cs}, type in {roster}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}; crs in {cs602}, department in {cs}, type in {roster}; {read }; )
==============================================
Remove UP Set: [(registrar1,read,cs602roster), (registrar2,read,cs602roster)]
==============================================
Remaining Uncovered UP Size: 52
==============================================
The set of perms which registrar1 is uncovered and that have the same candidate constraint as (read,cs602roster)
[write, read]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}, uid in {registrar1}]
==============================================
Result of computePAE:
[crs in {cs602}, department in {cs}, type in {roster}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}, uid in {registrar1}; crs in {cs602}, department in {cs}, type in {roster}; {write read }; )
==============================================
Remaining Uncovered UP Size: 51
==============================================
Select an uncovered user-permission tuple:
<u,p>=<registrar1,(read,eeStu4trans)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (read,eeStu4trans) is uncovered and that have the same candidate constraint as registrar1
[registrar1, registrar2]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}]
==============================================
Result of computePAE:
[student in {eeStu4}, department in {ee}, type in {transcript}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}; student in {eeStu4}, department in {ee}, type in {transcript}; {read }; )
==============================================
Remove UP Set: [(registrar1,read,eeStu4trans), (registrar2,read,eeStu4trans)]
==============================================
Remaining Uncovered UP Size: 49
==============================================
The set of perms which registrar1 is uncovered and that have the same candidate constraint as (read,eeStu4trans)
[read]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}, uid in {registrar1}]
==============================================
Result of computePAE:
[student in {eeStu4}, department in {ee}, type in {transcript}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}, uid in {registrar1}; student in {eeStu4}, department in {ee}, type in {transcript}; {read }; )
==============================================
Remaining Uncovered UP Size: 49
==============================================
Select an uncovered user-permission tuple:
<u,p>=<csStu5,(read,csStu5trans)>
==============================================
Candidate constraint:
[department=department, uid=student]
==============================================
The set of users which (read,csStu5trans) is uncovered and that have the same candidate constraint as csStu5
[csStu5]
==============================================
Result of computeUAE:
[position in {student}, department in {cs}, crsTaken supseteqln {{cs602 cs601}}]
==============================================
Result of computePAE:
[student in {csStu5}, department in {cs}, type in {transcript}]
==============================================
Generalized Rule: 
rule(position in {student}, crsTaken supseteqln {{cs602 cs601}}; type in {transcript}; {read }; department=department, uid=student)
==============================================
Remove UP Set: [(csStu5,read,csStu5trans)]
==============================================
Remaining Uncovered UP Size: 48
==============================================
The set of perms which csStu5 is uncovered and that have the same candidate constraint as (read,csStu5trans)
[read]
==============================================
Result of computeUAE:
[position in {student}, department in {cs}, crsTaken supseteqln {{cs602 cs601}}]
==============================================
Result of computePAE:
[student in {csStu5}, department in {cs}, type in {transcript}]
==============================================
Generalized Rule: 
rule(position in {student}, crsTaken supseteqln {{cs602 cs601}}; type in {transcript}; {read }; department=department, uid=student)
==============================================
Remaining Uncovered UP Size: 48
==============================================
Select an uncovered user-permission tuple:
<u,p>=<registrar2,(write,ee601roster)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (write,ee601roster) is uncovered and that have the same candidate constraint as registrar2
[registrar2]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}, uid in {registrar2}]
==============================================
Result of computePAE:
[crs in {ee601}, department in {ee}, type in {roster}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}, uid in {registrar2}; crs in {ee601}, department in {ee}, type in {roster}; {write }; )
==============================================
Remove UP Set: [(registrar2,write,ee601roster)]
==============================================
Remaining Uncovered UP Size: 47
==============================================
The set of perms which registrar2 is uncovered and that have the same candidate constraint as (write,ee601roster)
[write, read]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}, uid in {registrar2}]
==============================================
Result of computePAE:
[crs in {ee601}, department in {ee}, type in {roster}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}, uid in {registrar2}; crs in {ee601}, department in {ee}, type in {roster}; {write read }; )
==============================================
Remaining Uncovered UP Size: 47
==============================================
Select an uncovered user-permission tuple:
<u,p>=<admissions1,(read,csStu3application)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (read,csStu3application) is uncovered and that have the same candidate constraint as admissions1
[admissions1, admissions2]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}]
==============================================
Result of computePAE:
[student in {csStu3}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}; student in {csStu3}, type in {application}; {read }; )
==============================================
Remove UP Set: [(admissions2,read,csStu3application), (admissions1,read,csStu3application)]
==============================================
Remaining Uncovered UP Size: 46
==============================================
The set of perms which admissions1 is uncovered and that have the same candidate constraint as (read,csStu3application)
[read, setStatus]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}, uid in {admissions1}]
==============================================
Result of computePAE:
[student in {csStu3}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}, uid in {admissions1}; student in {csStu3}, type in {application}; {read setStatus }; )
==============================================
Remaining Uncovered UP Size: 45
==============================================
Select an uncovered user-permission tuple:
<u,p>=<csStu3,(read,csStu3trans)>
==============================================
Candidate constraint:
[department=department, uid=student]
==============================================
The set of users which (read,csStu3trans) is uncovered and that have the same candidate constraint as csStu3
[csStu3]
==============================================
Result of computeUAE:
[position in {student}, department in {cs}, crsTaken supseteqln {{cs602}}, crsTaught supseteqln {{cs601}}]
==============================================
Result of computePAE:
[student in {csStu3}, department in {cs}, type in {transcript}]
==============================================
Generalized Rule: 
rule(position in {student}, crsTaken supseteqln {{cs602}}, crsTaught supseteqln {{cs601}}; type in {transcript}; {read }; department=department, uid=student)
==============================================
Remove UP Set: [(csStu3,read,csStu3trans)]
==============================================
Remaining Uncovered UP Size: 44
==============================================
The set of perms which csStu3 is uncovered and that have the same candidate constraint as (read,csStu3trans)
[read]
==============================================
Result of computeUAE:
[position in {student}, department in {cs}, crsTaken supseteqln {{cs602}}, crsTaught supseteqln {{cs601}}]
==============================================
Result of computePAE:
[student in {csStu3}, department in {cs}, type in {transcript}]
==============================================
Generalized Rule: 
rule(position in {student}, crsTaken supseteqln {{cs602}}, crsTaught supseteqln {{cs601}}; type in {transcript}; {read }; department=department, uid=student)
==============================================
Remaining Uncovered UP Size: 44
==============================================
Select an uncovered user-permission tuple:
<u,p>=<registrar1,(read,csStu5trans)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (read,csStu5trans) is uncovered and that have the same candidate constraint as registrar1
[registrar1, registrar2]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}]
==============================================
Result of computePAE:
[student in {csStu5}, department in {cs}, type in {transcript}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}; student in {csStu5}, department in {cs}, type in {transcript}; {read }; )
==============================================
Remove UP Set: [(registrar2,read,csStu5trans), (registrar1,read,csStu5trans)]
==============================================
Remaining Uncovered UP Size: 42
==============================================
The set of perms which registrar1 is uncovered and that have the same candidate constraint as (read,csStu5trans)
[read]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}, uid in {registrar1}]
==============================================
Result of computePAE:
[student in {csStu5}, department in {cs}, type in {transcript}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}, uid in {registrar1}; student in {csStu5}, department in {cs}, type in {transcript}; {read }; )
==============================================
Remaining Uncovered UP Size: 42
==============================================
Select an uncovered user-permission tuple:
<u,p>=<registrar2,(read,csStu3trans)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (read,csStu3trans) is uncovered and that have the same candidate constraint as registrar2
[registrar1, registrar2]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}]
==============================================
Result of computePAE:
[student in {csStu3}, department in {cs}, type in {transcript}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}; student in {csStu3}, department in {cs}, type in {transcript}; {read }; )
==============================================
Remove UP Set: [(registrar2,read,csStu3trans), (registrar1,read,csStu3trans)]
==============================================
Remaining Uncovered UP Size: 40
==============================================
The set of perms which registrar2 is uncovered and that have the same candidate constraint as (read,csStu3trans)
[read]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}, uid in {registrar2}]
==============================================
Result of computePAE:
[student in {csStu3}, department in {cs}, type in {transcript}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}, uid in {registrar2}; student in {csStu3}, department in {cs}, type in {transcript}; {read }; )
==============================================
Remaining Uncovered UP Size: 40
==============================================
Select an uncovered user-permission tuple:
<u,p>=<csStu4,(read,csStu4trans)>
==============================================
Candidate constraint:
[department=department, uid=student]
==============================================
The set of users which (read,csStu4trans) is uncovered and that have the same candidate constraint as csStu4
[csStu4]
==============================================
Result of computeUAE:
[position in {student}, department in {cs}, crsTaken supseteqln {{cs601}}, uid in {csStu4}]
==============================================
Result of computePAE:
[student in {csStu4}, department in {cs}, type in {transcript}]
==============================================
Generalized Rule: 
rule(position in {student}, crsTaken supseteqln {{cs601}}; type in {transcript}; {read }; department=department, uid=student)
==============================================
Remove UP Set: [(csStu2,read,csStu2trans), (csStu4,read,csStu4trans), (csStu5,read,csStu5trans)]
==============================================
Remaining Uncovered UP Size: 39
==============================================
The set of perms which csStu4 is uncovered and that have the same candidate constraint as (read,csStu4trans)
[read]
==============================================
Result of computeUAE:
[position in {student}, department in {cs}, crsTaken supseteqln {{cs601}}, uid in {csStu4}]
==============================================
Result of computePAE:
[student in {csStu4}, department in {cs}, type in {transcript}]
==============================================
Generalized Rule: 
rule(position in {student}, crsTaken supseteqln {{cs601}}; type in {transcript}; {read }; department=department, uid=student)
==============================================
Remaining Uncovered UP Size: 39
==============================================
Select an uncovered user-permission tuple:
<u,p>=<eeStu3,(checkStatus,eeStu3application)>
==============================================
Candidate constraint:
[uid=student]
==============================================
The set of users which (checkStatus,eeStu3application) is uncovered and that have the same candidate constraint as eeStu3
[eeStu3]
==============================================
Result of computeUAE:
[position in {student}, department in {ee}, crsTaken supseteqln {{ee602}}, crsTaught supseteqln {{ee601}}]
==============================================
Result of computePAE:
[student in {eeStu3}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {student}, department in {ee}, crsTaken supseteqln {{ee602}}, crsTaught supseteqln {{ee601}}; type in {application}; {checkStatus }; uid=student)
==============================================
Remove UP Set: [(eeStu3,checkStatus,eeStu3application)]
==============================================
Remaining Uncovered UP Size: 38
==============================================
The set of perms which eeStu3 is uncovered and that have the same candidate constraint as (checkStatus,eeStu3application)
[checkStatus]
==============================================
Result of computeUAE:
[position in {student}, department in {ee}, crsTaken supseteqln {{ee602}}, crsTaught supseteqln {{ee601}}]
==============================================
Result of computePAE:
[student in {eeStu3}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {student}, department in {ee}, crsTaken supseteqln {{ee602}}, crsTaught supseteqln {{ee601}}; type in {application}; {checkStatus }; uid=student)
==============================================
Remaining Uncovered UP Size: 38
==============================================
Select an uncovered user-permission tuple:
<u,p>=<registrar1,(read,cs101roster)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (read,cs101roster) is uncovered and that have the same candidate constraint as registrar1
[registrar1, registrar2]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}]
==============================================
Result of computePAE:
[crs in {cs101}, department in {cs}, type in {roster}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}; crs in {cs101}, department in {cs}, type in {roster}; {read }; )
==============================================
Remove UP Set: [(registrar1,read,cs101roster), (registrar2,read,cs101roster)]
==============================================
Remaining Uncovered UP Size: 37
==============================================
The set of perms which registrar1 is uncovered and that have the same candidate constraint as (read,cs101roster)
[write, read]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}, uid in {registrar1}]
==============================================
Result of computePAE:
[crs in {cs101}, department in {cs}, type in {roster}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}, uid in {registrar1}; crs in {cs101}, department in {cs}, type in {roster}; {write read }; )
==============================================
Remaining Uncovered UP Size: 36
==============================================
Select an uncovered user-permission tuple:
<u,p>=<eeStu3,(addScore,ee601gradebook)>
==============================================
Candidate constraint:
[crsTaught ] crs, department=department]
==============================================
The set of users which (addScore,ee601gradebook) is uncovered and that have the same candidate constraint as eeStu3
[eeStu3]
==============================================
Result of computeUAE:
[position in {student}, department in {ee}, crsTaken supseteqln {{ee602}}, crsTaught supseteqln {{ee601}}]
==============================================
Result of computePAE:
[crs in {ee601}, department in {ee}, type in {gradebook}]
==============================================
Generalized Rule: 
rule(position in {student}, crsTaken supseteqln {{ee602}}; type in {gradebook}; {addScore }; crsTaught ] crs, department=department)
==============================================
Remove UP Set: [(eeStu3,addScore,ee601gradebook)]
==============================================
Remaining Uncovered UP Size: 35
==============================================
The set of perms which eeStu3 is uncovered and that have the same candidate constraint as (addScore,ee601gradebook)
[readScore, addScore]
==============================================
Result of computeUAE:
[position in {student}, department in {ee}, crsTaken supseteqln {{ee602}}, crsTaught supseteqln {{ee601}}]
==============================================
Result of computePAE:
[crs in {ee601}, department in {ee}, type in {gradebook}]
==============================================
Generalized Rule: 
rule(position in {student}, crsTaken supseteqln {{ee602}}; type in {gradebook}; {readScore addScore }; crsTaught ] crs, department=department)
==============================================
Remaining Uncovered UP Size: 35
==============================================
Select an uncovered user-permission tuple:
<u,p>=<registrar1,(read,csStu1trans)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (read,csStu1trans) is uncovered and that have the same candidate constraint as registrar1
[registrar1, registrar2]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}]
==============================================
Result of computePAE:
[student in {csStu1}, department in {cs}, type in {transcript}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}; student in {csStu1}, department in {cs}, type in {transcript}; {read }; )
==============================================
Remove UP Set: [(registrar1,read,csStu1trans), (registrar2,read,csStu1trans)]
==============================================
Remaining Uncovered UP Size: 33
==============================================
The set of perms which registrar1 is uncovered and that have the same candidate constraint as (read,csStu1trans)
[read]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}, uid in {registrar1}]
==============================================
Result of computePAE:
[student in {csStu1}, department in {cs}, type in {transcript}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}, uid in {registrar1}; student in {csStu1}, department in {cs}, type in {transcript}; {read }; )
==============================================
Remaining Uncovered UP Size: 33
==============================================
Select an uncovered user-permission tuple:
<u,p>=<admissions1,(read,eeStu1application)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (read,eeStu1application) is uncovered and that have the same candidate constraint as admissions1
[admissions1, admissions2]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}]
==============================================
Result of computePAE:
[student in {eeStu1}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}; student in {eeStu1}, type in {application}; {read }; )
==============================================
Remove UP Set: [(admissions2,read,eeStu1application), (admissions1,read,eeStu1application)]
==============================================
Remaining Uncovered UP Size: 32
==============================================
The set of perms which admissions1 is uncovered and that have the same candidate constraint as (read,eeStu1application)
[read, setStatus]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}, uid in {admissions1}]
==============================================
Result of computePAE:
[student in {eeStu1}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}, uid in {admissions1}; student in {eeStu1}, type in {application}; {read setStatus }; )
==============================================
Remaining Uncovered UP Size: 31
==============================================
Select an uncovered user-permission tuple:
<u,p>=<eeChair,(read,eeStu1trans)>
==============================================
Candidate constraint:
[department=department]
==============================================
The set of users which (read,eeStu1trans) is uncovered and that have the same candidate constraint as eeChair
[eeChair]
==============================================
Result of computeUAE:
[department in {ee}, isChair in {true}]
==============================================
Result of computePAE:
[student in {eeStu1}, department in {ee}, type in {transcript}]
==============================================
Generalized Rule: 
rule(isChair in {true}; student in {eeStu1}, type in {transcript}; {read }; department=department)
==============================================
Remove UP Set: [(eeChair,read,eeStu1trans)]
==============================================
Remaining Uncovered UP Size: 30
==============================================
The set of perms which eeChair is uncovered and that have the same candidate constraint as (read,eeStu1trans)
[read]
==============================================
Result of computeUAE:
[department in {ee}, isChair in {true}]
==============================================
Result of computePAE:
[student in {eeStu1}, department in {ee}, type in {transcript}]
==============================================
Generalized Rule: 
rule(isChair in {true}; student in {eeStu1}, type in {transcript}; {read }; department=department)
==============================================
Remaining Uncovered UP Size: 30
==============================================
Select an uncovered user-permission tuple:
<u,p>=<admissions1,(setStatus,eeStu5application)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (setStatus,eeStu5application) is uncovered and that have the same candidate constraint as admissions1
[admissions1, admissions2]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}]
==============================================
Result of computePAE:
[student in {eeStu5}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}; student in {eeStu5}, type in {application}; {setStatus }; )
==============================================
Remove UP Set: [(admissions2,setStatus,eeStu5application), (admissions1,setStatus,eeStu5application)]
==============================================
Remaining Uncovered UP Size: 28
==============================================
The set of perms which admissions1 is uncovered and that have the same candidate constraint as (setStatus,eeStu5application)
[read, setStatus]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}, uid in {admissions1}]
==============================================
Result of computePAE:
[student in {eeStu5}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}, uid in {admissions1}; student in {eeStu5}, type in {application}; {read setStatus }; )
==============================================
Remaining Uncovered UP Size: 27
==============================================
Select an uncovered user-permission tuple:
<u,p>=<csStu1,(checkStatus,csStu1application)>
==============================================
Candidate constraint:
[uid=student]
==============================================
The set of users which (checkStatus,csStu1application) is uncovered and that have the same candidate constraint as csStu1
[csStu1]
==============================================
Result of computeUAE:
[position in {student}, department in {cs}, crsTaken supseteqln {{cs101}}]
==============================================
Result of computePAE:
[student in {csStu1}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {student}, department in {cs}, crsTaken supseteqln {{cs101}}; type in {application}; {checkStatus }; uid=student)
==============================================
Remove UP Set: [(csStu1,checkStatus,csStu1application)]
==============================================
Remaining Uncovered UP Size: 26
==============================================
The set of perms which csStu1 is uncovered and that have the same candidate constraint as (checkStatus,csStu1application)
[checkStatus]
==============================================
Result of computeUAE:
[position in {student}, department in {cs}, crsTaken supseteqln {{cs101}}]
==============================================
Result of computePAE:
[student in {csStu1}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {student}, department in {cs}, crsTaken supseteqln {{cs101}}; type in {application}; {checkStatus }; uid=student)
==============================================
Remaining Uncovered UP Size: 26
==============================================
Select an uncovered user-permission tuple:
<u,p>=<admissions1,(setStatus,csStu4application)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (setStatus,csStu4application) is uncovered and that have the same candidate constraint as admissions1
[admissions1, admissions2]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}]
==============================================
Result of computePAE:
[student in {csStu4}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}; student in {csStu4}, type in {application}; {setStatus }; )
==============================================
Remove UP Set: [(admissions1,setStatus,csStu4application), (admissions2,setStatus,csStu4application)]
==============================================
Remaining Uncovered UP Size: 25
==============================================
The set of perms which admissions1 is uncovered and that have the same candidate constraint as (setStatus,csStu4application)
[read, setStatus]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}, uid in {admissions1}]
==============================================
Result of computePAE:
[student in {csStu4}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}, uid in {admissions1}; student in {csStu4}, type in {application}; {read setStatus }; )
==============================================
Remaining Uncovered UP Size: 24
==============================================
Select an uncovered user-permission tuple:
<u,p>=<admissions2,(read,eeStu3application)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (read,eeStu3application) is uncovered and that have the same candidate constraint as admissions2
[admissions2]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}, uid in {admissions2}]
==============================================
Result of computePAE:
[student in {eeStu3}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}, uid in {admissions2}; student in {eeStu3}, type in {application}; {read }; )
==============================================
Remove UP Set: [(admissions2,read,eeStu3application)]
==============================================
Remaining Uncovered UP Size: 23
==============================================
The set of perms which admissions2 is uncovered and that have the same candidate constraint as (read,eeStu3application)
[read, setStatus]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}, uid in {admissions2}]
==============================================
Result of computePAE:
[student in {eeStu3}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}, uid in {admissions2}; student in {eeStu3}, type in {application}; {read setStatus }; )
==============================================
Remaining Uncovered UP Size: 22
==============================================
Select an uncovered user-permission tuple:
<u,p>=<eeChair,(read,eeStu3trans)>
==============================================
Candidate constraint:
[department=department]
==============================================
The set of users which (read,eeStu3trans) is uncovered and that have the same candidate constraint as eeChair
[eeChair]
==============================================
Result of computeUAE:
[department in {ee}, isChair in {true}]
==============================================
Result of computePAE:
[student in {eeStu3}, department in {ee}, type in {transcript}]
==============================================
Generalized Rule: 
rule(isChair in {true}; student in {eeStu3}, type in {transcript}; {read }; department=department)
==============================================
Remove UP Set: [(eeChair,read,eeStu3trans)]
==============================================
Remaining Uncovered UP Size: 21
==============================================
The set of perms which eeChair is uncovered and that have the same candidate constraint as (read,eeStu3trans)
[read]
==============================================
Result of computeUAE:
[department in {ee}, isChair in {true}]
==============================================
Result of computePAE:
[student in {eeStu3}, department in {ee}, type in {transcript}]
==============================================
Generalized Rule: 
rule(isChair in {true}; student in {eeStu3}, type in {transcript}; {read }; department=department)
==============================================
Remaining Uncovered UP Size: 21
==============================================
Select an uncovered user-permission tuple:
<u,p>=<admissions1,(read,eeStu3application)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (read,eeStu3application) is uncovered and that have the same candidate constraint as admissions1
[admissions1, admissions2]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}]
==============================================
Result of computePAE:
[student in {eeStu3}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}; student in {eeStu3}, type in {application}; {read }; )
==============================================
Remove UP Set: [(admissions2,read,eeStu3application), (admissions1,read,eeStu3application)]
==============================================
Remaining Uncovered UP Size: 20
==============================================
The set of perms which admissions1 is uncovered and that have the same candidate constraint as (read,eeStu3application)
[read, setStatus]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}, uid in {admissions1}]
==============================================
Result of computePAE:
[student in {eeStu3}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}, uid in {admissions1}; student in {eeStu3}, type in {application}; {read setStatus }; )
==============================================
Remaining Uncovered UP Size: 19
==============================================
Select an uncovered user-permission tuple:
<u,p>=<registrar2,(read,eeStu5trans)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (read,eeStu5trans) is uncovered and that have the same candidate constraint as registrar2
[registrar1, registrar2]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}]
==============================================
Result of computePAE:
[student in {eeStu5}, department in {ee}, type in {transcript}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}; student in {eeStu5}, department in {ee}, type in {transcript}; {read }; )
==============================================
Remove UP Set: [(registrar2,read,eeStu5trans), (registrar1,read,eeStu5trans)]
==============================================
Remaining Uncovered UP Size: 17
==============================================
The set of perms which registrar2 is uncovered and that have the same candidate constraint as (read,eeStu5trans)
[read]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}, uid in {registrar2}]
==============================================
Result of computePAE:
[student in {eeStu5}, department in {ee}, type in {transcript}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}, uid in {registrar2}; student in {eeStu5}, department in {ee}, type in {transcript}; {read }; )
==============================================
Remaining Uncovered UP Size: 17
==============================================
Select an uncovered user-permission tuple:
<u,p>=<admissions2,(read,eeStu5application)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (read,eeStu5application) is uncovered and that have the same candidate constraint as admissions2
[admissions2]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}, uid in {admissions2}]
==============================================
Result of computePAE:
[student in {eeStu5}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}, uid in {admissions2}; student in {eeStu5}, type in {application}; {read }; )
==============================================
Remove UP Set: [(admissions2,read,eeStu5application)]
==============================================
Remaining Uncovered UP Size: 16
==============================================
The set of perms which admissions2 is uncovered and that have the same candidate constraint as (read,eeStu5application)
[read, setStatus]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}, uid in {admissions2}]
==============================================
Result of computePAE:
[student in {eeStu5}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}, uid in {admissions2}; student in {eeStu5}, type in {application}; {read setStatus }; )
==============================================
Remaining Uncovered UP Size: 16
==============================================
Select an uncovered user-permission tuple:
<u,p>=<registrar1,(read,cs601roster)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (read,cs601roster) is uncovered and that have the same candidate constraint as registrar1
[registrar1, registrar2]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}]
==============================================
Result of computePAE:
[crs in {cs601}, department in {cs}, type in {roster}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}; crs in {cs601}, department in {cs}, type in {roster}; {read }; )
==============================================
Remove UP Set: [(registrar1,read,cs601roster), (registrar2,read,cs601roster)]
==============================================
Remaining Uncovered UP Size: 15
==============================================
The set of perms which registrar1 is uncovered and that have the same candidate constraint as (read,cs601roster)
[write, read]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}, uid in {registrar1}]
==============================================
Result of computePAE:
[crs in {cs601}, department in {cs}, type in {roster}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}, uid in {registrar1}; crs in {cs601}, department in {cs}, type in {roster}; {write read }; )
==============================================
Remaining Uncovered UP Size: 14
==============================================
Select an uncovered user-permission tuple:
<u,p>=<admissions2,(setStatus,eeStu4application)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (setStatus,eeStu4application) is uncovered and that have the same candidate constraint as admissions2
[admissions2]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}, uid in {admissions2}]
==============================================
Result of computePAE:
[student in {eeStu4}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}, uid in {admissions2}; student in {eeStu4}, type in {application}; {setStatus }; )
==============================================
Remove UP Set: [(admissions2,setStatus,eeStu4application)]
==============================================
Remaining Uncovered UP Size: 13
==============================================
The set of perms which admissions2 is uncovered and that have the same candidate constraint as (setStatus,eeStu4application)
[read, setStatus]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}, uid in {admissions2}]
==============================================
Result of computePAE:
[student in {eeStu4}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}, uid in {admissions2}; student in {eeStu4}, type in {application}; {read setStatus }; )
==============================================
Remaining Uncovered UP Size: 13
==============================================
Select an uncovered user-permission tuple:
<u,p>=<registrar1,(read,eeStu1trans)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (read,eeStu1trans) is uncovered and that have the same candidate constraint as registrar1
[registrar1, registrar2]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}]
==============================================
Result of computePAE:
[student in {eeStu1}, department in {ee}, type in {transcript}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}; student in {eeStu1}, department in {ee}, type in {transcript}; {read }; )
==============================================
Remove UP Set: [(registrar1,read,eeStu1trans), (registrar2,read,eeStu1trans)]
==============================================
Remaining Uncovered UP Size: 11
==============================================
The set of perms which registrar1 is uncovered and that have the same candidate constraint as (read,eeStu1trans)
[read]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}, uid in {registrar1}]
==============================================
Result of computePAE:
[student in {eeStu1}, department in {ee}, type in {transcript}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}, uid in {registrar1}; student in {eeStu1}, department in {ee}, type in {transcript}; {read }; )
==============================================
Remaining Uncovered UP Size: 11
==============================================
Select an uncovered user-permission tuple:
<u,p>=<csChair,(read,csStu2trans)>
==============================================
Candidate constraint:
[department=department]
==============================================
The set of users which (read,csStu2trans) is uncovered and that have the same candidate constraint as csChair
[csChair]
==============================================
Result of computeUAE:
[department in {cs}, isChair in {true}]
==============================================
Result of computePAE:
[student in {csStu2}, department in {cs}, type in {transcript}]
==============================================
Generalized Rule: 
rule(isChair in {true}; student in {csStu2}, type in {transcript}; {read }; department=department)
==============================================
Remove UP Set: [(csChair,read,csStu2trans)]
==============================================
Remaining Uncovered UP Size: 10
==============================================
The set of perms which csChair is uncovered and that have the same candidate constraint as (read,csStu2trans)
[read]
==============================================
Result of computeUAE:
[department in {cs}, isChair in {true}]
==============================================
Result of computePAE:
[student in {csStu2}, department in {cs}, type in {transcript}]
==============================================
Generalized Rule: 
rule(isChair in {true}; student in {csStu2}, type in {transcript}; {read }; department=department)
==============================================
Remaining Uncovered UP Size: 10
==============================================
Select an uncovered user-permission tuple:
<u,p>=<admissions2,(setStatus,csStu1application)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (setStatus,csStu1application) is uncovered and that have the same candidate constraint as admissions2
[admissions2]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}, uid in {admissions2}]
==============================================
Result of computePAE:
[student in {csStu1}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}, uid in {admissions2}; student in {csStu1}, type in {application}; {setStatus }; )
==============================================
Remove UP Set: [(admissions2,setStatus,csStu1application)]
==============================================
Remaining Uncovered UP Size: 9
==============================================
The set of perms which admissions2 is uncovered and that have the same candidate constraint as (setStatus,csStu1application)
[read, setStatus]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}, uid in {admissions2}]
==============================================
Result of computePAE:
[student in {csStu1}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}, uid in {admissions2}; student in {csStu1}, type in {application}; {read setStatus }; )
==============================================
Remaining Uncovered UP Size: 9
==============================================
Select an uncovered user-permission tuple:
<u,p>=<admissions1,(read,eeStu2application)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (read,eeStu2application) is uncovered and that have the same candidate constraint as admissions1
[admissions1, admissions2]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}]
==============================================
Result of computePAE:
[student in {eeStu2}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}; student in {eeStu2}, type in {application}; {read }; )
==============================================
Remove UP Set: [(admissions1,read,eeStu2application), (admissions2,read,eeStu2application)]
==============================================
Remaining Uncovered UP Size: 8
==============================================
The set of perms which admissions1 is uncovered and that have the same candidate constraint as (read,eeStu2application)
[read, setStatus]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}, uid in {admissions1}]
==============================================
Result of computePAE:
[student in {eeStu2}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}, uid in {admissions1}; student in {eeStu2}, type in {application}; {read setStatus }; )
==============================================
Remaining Uncovered UP Size: 7
==============================================
Select an uncovered user-permission tuple:
<u,p>=<eeStu1,(checkStatus,eeStu1application)>
==============================================
Candidate constraint:
[uid=student]
==============================================
The set of users which (checkStatus,eeStu1application) is uncovered and that have the same candidate constraint as eeStu1
[eeStu1]
==============================================
Result of computeUAE:
[position in {student}, department in {ee}, crsTaken supseteqln {{ee101}}]
==============================================
Result of computePAE:
[student in {eeStu1}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {student}, department in {ee}, crsTaken supseteqln {{ee101}}; type in {application}; {checkStatus }; uid=student)
==============================================
Remove UP Set: [(eeStu1,checkStatus,eeStu1application)]
==============================================
Remaining Uncovered UP Size: 6
==============================================
The set of perms which eeStu1 is uncovered and that have the same candidate constraint as (checkStatus,eeStu1application)
[checkStatus]
==============================================
Result of computeUAE:
[position in {student}, department in {ee}, crsTaken supseteqln {{ee101}}]
==============================================
Result of computePAE:
[student in {eeStu1}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {student}, department in {ee}, crsTaken supseteqln {{ee101}}; type in {application}; {checkStatus }; uid=student)
==============================================
Remaining Uncovered UP Size: 6
==============================================
Select an uncovered user-permission tuple:
<u,p>=<admissions2,(setStatus,csStu2application)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (setStatus,csStu2application) is uncovered and that have the same candidate constraint as admissions2
[admissions2]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}, uid in {admissions2}]
==============================================
Result of computePAE:
[student in {csStu2}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}, uid in {admissions2}; student in {csStu2}, type in {application}; {setStatus }; )
==============================================
Remove UP Set: [(admissions2,setStatus,csStu2application)]
==============================================
Remaining Uncovered UP Size: 5
==============================================
The set of perms which admissions2 is uncovered and that have the same candidate constraint as (setStatus,csStu2application)
[read, setStatus]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}, uid in {admissions2}]
==============================================
Result of computePAE:
[student in {csStu2}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}, uid in {admissions2}; student in {csStu2}, type in {application}; {read setStatus }; )
==============================================
Remaining Uncovered UP Size: 5
==============================================
Select an uncovered user-permission tuple:
<u,p>=<csChair,(read,csStu5trans)>
==============================================
Candidate constraint:
[department=department]
==============================================
The set of users which (read,csStu5trans) is uncovered and that have the same candidate constraint as csChair
[csChair]
==============================================
Result of computeUAE:
[department in {cs}, isChair in {true}]
==============================================
Result of computePAE:
[student in {csStu5}, department in {cs}, type in {transcript}]
==============================================
Generalized Rule: 
rule(isChair in {true}; student in {csStu5}, type in {transcript}; {read }; department=department)
==============================================
Remove UP Set: [(csChair,read,csStu5trans)]
==============================================
Remaining Uncovered UP Size: 4
==============================================
The set of perms which csChair is uncovered and that have the same candidate constraint as (read,csStu5trans)
[read]
==============================================
Result of computeUAE:
[department in {cs}, isChair in {true}]
==============================================
Result of computePAE:
[student in {csStu5}, department in {cs}, type in {transcript}]
==============================================
Generalized Rule: 
rule(isChair in {true}; student in {csStu5}, type in {transcript}; {read }; department=department)
==============================================
Remaining Uncovered UP Size: 4
==============================================
Select an uncovered user-permission tuple:
<u,p>=<csChair,(read,csStu1trans)>
==============================================
Candidate constraint:
[department=department]
==============================================
The set of users which (read,csStu1trans) is uncovered and that have the same candidate constraint as csChair
[csChair]
==============================================
Result of computeUAE:
[department in {cs}, isChair in {true}]
==============================================
Result of computePAE:
[student in {csStu1}, department in {cs}, type in {transcript}]
==============================================
Generalized Rule: 
rule(isChair in {true}; student in {csStu1}, type in {transcript}; {read }; department=department)
==============================================
Remove UP Set: [(csChair,read,csStu1trans)]
==============================================
Remaining Uncovered UP Size: 3
==============================================
The set of perms which csChair is uncovered and that have the same candidate constraint as (read,csStu1trans)
[read]
==============================================
Result of computeUAE:
[department in {cs}, isChair in {true}]
==============================================
Result of computePAE:
[student in {csStu1}, department in {cs}, type in {transcript}]
==============================================
Generalized Rule: 
rule(isChair in {true}; student in {csStu1}, type in {transcript}; {read }; department=department)
==============================================
Remaining Uncovered UP Size: 3
==============================================
Select an uncovered user-permission tuple:
<u,p>=<registrar2,(write,ee602roster)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (write,ee602roster) is uncovered and that have the same candidate constraint as registrar2
[registrar2]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}, uid in {registrar2}]
==============================================
Result of computePAE:
[crs in {ee602}, department in {ee}, type in {roster}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}, uid in {registrar2}; crs in {ee602}, department in {ee}, type in {roster}; {write }; )
==============================================
Remove UP Set: [(registrar2,write,ee602roster)]
==============================================
Remaining Uncovered UP Size: 2
==============================================
The set of perms which registrar2 is uncovered and that have the same candidate constraint as (write,ee602roster)
[write, read]
==============================================
Result of computeUAE:
[position in {staff}, department in {registrar}, uid in {registrar2}]
==============================================
Result of computePAE:
[crs in {ee602}, department in {ee}, type in {roster}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {registrar}, uid in {registrar2}; crs in {ee602}, department in {ee}, type in {roster}; {write read }; )
==============================================
Remaining Uncovered UP Size: 2
==============================================
Select an uncovered user-permission tuple:
<u,p>=<csStu3,(addScore,cs601gradebook)>
==============================================
Candidate constraint:
[crsTaught ] crs, department=department]
==============================================
The set of users which (addScore,cs601gradebook) is uncovered and that have the same candidate constraint as csStu3
[csStu3]
==============================================
Result of computeUAE:
[position in {student}, department in {cs}, crsTaken supseteqln {{cs602}}, crsTaught supseteqln {{cs601}}]
==============================================
Result of computePAE:
[crs in {cs601}, department in {cs}, type in {gradebook}]
==============================================
Generalized Rule: 
rule(position in {student}, crsTaken supseteqln {{cs602}}; type in {gradebook}; {addScore }; crsTaught ] crs, department=department)
==============================================
Remove UP Set: [(csStu3,addScore,cs601gradebook)]
==============================================
Remaining Uncovered UP Size: 1
==============================================
The set of perms which csStu3 is uncovered and that have the same candidate constraint as (addScore,cs601gradebook)
[readScore, addScore]
==============================================
Result of computeUAE:
[position in {student}, department in {cs}, crsTaken supseteqln {{cs602}}, crsTaught supseteqln {{cs601}}]
==============================================
Result of computePAE:
[crs in {cs601}, department in {cs}, type in {gradebook}]
==============================================
Generalized Rule: 
rule(position in {student}, crsTaken supseteqln {{cs602}}; type in {gradebook}; {readScore addScore }; crsTaught ] crs, department=department)
==============================================
Remaining Uncovered UP Size: 1
==============================================
Select an uncovered user-permission tuple:
<u,p>=<admissions2,(setStatus,csStu5application)>
==============================================
Candidate constraint:
[]
==============================================
The set of users which (setStatus,csStu5application) is uncovered and that have the same candidate constraint as admissions2
[admissions2]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}, uid in {admissions2}]
==============================================
Result of computePAE:
[student in {csStu5}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}, uid in {admissions2}; student in {csStu5}, type in {application}; {setStatus }; )
==============================================
Remove UP Set: [(admissions2,setStatus,csStu5application)]
==============================================
Remaining Uncovered UP Size: 0
==============================================
The set of perms which admissions2 is uncovered and that have the same candidate constraint as (setStatus,csStu5application)
[read, setStatus]
==============================================
Result of computeUAE:
[position in {staff}, department in {admissions}, uid in {admissions2}]
==============================================
Result of computePAE:
[student in {csStu5}, type in {application}]
==============================================
Generalized Rule: 
rule(position in {staff}, department in {admissions}, uid in {admissions2}; student in {csStu5}, type in {application}; {read setStatus }; )
==============================================
Remaining Uncovered UP Size: 0
==============================================
Time for the main while loop : 393 millisec
==============================================
BEFORE MERGING RULES

1.
rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {eeStu1}, type in {application}; {read }; )
2.
rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {eeStu1}, type in {application}; {read setStatus }; )
3.
rule(crsTaken supseteqln {{cs601}}, position in {student}; type in {gradebook}; {addScore }; crsTaught ] crs, department=department)
4.
rule(crsTaken supseteqln {{cs601}}, position in {student}; type in {gradebook}; {readScore addScore }; crsTaught ] crs, department=department)
5.
rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {eeStu2}, type in {application}; {setStatus }; )
6.
rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {eeStu2}, type in {application}; {read setStatus }; )
7.
rule(position in {student faculty}; type in {gradebook}; {readScore }; crsTaught ] crs, department=department)
8.
rule(position in {faculty}; type in {gradebook}; {readScore assignGrade addScore changeScore }; crsTaught ] crs, department=department)
9.
rule(department in {admissions}, position in {staff}; student in {eeStu4}, type in {application}; {read }; )
10.
rule(department in {admissions}, position in {staff}, uid in {admissions1}; student in {eeStu4}, type in {application}; {read setStatus }; )
11.
rule(position in {faculty}; type in {roster}; {read }; crsTaught ] crs, department=department)
12.
rule(position in {faculty}; type in {roster}; {read }; crsTaught ] crs, department=department)
13.
rule(department in {registrar}, position in {staff}; department in {cs}, student in {csStu2}, type in {transcript}; {read }; )
14.
rule(department in {registrar}, position in {staff}, uid in {registrar2}; department in {cs}, student in {csStu2}, type in {transcript}; {read }; )
15.
rule(department in {registrar}, position in {staff}, uid in {registrar2}; crs in {cs601}, department in {cs}, type in {roster}; {write }; )
16.
rule(department in {registrar}, position in {staff}, uid in {registrar2}; crs in {cs601}, department in {cs}, type in {roster}; {write read }; )
17.
rule(crsTaken supseteqln {{ee601}}, crsTaught supseteqln {{ee101 ee602}}, department in {ee}, position in {student}; type in {application}; {checkStatus }; uid=student)
18.
rule(crsTaken supseteqln {{ee601}}, crsTaught supseteqln {{ee101 ee602}}, department in {ee}, position in {student}; type in {application}; {checkStatus }; uid=student)
19.
rule(crsTaken supseteqln {{ee601}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
20.
rule(crsTaken supseteqln {{ee601}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
21.
rule(position in {student}; type in {gradebook}; {readMyScores }; crsTaken ] crs, department=department)
22.
rule(position in {student}, uid in {eeStu4}; type in {gradebook}; {readMyScores }; crsTaken ] crs, department=department)
23.
rule(isChair in {true}; student in {csStu3}, type in {transcript}; {read }; department=department)
24.
rule(isChair in {true}; student in {csStu3}, type in {transcript}; {read }; department=department)
25.
rule(department in {registrar}, position in {staff}; department in {cs}, student in {csStu4}, type in {transcript}; {read }; )
26.
rule(department in {registrar}, position in {staff}, uid in {registrar1}; department in {cs}, student in {csStu4}, type in {transcript}; {read }; )
27.
rule(department in {registrar}, position in {staff}, uid in {registrar2}; crs in {cs101}, department in {cs}, type in {roster}; {write }; )
28.
rule(department in {registrar}, position in {staff}, uid in {registrar2}; crs in {cs101}, department in {cs}, type in {roster}; {write read }; )
29.
rule(department in {registrar}, position in {staff}, uid in {registrar2}; crs in {cs602}, department in {cs}, type in {roster}; {write }; )
30.
rule(department in {registrar}, position in {staff}, uid in {registrar2}; crs in {cs602}, department in {cs}, type in {roster}; {write read }; )
31.
rule(department in {registrar}, position in {staff}; department in {ee}, student in {eeStu2}, type in {transcript}; {read }; )
32.
rule(department in {registrar}, position in {staff}, uid in {registrar1}; department in {ee}, student in {eeStu2}, type in {transcript}; {read }; )
33.
rule(crsTaken supseteqln {{cs601}}, crsTaught supseteqln {{cs602 cs101}}, department in {cs}, position in {student}; type in {application}; {checkStatus }; uid=student)
34.
rule(crsTaken supseteqln {{cs601}}, crsTaught supseteqln {{cs602 cs101}}, department in {cs}, position in {student}; type in {application}; {checkStatus }; uid=student)
35.
rule(crsTaken supseteqln {{cs602}}, crsTaught supseteqln {{cs601}}, department in {cs}, position in {student}; type in {application}; {checkStatus }; uid=student)
36.
rule(crsTaken supseteqln {{cs602}}, crsTaught supseteqln {{cs601}}, department in {cs}, position in {student}; type in {application}; {checkStatus }; uid=student)
37.
rule(crsTaken supseteqln {{ee601}}, position in {student}; type in {gradebook}; {addScore }; crsTaught ] crs, department=department)
38.
rule(crsTaken supseteqln {{ee601}}, position in {student}; type in {gradebook}; {readScore addScore }; crsTaught ] crs, department=department)
39.
rule(crsTaken supseteqln {{ee101}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
40.
rule(crsTaken supseteqln {{ee101}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
41.
rule(department in {registrar}, position in {staff}; crs in {ee101}, department in {ee}, type in {roster}; {read }; )
42.
rule(department in {registrar}, position in {staff}, uid in {registrar1}; crs in {ee101}, department in {ee}, type in {roster}; {write read }; )
43.
rule(isChair in {true}; student in {eeStu2}, type in {transcript}; {read }; department=department)
44.
rule(isChair in {true}; student in {eeStu2}, type in {transcript}; {read }; department=department)
45.
rule(crsTaken supseteqln {{ee602}}, crsTaught supseteqln {{ee601}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
46.
rule(crsTaken supseteqln {{ee602}}, crsTaught supseteqln {{ee601}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
47.
rule(crsTaken supseteqln {{cs602 cs601}}, department in {cs}, position in {student}; type in {application}; {checkStatus }; uid=student)
48.
rule(crsTaken supseteqln {{cs602 cs601}}, department in {cs}, position in {student}; type in {application}; {checkStatus }; uid=student)
49.
rule(crsTaken supseteqln {{cs601}}, department in {cs}, position in {student}; type in {application}; {checkStatus }; uid=student)
50.
rule(crsTaken supseteqln {{cs601}}, department in {cs}, position in {student}; type in {application}; {checkStatus }; uid=student)
51.
rule(department in {registrar}, position in {staff}; crs in {ee602}, department in {ee}, type in {roster}; {read }; )
52.
rule(department in {registrar}, position in {staff}, uid in {registrar1}; crs in {ee602}, department in {ee}, type in {roster}; {write read }; )
53.
rule(department in {admissions}, position in {staff}; student in {csStu5}, type in {application}; {read }; )
54.
rule(department in {admissions}, position in {staff}, uid in {admissions1}; student in {csStu5}, type in {application}; {read setStatus }; )
55.
rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {applicant2}, type in {application}; {setStatus }; )
56.
rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {applicant2}, type in {application}; {read setStatus }; )
57.
rule(crsTaken supseteqln {{cs601}}, crsTaught supseteqln {{cs602 cs101}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
58.
rule(crsTaken supseteqln {{cs601}}, crsTaught supseteqln {{cs602 cs101}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
59.
rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {applicant1}, type in {application}; {setStatus }; )
60.
rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {applicant1}, type in {application}; {read setStatus }; )
61.
rule(crsTaken supseteqln {{cs101}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
62.
rule(crsTaken supseteqln {{cs101}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
63.
rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {csStu3}, type in {application}; {read }; )
64.
rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {csStu3}, type in {application}; {read setStatus }; )
65.
rule(department in {admissions}, position in {staff}; student in {csStu2}, type in {application}; {read }; )
66.
rule(department in {admissions}, position in {staff}, uid in {admissions1}; student in {csStu2}, type in {application}; {read setStatus }; )
67.
rule(crsTaken supseteqln {{ee601}}, department in {ee}, position in {student}; type in {application}; {checkStatus }; uid=student)
68.
rule(crsTaken supseteqln {{ee601}}, department in {ee}, position in {student}; type in {application}; {checkStatus }; uid=student)
69.
rule(department in {registrar}, position in {staff}; crs in {ee601}, department in {ee}, type in {roster}; {read }; )
70.
rule(department in {registrar}, position in {staff}, uid in {registrar1}; crs in {ee601}, department in {ee}, type in {roster}; {write read }; )
71.
rule(department in {admissions}, position in {staff}; student in {applicant2}, type in {application}; {read }; )
72.
rule(department in {admissions}, position in {staff}, uid in {admissions1}; student in {applicant2}, type in {application}; {read setStatus }; )
73.
rule(department in {admissions}, position in {staff}; student in {applicant1}, type in {application}; {read }; )
74.
rule(department in {admissions}, position in {staff}, uid in {admissions1}; student in {applicant1}, type in {application}; {read setStatus }; )
75.
rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {csStu4}, type in {application}; {setStatus }; )
76.
rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {csStu4}, type in {application}; {read setStatus }; )
77.
rule(department in {admissions}, position in {staff}; student in {csStu1}, type in {application}; {read }; )
78.
rule(department in {admissions}, position in {staff}, uid in {admissions1}; student in {csStu1}, type in {application}; {read setStatus }; )
79.
rule(department in {registrar}, position in {staff}, uid in {registrar2}; crs in {ee101}, department in {ee}, type in {roster}; {write }; )
80.
rule(department in {registrar}, position in {staff}, uid in {registrar2}; crs in {ee101}, department in {ee}, type in {roster}; {write read }; )
81.
rule(isChair in {true}; student in {csStu4}, type in {transcript}; {read }; department=department)
82.
rule(isChair in {true}; student in {csStu4}, type in {transcript}; {read }; department=department)
83.
rule(isChair in {true}; student in {eeStu4}, type in {transcript}; {read }; department=department)
84.
rule(isChair in {true}; student in {eeStu4}, type in {transcript}; {read }; department=department)
85.
rule(department in {registrar}, position in {staff}; department in {ee}, student in {eeStu3}, type in {transcript}; {read }; )
86.
rule(department in {registrar}, position in {staff}, uid in {registrar1}; department in {ee}, student in {eeStu3}, type in {transcript}; {read }; )
87.
rule(position in {applicant}; type in {application}; {checkStatus }; uid=student)
88.
rule(position in {applicant}; type in {application}; {checkStatus }; uid=student)
89.
rule(isChair in {true}; student in {eeStu5}, type in {transcript}; {read }; department=department)
90.
rule(isChair in {true}; student in {eeStu5}, type in {transcript}; {read }; department=department)
91.
rule(department in {registrar}, position in {staff}; crs in {cs602}, department in {cs}, type in {roster}; {read }; )
92.
rule(department in {registrar}, position in {staff}, uid in {registrar1}; crs in {cs602}, department in {cs}, type in {roster}; {write read }; )
93.
rule(department in {registrar}, position in {staff}; department in {ee}, student in {eeStu4}, type in {transcript}; {read }; )
94.
rule(department in {registrar}, position in {staff}, uid in {registrar1}; department in {ee}, student in {eeStu4}, type in {transcript}; {read }; )
95.
rule(crsTaken supseteqln {{cs602 cs601}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
96.
rule(crsTaken supseteqln {{cs602 cs601}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
97.
rule(department in {registrar}, position in {staff}, uid in {registrar2}; crs in {ee601}, department in {ee}, type in {roster}; {write }; )
98.
rule(department in {registrar}, position in {staff}, uid in {registrar2}; crs in {ee601}, department in {ee}, type in {roster}; {write read }; )
99.
rule(department in {admissions}, position in {staff}; student in {csStu3}, type in {application}; {read }; )
100.
rule(department in {admissions}, position in {staff}, uid in {admissions1}; student in {csStu3}, type in {application}; {read setStatus }; )
101.
rule(crsTaken supseteqln {{cs602}}, crsTaught supseteqln {{cs601}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
102.
rule(crsTaken supseteqln {{cs602}}, crsTaught supseteqln {{cs601}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
103.
rule(department in {registrar}, position in {staff}; department in {cs}, student in {csStu5}, type in {transcript}; {read }; )
104.
rule(department in {registrar}, position in {staff}, uid in {registrar1}; department in {cs}, student in {csStu5}, type in {transcript}; {read }; )
105.
rule(department in {registrar}, position in {staff}; department in {cs}, student in {csStu3}, type in {transcript}; {read }; )
106.
rule(department in {registrar}, position in {staff}, uid in {registrar2}; department in {cs}, student in {csStu3}, type in {transcript}; {read }; )
107.
rule(crsTaken supseteqln {{cs601}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
108.
rule(crsTaken supseteqln {{cs601}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
109.
rule(crsTaken supseteqln {{ee602}}, crsTaught supseteqln {{ee601}}, department in {ee}, position in {student}; type in {application}; {checkStatus }; uid=student)
110.
rule(crsTaken supseteqln {{ee602}}, crsTaught supseteqln {{ee601}}, department in {ee}, position in {student}; type in {application}; {checkStatus }; uid=student)
111.
rule(department in {registrar}, position in {staff}; crs in {cs101}, department in {cs}, type in {roster}; {read }; )
112.
rule(department in {registrar}, position in {staff}, uid in {registrar1}; crs in {cs101}, department in {cs}, type in {roster}; {write read }; )
113.
rule(crsTaken supseteqln {{ee602}}, position in {student}; type in {gradebook}; {addScore }; crsTaught ] crs, department=department)
114.
rule(crsTaken supseteqln {{ee602}}, position in {student}; type in {gradebook}; {readScore addScore }; crsTaught ] crs, department=department)
115.
rule(department in {registrar}, position in {staff}; department in {cs}, student in {csStu1}, type in {transcript}; {read }; )
116.
rule(department in {registrar}, position in {staff}, uid in {registrar1}; department in {cs}, student in {csStu1}, type in {transcript}; {read }; )
117.
rule(department in {admissions}, position in {staff}; student in {eeStu1}, type in {application}; {read }; )
118.
rule(department in {admissions}, position in {staff}, uid in {admissions1}; student in {eeStu1}, type in {application}; {read setStatus }; )
119.
rule(isChair in {true}; student in {eeStu1}, type in {transcript}; {read }; department=department)
120.
rule(isChair in {true}; student in {eeStu1}, type in {transcript}; {read }; department=department)
121.
rule(department in {admissions}, position in {staff}; student in {eeStu5}, type in {application}; {setStatus }; )
122.
rule(department in {admissions}, position in {staff}, uid in {admissions1}; student in {eeStu5}, type in {application}; {read setStatus }; )
123.
rule(crsTaken supseteqln {{cs101}}, department in {cs}, position in {student}; type in {application}; {checkStatus }; uid=student)
124.
rule(crsTaken supseteqln {{cs101}}, department in {cs}, position in {student}; type in {application}; {checkStatus }; uid=student)
125.
rule(department in {admissions}, position in {staff}; student in {csStu4}, type in {application}; {setStatus }; )
126.
rule(department in {admissions}, position in {staff}, uid in {admissions1}; student in {csStu4}, type in {application}; {read setStatus }; )
127.
rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {eeStu3}, type in {application}; {read }; )
128.
rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {eeStu3}, type in {application}; {read setStatus }; )
129.
rule(isChair in {true}; student in {eeStu3}, type in {transcript}; {read }; department=department)
130.
rule(isChair in {true}; student in {eeStu3}, type in {transcript}; {read }; department=department)
131.
rule(department in {admissions}, position in {staff}; student in {eeStu3}, type in {application}; {read }; )
132.
rule(department in {admissions}, position in {staff}, uid in {admissions1}; student in {eeStu3}, type in {application}; {read setStatus }; )
133.
rule(department in {registrar}, position in {staff}; department in {ee}, student in {eeStu5}, type in {transcript}; {read }; )
134.
rule(department in {registrar}, position in {staff}, uid in {registrar2}; department in {ee}, student in {eeStu5}, type in {transcript}; {read }; )
135.
rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {eeStu5}, type in {application}; {read }; )
136.
rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {eeStu5}, type in {application}; {read setStatus }; )
137.
rule(department in {registrar}, position in {staff}; crs in {cs601}, department in {cs}, type in {roster}; {read }; )
138.
rule(department in {registrar}, position in {staff}, uid in {registrar1}; crs in {cs601}, department in {cs}, type in {roster}; {write read }; )
139.
rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {eeStu4}, type in {application}; {setStatus }; )
140.
rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {eeStu4}, type in {application}; {read setStatus }; )
141.
rule(department in {registrar}, position in {staff}; department in {ee}, student in {eeStu1}, type in {transcript}; {read }; )
142.
rule(department in {registrar}, position in {staff}, uid in {registrar1}; department in {ee}, student in {eeStu1}, type in {transcript}; {read }; )
143.
rule(isChair in {true}; student in {csStu2}, type in {transcript}; {read }; department=department)
144.
rule(isChair in {true}; student in {csStu2}, type in {transcript}; {read }; department=department)
145.
rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {csStu1}, type in {application}; {setStatus }; )
146.
rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {csStu1}, type in {application}; {read setStatus }; )
147.
rule(department in {admissions}, position in {staff}; student in {eeStu2}, type in {application}; {read }; )
148.
rule(department in {admissions}, position in {staff}, uid in {admissions1}; student in {eeStu2}, type in {application}; {read setStatus }; )
149.
rule(crsTaken supseteqln {{ee101}}, department in {ee}, position in {student}; type in {application}; {checkStatus }; uid=student)
150.
rule(crsTaken supseteqln {{ee101}}, department in {ee}, position in {student}; type in {application}; {checkStatus }; uid=student)
151.
rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {csStu2}, type in {application}; {setStatus }; )
152.
rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {csStu2}, type in {application}; {read setStatus }; )
153.
rule(isChair in {true}; student in {csStu5}, type in {transcript}; {read }; department=department)
154.
rule(isChair in {true}; student in {csStu5}, type in {transcript}; {read }; department=department)
155.
rule(isChair in {true}; student in {csStu1}, type in {transcript}; {read }; department=department)
156.
rule(isChair in {true}; student in {csStu1}, type in {transcript}; {read }; department=department)
157.
rule(department in {registrar}, position in {staff}, uid in {registrar2}; crs in {ee602}, department in {ee}, type in {roster}; {write }; )
158.
rule(department in {registrar}, position in {staff}, uid in {registrar2}; crs in {ee602}, department in {ee}, type in {roster}; {write read }; )
159.
rule(crsTaken supseteqln {{cs602}}, position in {student}; type in {gradebook}; {addScore }; crsTaught ] crs, department=department)
160.
rule(crsTaken supseteqln {{cs602}}, position in {student}; type in {gradebook}; {readScore addScore }; crsTaught ] crs, department=department)
161.
rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {csStu5}, type in {application}; {setStatus }; )
162.
rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {csStu5}, type in {application}; {read setStatus }; )
==============================================
Removing Rule rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {eeStu1}, type in {application}; {read }; )
because of 
rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {eeStu1}, type in {application}; {read setStatus }; )
==============================================
Removing Rule rule(crsTaken supseteqln {{cs601}}, position in {student}; type in {gradebook}; {addScore }; crsTaught ] crs, department=department)
because of 
rule(crsTaken supseteqln {{cs601}}, position in {student}; type in {gradebook}; {readScore addScore }; crsTaught ] crs, department=department)
==============================================
Removing Rule rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {eeStu2}, type in {application}; {setStatus }; )
because of 
rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {eeStu2}, type in {application}; {read setStatus }; )
==============================================
Removing Rule rule(position in {faculty}; type in {roster}; {read }; crsTaught ] crs, department=department)
because of 
rule(position in {faculty}; type in {roster}; {read }; crsTaught ] crs, department=department)
==============================================
Removing Rule rule(department in {registrar}, position in {staff}, uid in {registrar2}; department in {cs}, student in {csStu2}, type in {transcript}; {read }; )
because of 
rule(department in {registrar}, position in {staff}; department in {cs}, student in {csStu2}, type in {transcript}; {read }; )
==============================================
Removing Rule rule(department in {registrar}, position in {staff}, uid in {registrar2}; crs in {cs601}, department in {cs}, type in {roster}; {write }; )
because of 
rule(department in {registrar}, position in {staff}, uid in {registrar2}; crs in {cs601}, department in {cs}, type in {roster}; {write read }; )
==============================================
Removing Rule rule(crsTaken supseteqln {{ee601}}, crsTaught supseteqln {{ee101 ee602}}, department in {ee}, position in {student}; type in {application}; {checkStatus }; uid=student)
because of 
rule(crsTaken supseteqln {{ee601}}, crsTaught supseteqln {{ee101 ee602}}, department in {ee}, position in {student}; type in {application}; {checkStatus }; uid=student)
==============================================
Removing Rule rule(crsTaken supseteqln {{ee601}}, crsTaught supseteqln {{ee101 ee602}}, department in {ee}, position in {student}; type in {application}; {checkStatus }; uid=student)
because of 
rule(crsTaken supseteqln {{ee601}}, department in {ee}, position in {student}; type in {application}; {checkStatus }; uid=student)
==============================================
Removing Rule rule(crsTaken supseteqln {{ee601}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
because of 
rule(crsTaken supseteqln {{ee601}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
==============================================
Removing Rule rule(position in {student}, uid in {eeStu4}; type in {gradebook}; {readMyScores }; crsTaken ] crs, department=department)
because of 
rule(position in {student}; type in {gradebook}; {readMyScores }; crsTaken ] crs, department=department)
==============================================
Removing Rule rule(isChair in {true}; student in {csStu3}, type in {transcript}; {read }; department=department)
because of 
rule(isChair in {true}; student in {csStu3}, type in {transcript}; {read }; department=department)
==============================================
Removing Rule rule(department in {registrar}, position in {staff}, uid in {registrar1}; department in {cs}, student in {csStu4}, type in {transcript}; {read }; )
because of 
rule(department in {registrar}, position in {staff}; department in {cs}, student in {csStu4}, type in {transcript}; {read }; )
==============================================
Removing Rule rule(department in {registrar}, position in {staff}, uid in {registrar2}; crs in {cs101}, department in {cs}, type in {roster}; {write }; )
because of 
rule(department in {registrar}, position in {staff}, uid in {registrar2}; crs in {cs101}, department in {cs}, type in {roster}; {write read }; )
==============================================
Removing Rule rule(department in {registrar}, position in {staff}, uid in {registrar2}; crs in {cs602}, department in {cs}, type in {roster}; {write }; )
because of 
rule(department in {registrar}, position in {staff}, uid in {registrar2}; crs in {cs602}, department in {cs}, type in {roster}; {write read }; )
==============================================
Removing Rule rule(department in {registrar}, position in {staff}, uid in {registrar1}; department in {ee}, student in {eeStu2}, type in {transcript}; {read }; )
because of 
rule(department in {registrar}, position in {staff}; department in {ee}, student in {eeStu2}, type in {transcript}; {read }; )
==============================================
Removing Rule rule(crsTaken supseteqln {{cs601}}, crsTaught supseteqln {{cs602 cs101}}, department in {cs}, position in {student}; type in {application}; {checkStatus }; uid=student)
because of 
rule(crsTaken supseteqln {{cs601}}, crsTaught supseteqln {{cs602 cs101}}, department in {cs}, position in {student}; type in {application}; {checkStatus }; uid=student)
==============================================
Removing Rule rule(crsTaken supseteqln {{cs601}}, crsTaught supseteqln {{cs602 cs101}}, department in {cs}, position in {student}; type in {application}; {checkStatus }; uid=student)
because of 
rule(crsTaken supseteqln {{cs601}}, department in {cs}, position in {student}; type in {application}; {checkStatus }; uid=student)
==============================================
Removing Rule rule(crsTaken supseteqln {{cs602}}, crsTaught supseteqln {{cs601}}, department in {cs}, position in {student}; type in {application}; {checkStatus }; uid=student)
because of 
rule(crsTaken supseteqln {{cs602}}, crsTaught supseteqln {{cs601}}, department in {cs}, position in {student}; type in {application}; {checkStatus }; uid=student)
==============================================
Removing Rule rule(crsTaken supseteqln {{ee601}}, position in {student}; type in {gradebook}; {addScore }; crsTaught ] crs, department=department)
because of 
rule(crsTaken supseteqln {{ee601}}, position in {student}; type in {gradebook}; {readScore addScore }; crsTaught ] crs, department=department)
==============================================
Removing Rule rule(crsTaken supseteqln {{ee101}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
because of 
rule(crsTaken supseteqln {{ee101}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
==============================================
Removing Rule rule(isChair in {true}; student in {eeStu2}, type in {transcript}; {read }; department=department)
because of 
rule(isChair in {true}; student in {eeStu2}, type in {transcript}; {read }; department=department)
==============================================
Removing Rule rule(crsTaken supseteqln {{ee602}}, crsTaught supseteqln {{ee601}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
because of 
rule(crsTaken supseteqln {{ee602}}, crsTaught supseteqln {{ee601}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
==============================================
Removing Rule rule(crsTaken supseteqln {{cs602 cs601}}, department in {cs}, position in {student}; type in {application}; {checkStatus }; uid=student)
because of 
rule(crsTaken supseteqln {{cs602 cs601}}, department in {cs}, position in {student}; type in {application}; {checkStatus }; uid=student)
==============================================
Removing Rule rule(crsTaken supseteqln {{cs602 cs601}}, department in {cs}, position in {student}; type in {application}; {checkStatus }; uid=student)
because of 
rule(crsTaken supseteqln {{cs601}}, department in {cs}, position in {student}; type in {application}; {checkStatus }; uid=student)
==============================================
Removing Rule rule(crsTaken supseteqln {{cs601}}, department in {cs}, position in {student}; type in {application}; {checkStatus }; uid=student)
because of 
rule(crsTaken supseteqln {{cs601}}, department in {cs}, position in {student}; type in {application}; {checkStatus }; uid=student)
==============================================
Removing Rule rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {applicant2}, type in {application}; {setStatus }; )
because of 
rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {applicant2}, type in {application}; {read setStatus }; )
==============================================
Removing Rule rule(crsTaken supseteqln {{cs601}}, crsTaught supseteqln {{cs602 cs101}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
because of 
rule(crsTaken supseteqln {{cs601}}, crsTaught supseteqln {{cs602 cs101}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
==============================================
Removing Rule rule(crsTaken supseteqln {{cs601}}, crsTaught supseteqln {{cs602 cs101}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
because of 
rule(crsTaken supseteqln {{cs601}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
==============================================
Removing Rule rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {applicant1}, type in {application}; {setStatus }; )
because of 
rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {applicant1}, type in {application}; {read setStatus }; )
==============================================
Removing Rule rule(crsTaken supseteqln {{cs101}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
because of 
rule(crsTaken supseteqln {{cs101}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
==============================================
Removing Rule rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {csStu3}, type in {application}; {read }; )
because of 
rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {csStu3}, type in {application}; {read setStatus }; )
==============================================
Removing Rule rule(crsTaken supseteqln {{ee601}}, department in {ee}, position in {student}; type in {application}; {checkStatus }; uid=student)
because of 
rule(crsTaken supseteqln {{ee601}}, department in {ee}, position in {student}; type in {application}; {checkStatus }; uid=student)
==============================================
Removing Rule rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {csStu4}, type in {application}; {setStatus }; )
because of 
rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {csStu4}, type in {application}; {read setStatus }; )
==============================================
Removing Rule rule(department in {registrar}, position in {staff}, uid in {registrar2}; crs in {ee101}, department in {ee}, type in {roster}; {write }; )
because of 
rule(department in {registrar}, position in {staff}, uid in {registrar2}; crs in {ee101}, department in {ee}, type in {roster}; {write read }; )
==============================================
Removing Rule rule(isChair in {true}; student in {csStu4}, type in {transcript}; {read }; department=department)
because of 
rule(isChair in {true}; student in {csStu4}, type in {transcript}; {read }; department=department)
==============================================
Removing Rule rule(isChair in {true}; student in {eeStu4}, type in {transcript}; {read }; department=department)
because of 
rule(isChair in {true}; student in {eeStu4}, type in {transcript}; {read }; department=department)
==============================================
Removing Rule rule(department in {registrar}, position in {staff}, uid in {registrar1}; department in {ee}, student in {eeStu3}, type in {transcript}; {read }; )
because of 
rule(department in {registrar}, position in {staff}; department in {ee}, student in {eeStu3}, type in {transcript}; {read }; )
==============================================
Removing Rule rule(position in {applicant}; type in {application}; {checkStatus }; uid=student)
because of 
rule(position in {applicant}; type in {application}; {checkStatus }; uid=student)
==============================================
Removing Rule rule(isChair in {true}; student in {eeStu5}, type in {transcript}; {read }; department=department)
because of 
rule(isChair in {true}; student in {eeStu5}, type in {transcript}; {read }; department=department)
==============================================
Removing Rule rule(department in {registrar}, position in {staff}, uid in {registrar1}; department in {ee}, student in {eeStu4}, type in {transcript}; {read }; )
because of 
rule(department in {registrar}, position in {staff}; department in {ee}, student in {eeStu4}, type in {transcript}; {read }; )
==============================================
Removing Rule rule(crsTaken supseteqln {{cs602 cs601}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
because of 
rule(crsTaken supseteqln {{cs602 cs601}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
==============================================
Removing Rule rule(crsTaken supseteqln {{cs602 cs601}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
because of 
rule(crsTaken supseteqln {{cs601}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
==============================================
Removing Rule rule(department in {registrar}, position in {staff}, uid in {registrar2}; crs in {ee601}, department in {ee}, type in {roster}; {write }; )
because of 
rule(department in {registrar}, position in {staff}, uid in {registrar2}; crs in {ee601}, department in {ee}, type in {roster}; {write read }; )
==============================================
Removing Rule rule(crsTaken supseteqln {{cs602}}, crsTaught supseteqln {{cs601}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
because of 
rule(crsTaken supseteqln {{cs602}}, crsTaught supseteqln {{cs601}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
==============================================
Removing Rule rule(department in {registrar}, position in {staff}, uid in {registrar1}; department in {cs}, student in {csStu5}, type in {transcript}; {read }; )
because of 
rule(department in {registrar}, position in {staff}; department in {cs}, student in {csStu5}, type in {transcript}; {read }; )
==============================================
Removing Rule rule(department in {registrar}, position in {staff}, uid in {registrar2}; department in {cs}, student in {csStu3}, type in {transcript}; {read }; )
because of 
rule(department in {registrar}, position in {staff}; department in {cs}, student in {csStu3}, type in {transcript}; {read }; )
==============================================
Removing Rule rule(crsTaken supseteqln {{cs601}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
because of 
rule(crsTaken supseteqln {{cs601}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
==============================================
Removing Rule rule(crsTaken supseteqln {{ee602}}, crsTaught supseteqln {{ee601}}, department in {ee}, position in {student}; type in {application}; {checkStatus }; uid=student)
because of 
rule(crsTaken supseteqln {{ee602}}, crsTaught supseteqln {{ee601}}, department in {ee}, position in {student}; type in {application}; {checkStatus }; uid=student)
==============================================
Removing Rule rule(crsTaken supseteqln {{ee602}}, position in {student}; type in {gradebook}; {addScore }; crsTaught ] crs, department=department)
because of 
rule(crsTaken supseteqln {{ee602}}, position in {student}; type in {gradebook}; {readScore addScore }; crsTaught ] crs, department=department)
==============================================
Removing Rule rule(department in {registrar}, position in {staff}, uid in {registrar1}; department in {cs}, student in {csStu1}, type in {transcript}; {read }; )
because of 
rule(department in {registrar}, position in {staff}; department in {cs}, student in {csStu1}, type in {transcript}; {read }; )
==============================================
Removing Rule rule(isChair in {true}; student in {eeStu1}, type in {transcript}; {read }; department=department)
because of 
rule(isChair in {true}; student in {eeStu1}, type in {transcript}; {read }; department=department)
==============================================
Removing Rule rule(crsTaken supseteqln {{cs101}}, department in {cs}, position in {student}; type in {application}; {checkStatus }; uid=student)
because of 
rule(crsTaken supseteqln {{cs101}}, department in {cs}, position in {student}; type in {application}; {checkStatus }; uid=student)
==============================================
Removing Rule rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {eeStu3}, type in {application}; {read }; )
because of 
rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {eeStu3}, type in {application}; {read setStatus }; )
==============================================
Removing Rule rule(isChair in {true}; student in {eeStu3}, type in {transcript}; {read }; department=department)
because of 
rule(isChair in {true}; student in {eeStu3}, type in {transcript}; {read }; department=department)
==============================================
Removing Rule rule(department in {registrar}, position in {staff}, uid in {registrar2}; department in {ee}, student in {eeStu5}, type in {transcript}; {read }; )
because of 
rule(department in {registrar}, position in {staff}; department in {ee}, student in {eeStu5}, type in {transcript}; {read }; )
==============================================
Removing Rule rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {eeStu5}, type in {application}; {read }; )
because of 
rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {eeStu5}, type in {application}; {read setStatus }; )
==============================================
Removing Rule rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {eeStu4}, type in {application}; {setStatus }; )
because of 
rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {eeStu4}, type in {application}; {read setStatus }; )
==============================================
Removing Rule rule(department in {registrar}, position in {staff}, uid in {registrar1}; department in {ee}, student in {eeStu1}, type in {transcript}; {read }; )
because of 
rule(department in {registrar}, position in {staff}; department in {ee}, student in {eeStu1}, type in {transcript}; {read }; )
==============================================
Removing Rule rule(isChair in {true}; student in {csStu2}, type in {transcript}; {read }; department=department)
because of 
rule(isChair in {true}; student in {csStu2}, type in {transcript}; {read }; department=department)
==============================================
Removing Rule rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {csStu1}, type in {application}; {setStatus }; )
because of 
rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {csStu1}, type in {application}; {read setStatus }; )
==============================================
Removing Rule rule(crsTaken supseteqln {{ee101}}, department in {ee}, position in {student}; type in {application}; {checkStatus }; uid=student)
because of 
rule(crsTaken supseteqln {{ee101}}, department in {ee}, position in {student}; type in {application}; {checkStatus }; uid=student)
==============================================
Removing Rule rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {csStu2}, type in {application}; {setStatus }; )
because of 
rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {csStu2}, type in {application}; {read setStatus }; )
==============================================
Removing Rule rule(isChair in {true}; student in {csStu5}, type in {transcript}; {read }; department=department)
because of 
rule(isChair in {true}; student in {csStu5}, type in {transcript}; {read }; department=department)
==============================================
Removing Rule rule(isChair in {true}; student in {csStu1}, type in {transcript}; {read }; department=department)
because of 
rule(isChair in {true}; student in {csStu1}, type in {transcript}; {read }; department=department)
==============================================
Removing Rule rule(department in {registrar}, position in {staff}, uid in {registrar2}; crs in {ee602}, department in {ee}, type in {roster}; {write }; )
because of 
rule(department in {registrar}, position in {staff}, uid in {registrar2}; crs in {ee602}, department in {ee}, type in {roster}; {write read }; )
==============================================
Removing Rule rule(crsTaken supseteqln {{cs602}}, position in {student}; type in {gradebook}; {addScore }; crsTaught ] crs, department=department)
because of 
rule(crsTaken supseteqln {{cs602}}, position in {student}; type in {gradebook}; {readScore addScore }; crsTaught ] crs, department=department)
==============================================
Removing Rule rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {csStu5}, type in {application}; {setStatus }; )
because of 
rule(department in {admissions}, position in {staff}, uid in {admissions2}; student in {csStu5}, type in {application}; {read setStatus }; )
Merging two rules:
1.rule(position in {student faculty}; type in {gradebook}; {readScore }; crsTaught ] crs, department=department)
2.rule(crsTaken supseteqln {{ee601}}, position in {student}; type in {gradebook}; {readScore addScore }; crsTaught ] crs, department=department)
==============================================
Result Rule rule(position in {student faculty}; type in {gradebook}; {readScore addScore }; crsTaught ] crs, department=department)
Merging two rules:
1.rule(crsTaken supseteqln {{ee601}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
2.rule(crsTaken supseteqln {{cs601}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
==============================================
Result Rule rule(crsTaken supseteqln {{ee601} {cs601}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
Merging two rules:
1.rule(crsTaken supseteqln {{ee601} {cs601}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
2.rule(crsTaken supseteqln {{ee101}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
==============================================
Result Rule rule(crsTaken supseteqln {{ee601} {ee101} {cs601}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
Merging two rules:
1.rule(crsTaken supseteqln {{ee601} {ee101} {cs601}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
2.rule(crsTaken supseteqln {{cs101}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
==============================================
Result Rule rule(crsTaken supseteqln {{ee601} {ee101} {cs101} {cs601}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
Merging two rules:
1.rule(crsTaken supseteqln {{ee601} {ee101} {cs101} {cs601}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
2.rule(crsTaken supseteqln {{ee602}}, crsTaught supseteqln {{ee601}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
==============================================
Result Rule rule(crsTaken supseteqln {{ee601} {ee101} {ee602} {cs101} {cs601}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
Merging two rules:
1.rule(crsTaken supseteqln {{ee601} {ee101} {ee602} {cs101} {cs601}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
2.rule(crsTaken supseteqln {{cs602}}, crsTaught supseteqln {{cs601}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
==============================================
Result Rule rule(crsTaken supseteqln {{cs602} {ee601} {ee101} {cs101} {ee602} {cs601}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
Merging two rules:
1.rule(crsTaken supseteqln {{ee601}}, department in {ee}, position in {student}; type in {application}; {checkStatus }; uid=student)
2.rule(position in {applicant}; type in {application}; {checkStatus }; uid=student)
==============================================
Result Rule rule(position in {student applicant}; type in {application}; {checkStatus }; uid=student)
Merging two rules:
1.rule(department in {admissions}, position in {staff}; student in {csStu2}, type in {application}; {read }; )
2.rule(department in {admissions}, position in {staff}; student in {applicant2}, type in {application}; {read }; )
==============================================
Result Rule rule(department in {admissions}, position in {staff}; student in {csStu2 applicant2}, type in {application}; {read }; )
Merging two rules:
1.rule(department in {admissions}, position in {staff}; student in {csStu2 applicant2}, type in {application}; {read }; )
2.rule(department in {admissions}, position in {staff}; student in {eeStu4}, type in {application}; {read }; )
==============================================
Result Rule rule(department in {admissions}, position in {staff}; student in {eeStu4 csStu2 applicant2}, type in {application}; {read }; )
Merging two rules:
1.rule(department in {admissions}, position in {staff}; student in {eeStu4 csStu2 applicant2}, type in {application}; {read }; )
2.rule(department in {admissions}, position in {staff}; student in {csStu5}, type in {application}; {read }; )
==============================================
Result Rule rule(department in {admissions}, position in {staff}; student in {eeStu4 csStu5 csStu2 applicant2}, type in {application}; {read }; )
Merging two rules:
1.rule(department in {admissions}, position in {staff}; student in {eeStu4 csStu5 csStu2 applicant2}, type in {application}; {read }; )
2.rule(department in {admissions}, position in {staff}; student in {applicant1}, type in {application}; {read }; )
==============================================
Result Rule rule(department in {admissions}, position in {staff}; student in {eeStu4 applicant1 csStu5 csStu2 applicant2}, type in {application}; {read }; )
Merging two rules:
1.rule(department in {admissions}, position in {staff}; student in {eeStu4 applicant1 csStu5 csStu2 applicant2}, type in {application}; {read }; )
2.rule(department in {admissions}, position in {staff}; student in {csStu1}, type in {application}; {read }; )
==============================================
Result Rule rule(department in {admissions}, position in {staff}; student in {eeStu4 applicant1 csStu5 csStu1 csStu2 applicant2}, type in {application}; {read }; )
Merging two rules:
1.rule(department in {admissions}, position in {staff}; student in {eeStu4 applicant1 csStu5 csStu1 csStu2 applicant2}, type in {application}; {read }; )
2.rule(department in {admissions}, position in {staff}; student in {csStu3}, type in {application}; {read }; )
==============================================
Result Rule rule(department in {admissions}, position in {staff}; student in {eeStu4 applicant1 csStu5 csStu1 csStu3 csStu2 applicant2}, type in {application}; {read }; )
Merging two rules:
1.rule(department in {admissions}, position in {staff}; student in {eeStu4 applicant1 csStu5 csStu1 csStu3 csStu2 applicant2}, type in {application}; {read }; )
2.rule(department in {admissions}, position in {staff}; student in {eeStu1}, type in {application}; {read }; )
==============================================
Result Rule rule(department in {admissions}, position in {staff}; student in {eeStu4 applicant1 csStu5 eeStu1 csStu1 csStu3 csStu2 applicant2}, type in {application}; {read }; )
Merging two rules:
1.rule(department in {admissions}, position in {staff}; student in {eeStu4 applicant1 csStu5 eeStu1 csStu1 csStu3 csStu2 applicant2}, type in {application}; {read }; )
2.rule(department in {admissions}, position in {staff}; student in {eeStu5}, type in {application}; {setStatus }; )
==============================================
Result Rule rule(department in {admissions}, position in {staff}; student in {eeStu4 eeStu5 applicant1 csStu5 csStu1 eeStu1 csStu3 csStu2 applicant2}, type in {application}; {read setStatus }; )
Merging two rules:
1.rule(department in {admissions}, position in {staff}; student in {eeStu4 eeStu5 applicant1 csStu5 csStu1 eeStu1 csStu3 csStu2 applicant2}, type in {application}; {read setStatus }; )
2.rule(department in {admissions}, position in {staff}; student in {csStu4}, type in {application}; {setStatus }; )
==============================================
Result Rule rule(department in {admissions}, position in {staff}; student in {eeStu4 applicant1 eeStu5 csStu4 csStu5 eeStu1 csStu1 csStu3 csStu2 applicant2}, type in {application}; {read setStatus }; )
Merging two rules:
1.rule(department in {admissions}, position in {staff}; student in {eeStu4 applicant1 eeStu5 csStu4 csStu5 eeStu1 csStu1 csStu3 csStu2 applicant2}, type in {application}; {read setStatus }; )
2.rule(department in {admissions}, position in {staff}; student in {eeStu3}, type in {application}; {read }; )
==============================================
Result Rule rule(department in {admissions}, position in {staff}; student in {eeStu4 eeStu5 applicant1 csStu4 csStu5 csStu1 eeStu1 eeStu3 csStu3 csStu2 applicant2}, type in {application}; {read setStatus }; )
Merging two rules:
1.rule(department in {admissions}, position in {staff}; student in {eeStu4 eeStu5 applicant1 csStu4 csStu5 csStu1 eeStu1 eeStu3 csStu3 csStu2 applicant2}, type in {application}; {read setStatus }; )
2.rule(department in {admissions}, position in {staff}; student in {eeStu2}, type in {application}; {read }; )
==============================================
Result Rule rule(department in {admissions}, position in {staff}; student in {eeStu4 applicant1 eeStu5 csStu4 csStu5 eeStu1 csStu1 csStu3 eeStu3 eeStu2 csStu2 applicant2}, type in {application}; {read setStatus }; )
Merging two rules:
1.rule(department in {registrar}, position in {staff}; department in {ee}, student in {eeStu5}, type in {transcript}; {read }; )
2.rule(department in {registrar}, position in {staff}; crs in {cs601}, department in {cs}, type in {roster}; {read }; )
==============================================
Result Rule rule(department in {registrar}, position in {staff}; department in {ee cs}, type in {transcript roster}; {read }; )
Merging two rules:
1.rule(department in {registrar}, position in {staff}, uid in {registrar2}; crs in {ee101}, department in {ee}, type in {roster}; {write read }; )
2.rule(department in {registrar}, position in {staff}, uid in {registrar1}; crs in {cs101}, department in {cs}, type in {roster}; {write read }; )
==============================================
Result Rule rule(department in {registrar}, position in {staff}, uid in {registrar1 registrar2}; crs in {ee101 cs101}, department in {ee cs}, type in {roster}; {write read }; )
Merging two rules:
1.rule(department in {registrar}, position in {staff}, uid in {registrar1 registrar2}; crs in {ee101 cs101}, department in {ee cs}, type in {roster}; {write read }; )
2.rule(department in {registrar}, position in {staff}, uid in {registrar2}; crs in {cs601}, department in {cs}, type in {roster}; {write read }; )
==============================================
Result Rule rule(department in {registrar}, position in {staff}, uid in {registrar1 registrar2}; crs in {ee101 cs101 cs601}, department in {ee cs}, type in {roster}; {write read }; )
Merging two rules:
1.rule(department in {registrar}, position in {staff}, uid in {registrar1 registrar2}; crs in {ee101 cs101 cs601}, department in {ee cs}, type in {roster}; {write read }; )
2.rule(department in {registrar}, position in {staff}, uid in {registrar2}; crs in {cs602}, department in {cs}, type in {roster}; {write read }; )
==============================================
Result Rule rule(department in {registrar}, position in {staff}, uid in {registrar1 registrar2}; crs in {cs602 ee101 cs101 cs601}, department in {ee cs}, type in {roster}; {write read }; )
Merging two rules:
1.rule(department in {registrar}, position in {staff}, uid in {registrar1 registrar2}; crs in {cs602 ee101 cs101 cs601}, department in {ee cs}, type in {roster}; {write read }; )
2.rule(department in {registrar}, position in {staff}, uid in {registrar1}; crs in {ee602}, department in {ee}, type in {roster}; {write read }; )
==============================================
Result Rule rule(department in {registrar}, position in {staff}, uid in {registrar1 registrar2}; crs in {cs602 ee101 ee602 cs101 cs601}, department in {ee cs}, type in {roster}; {write read }; )
Merging two rules:
1.rule(department in {registrar}, position in {staff}, uid in {registrar1 registrar2}; crs in {cs602 ee101 ee602 cs101 cs601}, department in {ee cs}, type in {roster}; {write read }; )
2.rule(department in {registrar}, position in {staff}, uid in {registrar1}; crs in {ee601}, department in {ee}, type in {roster}; {write read }; )
==============================================
Result Rule rule(department in {registrar}, position in {staff}, uid in {registrar1 registrar2}; crs in {cs602 ee601 ee101 cs101 ee602 cs601}, department in {ee cs}, type in {roster}; {write read }; )
Merging two rules:
1.rule(isChair in {true}; student in {csStu3}, type in {transcript}; {read }; department=department)
2.rule(isChair in {true}; student in {eeStu3}, type in {transcript}; {read }; department=department)
==============================================
Result Rule rule(isChair in {true}; student in {eeStu3 csStu3}, type in {transcript}; {read }; department=department)
Merging two rules:
1.rule(isChair in {true}; student in {eeStu3 csStu3}, type in {transcript}; {read }; department=department)
2.rule(isChair in {true}; student in {eeStu2}, type in {transcript}; {read }; department=department)
==============================================
Result Rule rule(isChair in {true}; student in {csStu3 eeStu3 eeStu2}, type in {transcript}; {read }; department=department)
Merging two rules:
1.rule(isChair in {true}; student in {csStu3 eeStu3 eeStu2}, type in {transcript}; {read }; department=department)
2.rule(isChair in {true}; student in {csStu4}, type in {transcript}; {read }; department=department)
==============================================
Result Rule rule(isChair in {true}; student in {csStu4 eeStu3 csStu3 eeStu2}, type in {transcript}; {read }; department=department)
Merging two rules:
1.rule(isChair in {true}; student in {csStu4 eeStu3 csStu3 eeStu2}, type in {transcript}; {read }; department=department)
2.rule(isChair in {true}; student in {eeStu4}, type in {transcript}; {read }; department=department)
==============================================
Result Rule rule(isChair in {true}; student in {eeStu4 csStu4 csStu3 eeStu3 eeStu2}, type in {transcript}; {read }; department=department)
Merging two rules:
1.rule(isChair in {true}; student in {eeStu4 csStu4 csStu3 eeStu3 eeStu2}, type in {transcript}; {read }; department=department)
2.rule(isChair in {true}; student in {eeStu5}, type in {transcript}; {read }; department=department)
==============================================
Result Rule rule(isChair in {true}; student in {eeStu4 eeStu5 csStu4 eeStu3 csStu3 eeStu2}, type in {transcript}; {read }; department=department)
Merging two rules:
1.rule(isChair in {true}; student in {eeStu4 eeStu5 csStu4 eeStu3 csStu3 eeStu2}, type in {transcript}; {read }; department=department)
2.rule(isChair in {true}; student in {eeStu1}, type in {transcript}; {read }; department=department)
==============================================
Result Rule rule(isChair in {true}; student in {eeStu4 eeStu5 csStu4 eeStu1 csStu3 eeStu3 eeStu2}, type in {transcript}; {read }; department=department)
Merging two rules:
1.rule(isChair in {true}; student in {eeStu4 eeStu5 csStu4 eeStu1 csStu3 eeStu3 eeStu2}, type in {transcript}; {read }; department=department)
2.rule(isChair in {true}; student in {csStu2}, type in {transcript}; {read }; department=department)
==============================================
Result Rule rule(isChair in {true}; student in {eeStu4 eeStu5 csStu4 eeStu1 eeStu3 csStu3 csStu2 eeStu2}, type in {transcript}; {read }; department=department)
Merging two rules:
1.rule(isChair in {true}; student in {eeStu4 eeStu5 csStu4 eeStu1 eeStu3 csStu3 csStu2 eeStu2}, type in {transcript}; {read }; department=department)
2.rule(isChair in {true}; student in {csStu5}, type in {transcript}; {read }; department=department)
==============================================
Result Rule rule(isChair in {true}; student in {eeStu4 eeStu5 csStu4 csStu5 eeStu1 csStu3 eeStu3 eeStu2 csStu2}, type in {transcript}; {read }; department=department)
Merging two rules:
1.rule(isChair in {true}; student in {eeStu4 eeStu5 csStu4 csStu5 eeStu1 csStu3 eeStu3 eeStu2 csStu2}, type in {transcript}; {read }; department=department)
2.rule(isChair in {true}; student in {csStu1}, type in {transcript}; {read }; department=department)
==============================================
Result Rule rule(isChair in {true}; student in {eeStu4 eeStu5 csStu4 csStu5 csStu1 eeStu1 eeStu3 csStu3 csStu2 eeStu2}, type in {transcript}; {read }; department=department)
==============================================
Round 1
1.
rule(position in {faculty}; type in {gradebook}; {readScore assignGrade addScore changeScore }; crsTaught ] crs, department=department)
2.
rule(position in {faculty}; type in {roster}; {read }; crsTaught ] crs, department=department)
3.
rule(position in {student}; type in {gradebook}; {readMyScores }; crsTaken ] crs, department=department)
4.
rule(position in {student faculty}; type in {gradebook}; {readScore addScore }; crsTaught ] crs, department=department)
5.
rule(crsTaken supseteqln {{cs602} {ee601} {ee101} {cs101} {ee602} {cs601}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
6.
rule(position in {student applicant}; type in {application}; {checkStatus }; uid=student)
7.
rule(department in {admissions}, position in {staff}; student in {eeStu4 applicant1 eeStu5 csStu4 csStu5 eeStu1 csStu1 csStu3 eeStu3 eeStu2 csStu2 applicant2}, type in {application}; {read setStatus }; )
8.
rule(department in {registrar}, position in {staff}; department in {ee cs}, type in {transcript roster}; {read }; )
9.
rule(department in {registrar}, position in {staff}, uid in {registrar1 registrar2}; crs in {cs602 ee601 ee101 cs101 ee602 cs601}, department in {ee cs}, type in {roster}; {write read }; )
10.
rule(isChair in {true}; student in {eeStu4 eeStu5 csStu4 csStu5 csStu1 eeStu1 eeStu3 csStu3 csStu2 eeStu2}, type in {transcript}; {read }; department=department)
==============================================
Time for the mergeRules: 266 millisec
==============================================
Eliminating Conjuncts for:
rule(position in {faculty}; type in {gradebook}; {readScore assignGrade addScore changeScore }; crsTaught ] crs, department=department)
==============================================
Eliminating Conjuncts for:
rule(position in {faculty}; type in {roster}; {read }; crsTaught ] crs, department=department)
==============================================
Eliminating Conjuncts for:
rule(position in {student}; type in {gradebook}; {readMyScores }; crsTaken ] crs, department=department)
==============================================
Eliminating Conjuncts for:
rule(position in {student faculty}; type in {gradebook}; {readScore addScore }; crsTaught ] crs, department=department)
==============================================
Eliminating Conjuncts for:
rule(crsTaken supseteqln {{cs602} {ee601} {ee101} {cs101} {ee602} {cs601}}, position in {student}; type in {transcript}; {read }; department=department, uid=student)
==============================================
Eliminating Conjuncts for:
rule(position in {student applicant}; type in {application}; {checkStatus }; uid=student)
==============================================
Eliminating Conjuncts for:
rule(department in {admissions}, position in {staff}; student in {eeStu4 applicant1 eeStu5 csStu4 csStu5 eeStu1 csStu1 csStu3 eeStu3 eeStu2 csStu2 applicant2}, type in {application}; {read setStatus }; )
==============================================
Eliminating Conjuncts for:
rule(department in {registrar}, position in {staff}; department in {ee cs}, type in {transcript roster}; {read }; )
==============================================
Eliminating Conjuncts for:
rule(department in {registrar}, position in {staff}, uid in {registrar1 registrar2}; crs in {cs602 ee601 ee101 cs101 ee602 cs601}, department in {ee cs}, type in {roster}; {write read }; )
==============================================
Eliminating Conjuncts for:
rule(isChair in {true}; student in {eeStu4 eeStu5 csStu4 csStu5 csStu1 eeStu1 eeStu3 csStu3 csStu2 eeStu2}, type in {transcript}; {read }; department=department)
==============================================
Eliminating Overlap Elements for:
rule(position in {faculty}; type in {gradebook}; {readScore assignGrade addScore changeScore }; crsTaught ] crs, department=department)
==============================================
Eliminating Overlap Elements for:
rule(position in {faculty}; type in {roster}; {read }; crsTaught ] crs, department=department)
==============================================
Eliminating Overlap Elements for:
rule(; type in {gradebook}; {readMyScores }; crsTaken ] crs, department=department)
==============================================
Eliminating Overlap Elements for:
rule(; type in {gradebook}; {readScore addScore }; crsTaught ] crs, department=department)
==============================================
Eliminating Overlap Elements for:
rule(; type in {transcript}; {read }; department=department, uid=student)
==============================================
Eliminating Overlap Elements for:
rule(; type in {application}; {checkStatus }; uid=student)
==============================================
Eliminating Overlap Elements for:
rule(department in {admissions}; type in {application}; {read setStatus }; )
==============================================
Eliminating Overlap Elements for:
rule(department in {registrar}; type in {transcript roster}; {read }; )
==============================================
Removing roster from PAE of 
rule(department in {registrar}; type in {transcript roster}; {read }; )because of 
rule(department in {registrar}; type in {roster}; {write read }; )
==============================================
Eliminating Overlap Elements for:
rule(department in {registrar}; type in {roster}; {write read }; )
==============================================
Eliminating Overlap Elements for:
rule(isChair in {true}; type in {transcript}; {read }; department=department)
==============================================
Eliminating Elements for:
rule(position in {faculty}; type in {gradebook}; {readScore assignGrade addScore changeScore }; crsTaught ] crs, department=department)
==============================================
Eliminating Elements for:
rule(position in {faculty}; type in {roster}; {read }; crsTaught ] crs, department=department)
==============================================
Eliminating Elements for:
rule(; type in {gradebook}; {readMyScores }; crsTaken ] crs, department=department)
==============================================
Eliminating Elements for:
rule(; type in {gradebook}; {readScore addScore }; crsTaught ] crs, department=department)
==============================================
Eliminating Elements for:
rule(; type in {transcript}; {read }; department=department, uid=student)
==============================================
Eliminating Elements for:
rule(; type in {application}; {checkStatus }; uid=student)
==============================================
Eliminating Elements for:
rule(department in {admissions}; type in {application}; {read setStatus }; )
==============================================
Eliminating Elements for:
rule(department in {registrar}; type in {transcript}; {read }; )
==============================================
Eliminating Elements for:
rule(department in {registrar}; type in {roster}; {write read }; )
==============================================
Eliminating Elements for:
rule(isChair in {true}; type in {transcript}; {read }; department=department)
==============================================
Eliminating Overlap Ops for:
rule(position in {faculty}; type in {gradebook}; {readScore assignGrade addScore changeScore }; crsTaught ] crs, department=department)
==============================================
Eliminating Overlap Ops for:
rule(position in {faculty}; type in {roster}; {read }; crsTaught ] crs, department=department)
==============================================
Eliminating Overlap Ops for:
rule(; type in {gradebook}; {readMyScores }; crsTaken ] crs, department=department)
==============================================
Eliminating Overlap Ops for:
rule(; type in {gradebook}; {readScore addScore }; crsTaught ] crs, department=department)
==============================================
Eliminating Overlap Ops for:
rule(; type in {transcript}; {read }; department=department, uid=student)
==============================================
Eliminating Overlap Ops for:
rule(; type in {application}; {checkStatus }; uid=student)
==============================================
Eliminating Overlap Ops for:
rule(department in {admissions}; type in {application}; {read setStatus }; )
==============================================
Eliminating Overlap Ops for:
rule(department in {registrar}; type in {transcript}; {read }; )
==============================================
Eliminating Overlap Ops for:
rule(department in {registrar}; type in {roster}; {write read }; )
==============================================
Eliminating Overlap Ops for:
rule(isChair in {true}; type in {transcript}; {read }; department=department)
==============================================
Eliminating Constraints for:
rule(position in {faculty}; type in {gradebook}; {assignGrade changeScore }; crsTaught ] crs, department=department)
==============================================
Eliminating Constraints for:
rule(position in {faculty}; type in {roster}; {read }; crsTaught ] crs, department=department)
==============================================
Eliminating Constraints for:
rule(; type in {gradebook}; {readMyScores }; crsTaken ] crs, department=department)
==============================================
Eliminating Constraints for:
rule(; type in {gradebook}; {readScore addScore }; crsTaught ] crs, department=department)
==============================================
Eliminating Constraints for:
rule(; type in {transcript}; {read }; department=department, uid=student)
==============================================
Eliminating Constraints for:
rule(; type in {application}; {checkStatus }; uid=student)
==============================================
Eliminating Constraints for:
rule(department in {admissions}; type in {application}; {read setStatus }; )
==============================================
Eliminating Constraints for:
rule(department in {registrar}; type in {transcript}; {read }; )
==============================================
Eliminating Constraints for:
rule(department in {registrar}; type in {roster}; {write read }; )
==============================================
Eliminating Constraints for:
rule(isChair in {true}; type in {transcript}; {read }; department=department)
==============================================
Time for simplifyRules Round: 1 56 millisec
==============================================
Round 2
1.
rule(position in {faculty}; type in {gradebook}; {assignGrade changeScore }; crsTaught ] crs)
2.
rule(position in {faculty}; type in {roster}; {read }; crsTaught ] crs)
3.
rule(; type in {gradebook}; {readMyScores }; crsTaken ] crs)
4.
rule(; type in {gradebook}; {readScore addScore }; crsTaught ] crs)
5.
rule(; type in {transcript}; {read }; uid=student)
6.
rule(; type in {application}; {checkStatus }; uid=student)
7.
rule(department in {admissions}; type in {application}; {read setStatus }; )
8.
rule(department in {registrar}; type in {transcript}; {read }; )
9.
rule(department in {registrar}; type in {roster}; {write read }; )
10.
rule(isChair in {true}; type in {transcript}; {read }; department=department)
==============================================
Time for mergeRules Round: 2 2 millisec
==============================================
Eliminating Conjuncts for:
rule(position in {faculty}; type in {gradebook}; {assignGrade changeScore }; crsTaught ] crs)
==============================================
Eliminating Conjuncts for:
rule(position in {faculty}; type in {roster}; {read }; crsTaught ] crs)
==============================================
Eliminating Conjuncts for:
rule(; type in {gradebook}; {readMyScores }; crsTaken ] crs)
==============================================
Eliminating Conjuncts for:
rule(; type in {gradebook}; {readScore addScore }; crsTaught ] crs)
==============================================
Eliminating Conjuncts for:
rule(; type in {transcript}; {read }; uid=student)
==============================================
Eliminating Conjuncts for:
rule(; type in {application}; {checkStatus }; uid=student)
==============================================
Eliminating Conjuncts for:
rule(department in {admissions}; type in {application}; {read setStatus }; )
==============================================
Eliminating Conjuncts for:
rule(department in {registrar}; type in {transcript}; {read }; )
==============================================
Eliminating Conjuncts for:
rule(department in {registrar}; type in {roster}; {write read }; )
==============================================
Eliminating Conjuncts for:
rule(isChair in {true}; type in {transcript}; {read }; department=department)
==============================================
Eliminating Overlap Elements for:
rule(position in {faculty}; type in {gradebook}; {assignGrade changeScore }; crsTaught ] crs)
==============================================
Eliminating Overlap Elements for:
rule(position in {faculty}; type in {roster}; {read }; crsTaught ] crs)
==============================================
Eliminating Overlap Elements for:
rule(; type in {gradebook}; {readMyScores }; crsTaken ] crs)
==============================================
Eliminating Overlap Elements for:
rule(; type in {gradebook}; {readScore addScore }; crsTaught ] crs)
==============================================
Eliminating Overlap Elements for:
rule(; type in {transcript}; {read }; uid=student)
==============================================
Eliminating Overlap Elements for:
rule(; type in {application}; {checkStatus }; uid=student)
==============================================
Eliminating Overlap Elements for:
rule(department in {admissions}; type in {application}; {read setStatus }; )
==============================================
Eliminating Overlap Elements for:
rule(department in {registrar}; type in {transcript}; {read }; )
==============================================
Eliminating Overlap Elements for:
rule(department in {registrar}; type in {roster}; {write read }; )
==============================================
Eliminating Overlap Elements for:
rule(isChair in {true}; type in {transcript}; {read }; department=department)
==============================================
Eliminating Elements for:
rule(position in {faculty}; type in {gradebook}; {assignGrade changeScore }; crsTaught ] crs)
==============================================
Eliminating Elements for:
rule(position in {faculty}; type in {roster}; {read }; crsTaught ] crs)
==============================================
Eliminating Elements for:
rule(; type in {gradebook}; {readMyScores }; crsTaken ] crs)
==============================================
Eliminating Elements for:
rule(; type in {gradebook}; {readScore addScore }; crsTaught ] crs)
==============================================
Eliminating Elements for:
rule(; type in {transcript}; {read }; uid=student)
==============================================
Eliminating Elements for:
rule(; type in {application}; {checkStatus }; uid=student)
==============================================
Eliminating Elements for:
rule(department in {admissions}; type in {application}; {read setStatus }; )
==============================================
Eliminating Elements for:
rule(department in {registrar}; type in {transcript}; {read }; )
==============================================
Eliminating Elements for:
rule(department in {registrar}; type in {roster}; {write read }; )
==============================================
Eliminating Elements for:
rule(isChair in {true}; type in {transcript}; {read }; department=department)
==============================================
Eliminating Overlap Ops for:
rule(position in {faculty}; type in {gradebook}; {assignGrade changeScore }; crsTaught ] crs)
==============================================
Eliminating Overlap Ops for:
rule(position in {faculty}; type in {roster}; {read }; crsTaught ] crs)
==============================================
Eliminating Overlap Ops for:
rule(; type in {gradebook}; {readMyScores }; crsTaken ] crs)
==============================================
Eliminating Overlap Ops for:
rule(; type in {gradebook}; {readScore addScore }; crsTaught ] crs)
==============================================
Eliminating Overlap Ops for:
rule(; type in {transcript}; {read }; uid=student)
==============================================
Eliminating Overlap Ops for:
rule(; type in {application}; {checkStatus }; uid=student)
==============================================
Eliminating Overlap Ops for:
rule(department in {admissions}; type in {application}; {read setStatus }; )
==============================================
Eliminating Overlap Ops for:
rule(department in {registrar}; type in {transcript}; {read }; )
==============================================
Eliminating Overlap Ops for:
rule(department in {registrar}; type in {roster}; {write read }; )
==============================================
Eliminating Overlap Ops for:
rule(isChair in {true}; type in {transcript}; {read }; department=department)
==============================================
Eliminating Constraints for:
rule(position in {faculty}; type in {gradebook}; {assignGrade changeScore }; crsTaught ] crs)
==============================================
Eliminating Constraints for:
rule(position in {faculty}; type in {roster}; {read }; crsTaught ] crs)
==============================================
Eliminating Constraints for:
rule(; type in {gradebook}; {readMyScores }; crsTaken ] crs)
==============================================
Eliminating Constraints for:
rule(; type in {gradebook}; {readScore addScore }; crsTaught ] crs)
==============================================
Eliminating Constraints for:
rule(; type in {transcript}; {read }; uid=student)
==============================================
Eliminating Constraints for:
rule(; type in {application}; {checkStatus }; uid=student)
==============================================
Eliminating Constraints for:
rule(department in {admissions}; type in {application}; {read setStatus }; )
==============================================
Eliminating Constraints for:
rule(department in {registrar}; type in {transcript}; {read }; )
==============================================
Eliminating Constraints for:
rule(department in {registrar}; type in {roster}; {write read }; )
==============================================
Eliminating Constraints for:
rule(isChair in {true}; type in {transcript}; {read }; department=department)
==============================================
Adding Rule: 
rule(department in {admissions}; type in {application}; {read setStatus }; )
==============================================
Adding Rule: 
rule(department in {registrar}; type in {transcript}; {read }; )
==============================================
Adding Rule: 
rule(department in {registrar}; type in {roster}; {write read }; )
==============================================
Adding Rule: 
rule(; type in {gradebook}; {readScore addScore }; crsTaught ] crs)
==============================================
Adding Rule: 
rule(; type in {gradebook}; {readMyScores }; crsTaken ] crs)
==============================================
Adding Rule: 
rule(; type in {application}; {checkStatus }; uid=student)
==============================================
Adding Rule: 
rule(; type in {transcript}; {read }; uid=student)
==============================================
Adding Rule: 
rule(isChair in {true}; type in {transcript}; {read }; department=department)
==============================================
Adding Rule: 
rule(position in {faculty}; type in {gradebook}; {assignGrade changeScore }; crsTaught ] crs)
==============================================
Adding Rule: 
rule(position in {faculty}; type in {roster}; {read }; crsTaught ] crs)
==============================================
Time for selection step:  25 millisec
==============================================
OUTPUT RULES

1.
rule(department in {admissions}; type in {application}; {read setStatus }; )
WSC=4.0
2.
rule(department in {registrar}; type in {transcript}; {read }; )
WSC=3.0
3.
rule(department in {registrar}; type in {roster}; {write read }; )
WSC=4.0
4.
rule(; type in {gradebook}; {readScore addScore }; crsTaught ] crs)
WSC=4.0
5.
rule(; type in {gradebook}; {readMyScores }; crsTaken ] crs)
WSC=3.0
6.
rule(; type in {application}; {checkStatus }; uid=student)
WSC=3.0
7.
rule(; type in {transcript}; {read }; uid=student)
WSC=3.0
8.
rule(isChair in {true}; type in {transcript}; {read }; department=department)
WSC=4.0
9.
rule(position in {faculty}; type in {gradebook}; {assignGrade changeScore }; crsTaught ] crs)
WSC=5.0
10.
rule(position in {faculty}; type in {roster}; {read }; crsTaught ] crs)
WSC=4.0

total WSC=37
==============================================
INPUT-OUTPUT CORRESPONDENCE
1. rule(; type in {gradebook}; {readMyScores }; crsTaken ] crs)
SIMILAR OUTPUT RULES:
rule(; type in {gradebook}; {readMyScores }; crsTaken ] crs), similarity: 1.00

2. rule(; type in {gradebook}; {readScore addScore }; crsTaught ] crs)
SIMILAR OUTPUT RULES:
rule(; type in {gradebook}; {readScore addScore }; crsTaught ] crs), similarity: 1.00

3. rule(position in {faculty}; type in {gradebook}; {assignGrade changeScore }; crsTaught ] crs)
SIMILAR OUTPUT RULES:
rule(position in {faculty}; type in {gradebook}; {assignGrade changeScore }; crsTaught ] crs), similarity: 1.00

4. rule(department in {registrar}; type in {roster}; {write read }; )
SIMILAR OUTPUT RULES:
rule(department in {registrar}; type in {roster}; {write read }; ), similarity: 1.00

5. rule(position in {faculty}; type in {roster}; {read }; crsTaught ] crs)
SIMILAR OUTPUT RULES:
rule(position in {faculty}; type in {roster}; {read }; crsTaught ] crs), similarity: 1.00

6. rule(; type in {transcript}; {read }; uid=student)
SIMILAR OUTPUT RULES:
rule(; type in {transcript}; {read }; uid=student), similarity: 1.00

7. rule(isChair in {true}; type in {transcript}; {read }; department=department)
SIMILAR OUTPUT RULES:
rule(isChair in {true}; type in {transcript}; {read }; department=department), similarity: 1.00

8. rule(department in {registrar}; type in {transcript}; {read }; )
SIMILAR OUTPUT RULES:
rule(department in {registrar}; type in {transcript}; {read }; ), similarity: 1.00

9. rule(; type in {application}; {checkStatus }; uid=student)
SIMILAR OUTPUT RULES:
rule(; type in {application}; {checkStatus }; uid=student), similarity: 1.00

10. rule(department in {admissions}; type in {application}; {read setStatus }; )
SIMILAR OUTPUT RULES:
rule(department in {admissions}; type in {application}; {read setStatus }; ), similarity: 1.00

==============================================
Consistency Check Result:
true
==============================================
Statistics:
Number of calls to mergeRules: 2
Number of generalizations: 100
Number of merges: 33
Number of eliminated conjuncts: 14
Number of eliminated values: 0
Number of eliminated elements for multi-value: 3
Number of eliminated constraints: 0
Number of subsumption checks: 52
Number of unsuccessful merges: 67
Number of removed pairs: 0
Number of extra compares: 688
==============================================
Remaining time: 42 millisec
10 10 37.0 378.0 168 37.0 785
