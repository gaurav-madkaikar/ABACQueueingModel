# Zhongyuan Xu and Scott Stoller
# ABAC policy for a university.

# User Attributes
# recall that some attributes might be irrelevant for some users;
# those attributes are given the value $\bot$ for those users.

# position: the user's position (applicant, student, faculty, or staff)

# department: the user's department.  we use this attribute for
# administrative departments (admissions office and registrar) as well as
# academic departments.

# crsTaken: set of courses being taken by a student.

# crsTaught: set of courses for which the user is the instructor (if the user
# is a faculty) or the TA (if the user is a student).

# isChair: true if the user is the chair of his/her department

# Resource Attributes

# type: the type of resource (application, gradebook, roster, or transcript)

# crs: the course this gradebook or roster is for

# student: the student whose transcript or application this is
# (for type=transcript or type=application)

# department: the department the course is in, for type=gradebook or roster;
# the department the student is in, for type=transcript

#------------------------------------------------------------
# user attribute data
#------------------------------------------------------------

# applicants for admission to the university

userAttrib(applicant1, position=applicant)
userAttrib(applicant2, position=applicant)

# students

userAttrib(csStu1, position=student, department=cs, crsTaken={cs101})
userAttrib(csStu2, position=student, department=cs, crsTaken={cs601}, crsTaught={cs101 cs602})
userAttrib(csStu3, position=student, department=cs, crsTaken={cs602}, crsTaught={cs601})
userAttrib(csStu4, position=student, department=cs, crsTaken={cs601})
userAttrib(csStu5, position=student, department=cs, crsTaken={cs601 cs602})

userAttrib(eeStu1, position=student, department=ee, crsTaken={ee101})
userAttrib(eeStu2, position=student, department=ee, crsTaken={ee601}, crsTaught={ee101 ee602})
userAttrib(eeStu3, position=student, department=ee, crsTaken={ee602}, crsTaught={ee601})
userAttrib(eeStu4, position=student, department=ee, crsTaken={ee601})
userAttrib(eeStu5, position=student, department=ee, crsTaken={ee601 ee602})

# faculty

userAttrib(csFac1, position=faculty, department=cs, crsTaught={cs101})
userAttrib(csFac2, position=faculty, department=cs, crsTaught={cs601})
userAttrib(csChair, isChair=true, department=cs)

userAttrib(eeFac1, position=faculty, department=ee, crsTaught={ee101})
userAttrib(eeFac2, position=faculty, department=ee, crsTaught={ee601})
userAttrib(eeChair, isChair=true, department=ee)

# staff

userAttrib(registrar1, position=staff, department=registrar)
userAttrib(registrar2, position=staff, department=registrar)

userAttrib(admissions1, position=staff, department=admissions)
userAttrib(admissions2, position=staff, department=admissions)

#------------------------------------------------------------
# resource attribute data
#------------------------------------------------------------

# applications.  applications exist for applicants and students (accepted
# applicants).

resourceAttrib(application1, type=application, student=applicant1)
resourceAttrib(application2, type=application, student=applicant2)

resourceAttrib(csStu1application, type=application, student=csStu1)
resourceAttrib(csStu2application, type=application, student=csStu2)
resourceAttrib(csStu3application, type=application, student=csStu3)
resourceAttrib(csStu4application, type=application, student=csStu4)
resourceAttrib(csStu5application, type=application, student=csStu5)

resourceAttrib(eeStu1application, type=application, student=eeStu1)
resourceAttrib(eeStu2application, type=application, student=eeStu2)
resourceAttrib(eeStu3application, type=application, student=eeStu3)
resourceAttrib(eeStu4application, type=application, student=eeStu4)
resourceAttrib(eeStu5application, type=application, student=eeStu5)

# gradebooks

resourceAttrib(cs101gradebook, department=cs, crs=cs101, type=gradebook)
resourceAttrib(cs601gradebook, department=cs, crs=cs601, type=gradebook)
resourceAttrib(cs602gradebook, department=cs, crs=cs602, type=gradebook)

resourceAttrib(ee101gradebook, department=ee, crs=ee101, type=gradebook)
resourceAttrib(ee601gradebook, department=ee, crs=ee601, type=gradebook)
resourceAttrib(ee602gradebook, department=ee, crs=ee602, type=gradebook)

# rosters

resourceAttrib(cs101roster, department=cs, crs=cs101, type=roster)
resourceAttrib(cs601roster, department=cs, crs=cs601, type=roster)
resourceAttrib(cs602roster, department=cs, crs=cs602, type=roster)

resourceAttrib(ee101roster, department=ee, crs=ee101, type=roster)
resourceAttrib(ee601roster, department=ee, crs=ee601, type=roster)
resourceAttrib(ee602roster, department=ee, crs=ee602, type=roster)

# transcripts

resourceAttrib(csStu1trans, student=csStu1, department=cs, type=transcript)
resourceAttrib(csStu2trans, student=csStu2, department=cs, type=transcript)
resourceAttrib(csStu3trans, student=csStu3, department=cs, type=transcript)
resourceAttrib(csStu4trans, student=csStu4, department=cs, type=transcript)
resourceAttrib(csStu5trans, student=csStu5, department=cs, type=transcript)

resourceAttrib(eeStu1trans, student=eeStu1, department=ee, type=transcript)
resourceAttrib(eeStu2trans, student=eeStu2, department=ee, type=transcript)
resourceAttrib(eeStu3trans, student=eeStu3, department=ee, type=transcript)
resourceAttrib(eeStu4trans, student=eeStu4, department=ee, type=transcript)
resourceAttrib(eeStu5trans, student=eeStu5, department=ee, type=transcript)

#------------------------------------------------------------
# rules for gradebooks
#------------------------------------------------------------

# a user can read his/her own scores in gradebooks for courses he/she has taken.
rule(; type in {gradebook}; {readMyScores}; crsTaken ] crs)

# a user (the instructor or TA) can add scores and read scores in the
# gradebook for courses he/she is teaching.
rule(; type in {gradebook}; {addScore readScore}; crsTaught ] crs;)

# the instructor for a course (i.e., a faculty teaching the course) can
# change scores and assign grades in the gradebook for that course.
rule(position in {faculty}; type in {gradebook}; {changeScore assignGrade}; crsTaught ] crs)

#------------------------------------------------------------
# rules for rosters
#------------------------------------------------------------

# a user in the registrar's office can read and modify all rosters.
rule(department in {registrar}; type in {roster}; {read write}; )

# the instructor for a course (i.e., a faculty teaching the course) can
# read the course roster
rule(position in {faculty}; type in {roster}; {read}; crsTaught ] crs)

#------------------------------------------------------------
# rules for transcripts
#------------------------------------------------------------

# a user can read his/her own transcript.
rule(; type in {transcript}; {read}; uid=student)

# the chair of a department can read the transcripts of all students in that
# department.
rule(isChair in {true}; type in {transcript}; {read}; department=department)

# a user in the registrar's office can read every student's transcript.
rule(department in {registrar}; type in {transcript}; {read}; )

#------------------------------------------------------------
# rules for applications for admission
#------------------------------------------------------------

# a user can check the status of his/her own application
rule(; type in {application}; {checkStatus}; uid=student)

# a user in the admissions office can read, and update the status of, every application.
rule(department in {admissions}; type in {application}; {read setStatus}; )

unremovableResourceAttribs(type)
