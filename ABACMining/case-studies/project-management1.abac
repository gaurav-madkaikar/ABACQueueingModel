# Zhongyuan Xu and Scott D. Stoller
# ABAC policy for a project management system.

# User Attributes

# projects: projects the user is working on

# projectsLed: projects led by the user.  this is specified explicitly,
# instead of being implied by a user working on a project and having
# projectLeader among his administrative roles, because the user might work
# on some projects in non-leader roles.

# adminRoles: the user's administrative roles, e.g., accountant, auditor,
# planner, manager
 
# expertise: the user's areas of technical expertise.  for example, for a
# software project, expertise might include design and coding.

# tasks: tasks assigned to this user

# department: department that the user is in

# isEmployee: true if the user is an employee, false if the user is a contractor

# Resource Attributes

# type: task, schedule, or budget

# project: project that the task, schedule, or budget is for

# department: department that the aforementioned project is in

# expertise: areas of technical expertise required to work on the task.

# proprietary: true if the task involves proprietary information, which is
# accessible only to employees (not contractors).

#------------------------------------------------------------
# user attribute data
#------------------------------------------------------------

# naming convention: proj<i><j> is the j'th project in department i

# accountants
userAttrib(acc1, adminRoles={accountant}, projects={proj11 proj12})
userAttrib(acc2, adminRoles={accountant}, projects={proj21 proj22})

# auditors
userAttrib(aud1, adminRoles={auditor}, projects={proj11 proj12})
userAttrib(aud2, adminRoles={auditor}, projects={proj21 proj22})

# planners
userAttrib(plan1, adminRoles={planner}, projects={proj11 proj12})
userAttrib(plan2, adminRoles={planner}, projects={proj21 proj22})

# managers
userAttrib(mgr1, adminRoles={manager}, department=dept1)
userAttrib(mgr2, adminRoles={manager}, department=dept2)

# project leaders
userAttrib(ldr11, projects={proj11 proj12}, projectsLed={proj11}, department=dept1)
userAttrib(ldr12, projects={proj12}, projectsLed={proj12}, department=dept1)
userAttrib(ldr2, projects={proj21 proj22}, projectsLed={proj21 proj22}, department=dept2)

# technical workers - designers
userAttrib(des11, expertise={design}, projects={proj11}, isEmployee=True_, tasks={proj11task1a proj11task1propa})
userAttrib(des12, expertise={design}, projects={proj12}, isEmployee=False_, tasks={proj12task1a proj12task1propa})
userAttrib(des21, expertise={design}, projects={proj21}, isEmployee=True_, tasks={proj21task1a proj21task1propa})
userAttrib(des22, expertise={design}, projects={proj22}, isEmployee=False_, tasks={proj22task1a proj22task1propa})

# technical workers - coders
userAttrib(code11, expertise={coding}, projects={proj11}, isEmployee=True_, tasks={proj11task2a proj11task2propa})
userAttrib(code12, expertise={coding}, projects={proj12}, isEmployee=False_, tasks={proj12task2a proj12task2propa})
userAttrib(code21, expertise={coding}, projects={proj21}, isEmployee=True_, tasks={proj21task2a proj21task2propa})
userAttrib(code22, expertise={coding}, projects={proj22}, isEmployee=False_, tasks={proj22task2a proj22task2propa})

#------------------------------------------------------------
# resource attribute data
#------------------------------------------------------------

# for each project, for each area of expertise, for proprietary in
# {true,false}, there is an assigned task (whose rid ends with "a") and an
# unassigned task.

# proj11
resourceAttrib(proj11budget,type=budget, project=proj11, department=dept1)
resourceAttrib(proj11sched, type=schedule, project=proj11, department=dept1)
# un-proprietary tasks
resourceAttrib(proj11task1a, type=task, project=proj11, department=dept1, expertise={design}, proprietary=false)
resourceAttrib(proj11task2a, type=task, project=proj11, department=dept1, expertise={coding}, proprietary=false)
resourceAttrib(proj11task1, type=task, project=proj11, department=dept1, expertise={design}, proprietary=false)
resourceAttrib(proj11task2, type=task, project=proj11, department=dept1, expertise={coding}, proprietary=false)
# proprietary tasks
resourceAttrib(proj11task1propa, type=task, project=proj11, department=dept1, expertise={design}, proprietary=true)
resourceAttrib(proj11task2propa, type=task, project=proj11, department=dept1, expertise={coding}, proprietary=true)
resourceAttrib(proj11task1prop, type=task, project=proj11, department=dept1, expertise={design}, proprietary=true)
resourceAttrib(proj11task2prop, type=task, project=proj11, department=dept1, expertise={coding}, proprietary=true)

# proj12
resourceAttrib(proj12budget,type=budget, project=proj12, department=dept1)
resourceAttrib(proj12sched, type=schedule, project=proj12, department=dept1)
# un-proprietary tasks
resourceAttrib(proj12task1a, type=task, project=proj12, department=dept1, expertise={design}, proprietary=false)
resourceAttrib(proj12task2a, type=task, project=proj12, department=dept1, expertise={coding}, proprietary=false)
resourceAttrib(proj12task1, type=task, project=proj12, department=dept1, expertise={design}, proprietary=false)
resourceAttrib(proj12task2, type=task, project=proj12, department=dept1, expertise={coding}, proprietary=false)
# proprietary tasks
resourceAttrib(proj12task1propa, type=task, project=proj12, department=dept1, expertise={design}, proprietary=true)
resourceAttrib(proj12task2propa, type=task, project=proj12, department=dept1, expertise={coding}, proprietary=true)
resourceAttrib(proj12task1prop, type=task, project=proj12, department=dept1, expertise={design}, proprietary=true)
resourceAttrib(proj12task2prop, type=task, project=proj12, department=dept1, expertise={coding}, proprietary=true)

# proj21
resourceAttrib(proj21budget,type=budget, project=proj21, department=dept2)
resourceAttrib(proj21sched, type=schedule, project=proj21, department=dept2)
# un-proprietary tasks
resourceAttrib(proj21task1a, type=task, project=proj21, department=dept2, expertise={design}, proprietary=false)
resourceAttrib(proj21task2a, type=task, project=proj21, department=dept2, expertise={coding}, proprietary=false)
resourceAttrib(proj21task1, type=task, project=proj21, department=dept2, expertise={design}, proprietary=false)
resourceAttrib(proj21task2, type=task, project=proj21, department=dept2, expertise={coding}, proprietary=false)
# proprietary tasks
resourceAttrib(proj21task1propa, type=task, project=proj21, department=dept2, expertise={design}, proprietary=true)
resourceAttrib(proj21task2propa, type=task, project=proj21, department=dept2, expertise={coding}, proprietary=true)
resourceAttrib(proj21task1prop, type=task, project=proj21, department=dept2, expertise={design}, proprietary=true)
resourceAttrib(proj21task2prop, type=task, project=proj21, department=dept2, expertise={coding}, proprietary=true)

# proj22
resourceAttrib(proj22budget,type=budget, project=proj22, department=dept2)
resourceAttrib(proj22sched, type=schedule, project=proj22, department=dept2)
# un-proprietary tasks
resourceAttrib(proj22task1a, type=task, project=proj22, department=dept2, expertise={design}, proprietary=false)
resourceAttrib(proj22task2a, type=task, project=proj22, department=dept2, expertise={coding}, proprietary=false)
resourceAttrib(proj22task1, type=task, project=proj22, department=dept2, expertise={design}, proprietary=false)
resourceAttrib(proj22task2, type=task, project=proj22, department=dept2, expertise={coding}, proprietary=false)
# proprietary tasks
resourceAttrib(proj22task1propa, type=task, project=proj22, department=dept2, expertise={design}, proprietary=true)
resourceAttrib(proj22task2propa, type=task, project=proj22, department=dept2, expertise={coding}, proprietary=true)
resourceAttrib(proj22task1prop, type=task, project=proj22, department=dept2, expertise={design}, proprietary=true)
resourceAttrib(proj22task2prop, type=task, project=proj22, department=dept2, expertise={coding}, proprietary=true)

#------------------------------------------------------------
# rules
#------------------------------------------------------------

# the manager of a department can read and approve the budget
# for a project in the department
rule(adminRoles supseteqln {{manager}} ; type in {budget}; {read approve}; department = department)

# a project leader can read and write the project schedule and budget
rule( ; type in {schedule budget}; {read write}; projectsLed ] project)

# a user working on a project can read the project schedule
rule( ; type in {schedule}; {read}; projects ] project)

# a user can update the status of tasks assigned to him/her
rule( ; type in {task}; {setStatus}; tasks ] rid)

# a user working on a project can read and request to work on a non-proprietary
# task whose required areas of expertise are among his/her areas of expertise
rule( ; type in {task}, proprietary in {false}; {request read}; projects ] project, expertise > expertise)

# an employee working on a project can read and request to work on any
# task whose required areas of expertise are among his/her areas of expertise
rule(isEmployee in {True_} ; type in {task}; {request read}; projects ] project, expertise > expertise)

# an auditor assigned to a project can read the budget
rule(adminRoles supseteqln {{auditor}} ; type in {budget}; {read}; projects ] project)

# an accountant assigned to a project can read and write the budget
rule(adminRoles supseteqln {{accountant}} ; type in {budget}; {read write}; projects ] project)

# an accountant assigned to a project can update the cost of tasks
rule(adminRoles supseteqln {{accountant}} ; type in {task}; {setCost}; projects ] project)

# a planner assigned to a project can update the schedule
rule(adminRoles supseteqln {{planner}} ; type in {schedule}; {write}; projects ] project)

# a planner assigned to a project can update the schedule
# (e.g., start date, end date) of tasks
rule(adminRoles supseteqln {{planner}} ; type in {task}; {setSchedule}; projects ] project)

#------------------------------------------------------------
# unremovable attributes
#------------------------------------------------------------
unremovableResourceAttribs(type)
